<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="773.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="40689"><g><title>&lt;slotmap::DefaultKey as core::convert::From&lt;slotmap::KeyData&gt;&gt;::from (9 samples, 0.02%)</title><rect x="0.0000%" y="709" width="0.0221%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="9"/><text x="0.2500%" y="719.50"></text></g><g><title>&lt;slotmap::DefaultKey as core::convert::From&lt;slotmap::KeyData&gt;&gt;::from (6 samples, 0.01%)</title><rect x="0.0221%" y="693" width="0.0147%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="6"/><text x="0.2721%" y="703.50"></text></g><g><title>&lt;slotmap::DefaultKey as slotmap::Key&gt;::data (107 samples, 0.26%)</title><rect x="0.0369%" y="693" width="0.2630%" height="15" fill="rgb(221,193,54)" fg:x="15" fg:w="107"/><text x="0.2869%" y="703.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (151 samples, 0.37%)</title><rect x="0.3072%" y="693" width="0.3711%" height="15" fill="rgb(248,212,6)" fg:x="125" fg:w="151"/><text x="0.5572%" y="703.50"></text></g><g><title>[[heap]] (293 samples, 0.72%)</title><rect x="0.0221%" y="709" width="0.7201%" height="15" fill="rgb(208,68,35)" fg:x="9" fg:w="293"/><text x="0.2721%" y="719.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (26 samples, 0.06%)</title><rect x="0.6783%" y="693" width="0.0639%" height="15" fill="rgb(232,128,0)" fg:x="276" fg:w="26"/><text x="0.9283%" y="703.50"></text></g><g><title>&lt;slotmap::DefaultKey as core::convert::From&lt;slotmap::KeyData&gt;&gt;::from (93 samples, 0.23%)</title><rect x="0.7545%" y="693" width="0.2286%" height="15" fill="rgb(207,160,47)" fg:x="307" fg:w="93"/><text x="1.0045%" y="703.50"></text></g><g><title>&lt;slotmap::basic::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (880 samples, 2.16%)</title><rect x="0.9831%" y="693" width="2.1627%" height="15" fill="rgb(228,23,34)" fg:x="400" fg:w="880"/><text x="1.2331%" y="703.50">&lt;..</text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (96 samples, 0.24%)</title><rect x="2.9099%" y="677" width="0.2359%" height="15" fill="rgb(218,30,26)" fg:x="1184" fg:w="96"/><text x="3.1599%" y="687.50"></text></g><g><title>__ieee754_fmodf (95 samples, 0.23%)</title><rect x="3.1507%" y="693" width="0.2335%" height="15" fill="rgb(220,122,19)" fg:x="1282" fg:w="95"/><text x="3.4007%" y="703.50"></text></g><g><title>neuralang::World::age_foods (223 samples, 0.55%)</title><rect x="3.3891%" y="645" width="0.5481%" height="15" fill="rgb(250,228,42)" fg:x="1379" fg:w="223"/><text x="3.6391%" y="655.50"></text></g><g><title>neuralang::World::check_collisions (127 samples, 0.31%)</title><rect x="3.9372%" y="645" width="0.3121%" height="15" fill="rgb(240,193,28)" fg:x="1602" fg:w="127"/><text x="4.1872%" y="655.50"></text></g><g><title>neuralang::World::move_beings (25 samples, 0.06%)</title><rect x="4.2493%" y="645" width="0.0614%" height="15" fill="rgb(216,20,37)" fg:x="1729" fg:w="25"/><text x="4.4993%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (25 samples, 0.06%)</title><rect x="4.2493%" y="629" width="0.0614%" height="15" fill="rgb(206,188,39)" fg:x="1729" fg:w="25"/><text x="4.4993%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (25 samples, 0.06%)</title><rect x="4.2493%" y="613" width="0.0614%" height="15" fill="rgb(217,207,13)" fg:x="1729" fg:w="25"/><text x="4.4993%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (24 samples, 0.06%)</title><rect x="4.2518%" y="597" width="0.0590%" height="15" fill="rgb(231,73,38)" fg:x="1730" fg:w="24"/><text x="4.5018%" y="607.50"></text></g><g><title>neuralang::World::move_beings::{{closure}} (24 samples, 0.06%)</title><rect x="4.2518%" y="581" width="0.0590%" height="15" fill="rgb(225,20,46)" fg:x="1730" fg:w="24"/><text x="4.5018%" y="591.50"></text></g><g><title>neuralang::dir_from_theta (24 samples, 0.06%)</title><rect x="4.2518%" y="565" width="0.0590%" height="15" fill="rgb(210,31,41)" fg:x="1730" fg:w="24"/><text x="4.5018%" y="575.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::cos (24 samples, 0.06%)</title><rect x="4.2518%" y="549" width="0.0590%" height="15" fill="rgb(221,200,47)" fg:x="1730" fg:w="24"/><text x="4.5018%" y="559.50"></text></g><g><title>neuralang::World::tire_beings (15 samples, 0.04%)</title><rect x="4.3132%" y="645" width="0.0369%" height="15" fill="rgb(226,26,5)" fg:x="1755" fg:w="15"/><text x="4.5632%" y="655.50"></text></g><g><title>neuralang::main (443 samples, 1.09%)</title><rect x="3.3891%" y="693" width="1.0887%" height="15" fill="rgb(249,33,26)" fg:x="1379" fg:w="443"/><text x="3.6391%" y="703.50"></text></g><g><title>neuralang::gauge (443 samples, 1.09%)</title><rect x="3.3891%" y="677" width="1.0887%" height="15" fill="rgb(235,183,28)" fg:x="1379" fg:w="443"/><text x="3.6391%" y="687.50"></text></g><g><title>neuralang::World::step (443 samples, 1.09%)</title><rect x="3.3891%" y="661" width="1.0887%" height="15" fill="rgb(221,5,38)" fg:x="1379" fg:w="443"/><text x="3.6391%" y="671.50"></text></g><g><title>neuralang::World::update_cells (52 samples, 0.13%)</title><rect x="4.3501%" y="645" width="0.1278%" height="15" fill="rgb(247,18,42)" fg:x="1770" fg:w="52"/><text x="4.6001%" y="655.50"></text></g><g><title>neuralang::pos_to_cell (47 samples, 0.12%)</title><rect x="4.3624%" y="629" width="0.1155%" height="15" fill="rgb(241,131,45)" fg:x="1775" fg:w="47"/><text x="4.6124%" y="639.50"></text></g><g><title>slotmap::KeyData::new (145 samples, 0.36%)</title><rect x="4.4779%" y="693" width="0.3564%" height="15" fill="rgb(249,31,29)" fg:x="1822" fg:w="145"/><text x="4.7279%" y="703.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (105 samples, 0.26%)</title><rect x="4.8342%" y="693" width="0.2581%" height="15" fill="rgb(225,111,53)" fg:x="1967" fg:w="105"/><text x="5.0842%" y="703.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (10 samples, 0.02%)</title><rect x="5.0923%" y="693" width="0.0246%" height="15" fill="rgb(238,160,17)" fg:x="2072" fg:w="10"/><text x="5.3423%" y="703.50"></text></g><g><title>[unknown] (1,780 samples, 4.37%)</title><rect x="0.7447%" y="709" width="4.3746%" height="15" fill="rgb(214,148,48)" fg:x="303" fg:w="1780"/><text x="0.9947%" y="719.50">[unkn..</text></g><g><title>&lt;slotmap::DefaultKey as core::convert::From&lt;slotmap::KeyData&gt;&gt;::from (202 samples, 0.50%)</title><rect x="12.6668%" y="357" width="0.4964%" height="15" fill="rgb(232,36,49)" fg:x="5154" fg:w="202"/><text x="12.9168%" y="367.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (436 samples, 1.07%)</title><rect x="12.0942%" y="373" width="1.0715%" height="15" fill="rgb(209,103,24)" fg:x="4921" fg:w="436"/><text x="12.3442%" y="383.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (673 samples, 1.65%)</title><rect x="13.4557%" y="357" width="1.6540%" height="15" fill="rgb(229,88,8)" fg:x="5475" fg:w="673"/><text x="13.7057%" y="367.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (91 samples, 0.22%)</title><rect x="14.8861%" y="341" width="0.2236%" height="15" fill="rgb(213,181,19)" fg:x="6057" fg:w="91"/><text x="15.1361%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (792 samples, 1.95%)</title><rect x="13.1657%" y="373" width="1.9465%" height="15" fill="rgb(254,191,54)" fg:x="5357" fg:w="792"/><text x="13.4157%" y="383.50">&lt;..</text></g><g><title>slotmap::KeyData::new (223 samples, 0.55%)</title><rect x="15.1196%" y="373" width="0.5481%" height="15" fill="rgb(241,83,37)" fg:x="6152" fg:w="223"/><text x="15.3696%" y="383.50"></text></g><g><title>&lt;slotmap::basic::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,215 samples, 7.90%)</title><rect x="8.2848%" y="389" width="7.9014%" height="15" fill="rgb(233,36,39)" fg:x="3371" fg:w="3215"/><text x="8.5348%" y="399.50">&lt;slotmap::b..</text></g><g><title>slotmap::basic::Slot&lt;T&gt;::get_mut (211 samples, 0.52%)</title><rect x="15.6676%" y="373" width="0.5186%" height="15" fill="rgb(226,3,54)" fg:x="6375" fg:w="211"/><text x="15.9176%" y="383.50"></text></g><g><title>slotmap::basic::Slot&lt;T&gt;::occupied (211 samples, 0.52%)</title><rect x="15.6676%" y="357" width="0.5186%" height="15" fill="rgb(245,192,40)" fg:x="6375" fg:w="211"/><text x="15.9176%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (23 samples, 0.06%)</title><rect x="16.1887%" y="357" width="0.0565%" height="15" fill="rgb(238,167,29)" fg:x="6587" fg:w="23"/><text x="16.4387%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (28 samples, 0.07%)</title><rect x="16.2476%" y="341" width="0.0688%" height="15" fill="rgb(232,182,51)" fg:x="6611" fg:w="28"/><text x="16.4976%" y="351.50"></text></g><g><title>neuralang::World::age_foods::{{closure}} (28 samples, 0.07%)</title><rect x="16.2476%" y="325" width="0.0688%" height="15" fill="rgb(231,60,39)" fg:x="6611" fg:w="28"/><text x="16.4976%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (28 samples, 0.07%)</title><rect x="16.2476%" y="309" width="0.0688%" height="15" fill="rgb(208,69,12)" fg:x="6611" fg:w="28"/><text x="16.4976%" y="319.50"></text></g><g><title>core::cmp::PartialEq::ne (28 samples, 0.07%)</title><rect x="16.2476%" y="293" width="0.0688%" height="15" fill="rgb(235,93,37)" fg:x="6611" fg:w="28"/><text x="16.4976%" y="303.50"></text></g><g><title>&lt;slotmap::DefaultKey as core::cmp::PartialEq&gt;::eq (28 samples, 0.07%)</title><rect x="16.2476%" y="277" width="0.0688%" height="15" fill="rgb(213,116,39)" fg:x="6611" fg:w="28"/><text x="16.4976%" y="287.50"></text></g><g><title>&lt;slotmap::KeyData as core::cmp::PartialEq&gt;::eq (28 samples, 0.07%)</title><rect x="16.2476%" y="261" width="0.0688%" height="15" fill="rgb(222,207,29)" fg:x="6611" fg:w="28"/><text x="16.4976%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (53 samples, 0.13%)</title><rect x="16.1887%" y="389" width="0.1303%" height="15" fill="rgb(206,96,30)" fg:x="6587" fg:w="53"/><text x="16.4387%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (53 samples, 0.13%)</title><rect x="16.1887%" y="373" width="0.1303%" height="15" fill="rgb(218,138,4)" fg:x="6587" fg:w="53"/><text x="16.4387%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (30 samples, 0.07%)</title><rect x="16.2452%" y="357" width="0.0737%" height="15" fill="rgb(250,191,14)" fg:x="6610" fg:w="30"/><text x="16.4952%" y="367.50"></text></g><g><title>neuralang::pos_to_cell (21 samples, 0.05%)</title><rect x="16.3189%" y="389" width="0.0516%" height="15" fill="rgb(239,60,40)" fg:x="6640" fg:w="21"/><text x="16.5689%" y="399.50"></text></g><g><title>__ieee754_fmodf (12 samples, 0.03%)</title><rect x="16.3410%" y="373" width="0.0295%" height="15" fill="rgb(206,27,48)" fg:x="6649" fg:w="12"/><text x="16.5910%" y="383.50"></text></g><g><title>neuralang::World::age_foods (4,580 samples, 11.26%)</title><rect x="5.1193%" y="405" width="11.2561%" height="15" fill="rgb(225,35,8)" fg:x="2083" fg:w="4580"/><text x="5.3693%" y="415.50">neuralang::World:..</text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (6,240 samples, 15.34%)</title><rect x="22.5294%" y="389" width="15.3358%" height="15" fill="rgb(250,213,24)" fg:x="9167" fg:w="6240"/><text x="22.7794%" y="399.50">&lt;&amp;alloc::vec::Vec&lt;T,A&gt; ..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6,240 samples, 15.34%)</title><rect x="22.5294%" y="373" width="15.3358%" height="15" fill="rgb(247,123,22)" fg:x="9167" fg:w="6240"/><text x="22.7794%" y="383.50">&lt;alloc::vec::Vec&lt;T,A&gt; a..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,060 samples, 5.06%)</title><rect x="37.8653%" y="357" width="5.0628%" height="15" fill="rgb(231,138,38)" fg:x="15407" fg:w="2060"/><text x="38.1153%" y="367.50">&lt;usize..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,219 samples, 5.45%)</title><rect x="37.8653%" y="389" width="5.4536%" height="15" fill="rgb(231,145,46)" fg:x="15407" fg:w="2219"/><text x="38.1153%" y="399.50">&lt;alloc:..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,219 samples, 5.45%)</title><rect x="37.8653%" y="373" width="5.4536%" height="15" fill="rgb(251,118,11)" fg:x="15407" fg:w="2219"/><text x="38.1153%" y="383.50">core::s..</text></g><g><title>neuralang::main (159 samples, 0.39%)</title><rect x="42.9281%" y="357" width="0.3908%" height="15" fill="rgb(217,147,25)" fg:x="17467" fg:w="159"/><text x="43.1781%" y="367.50"></text></g><g><title>&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::next (463 samples, 1.14%)</title><rect x="43.3188%" y="373" width="1.1379%" height="15" fill="rgb(247,81,37)" fg:x="17626" fg:w="463"/><text x="43.5688%" y="383.50"></text></g><g><title>core::ops::index_range::IndexRange::next_unchecked (311 samples, 0.76%)</title><rect x="43.6924%" y="357" width="0.7643%" height="15" fill="rgb(209,12,38)" fg:x="17778" fg:w="311"/><text x="43.9424%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (56 samples, 0.14%)</title><rect x="44.4567%" y="309" width="0.1376%" height="15" fill="rgb(227,1,9)" fg:x="18089" fg:w="56"/><text x="44.7067%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (171 samples, 0.42%)</title><rect x="44.4567%" y="373" width="0.4203%" height="15" fill="rgb(248,47,43)" fg:x="18089" fg:w="171"/><text x="44.7067%" y="383.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (171 samples, 0.42%)</title><rect x="44.4567%" y="357" width="0.4203%" height="15" fill="rgb(221,10,30)" fg:x="18089" fg:w="171"/><text x="44.7067%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (171 samples, 0.42%)</title><rect x="44.4567%" y="341" width="0.4203%" height="15" fill="rgb(210,229,1)" fg:x="18089" fg:w="171"/><text x="44.7067%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (171 samples, 0.42%)</title><rect x="44.4567%" y="325" width="0.4203%" height="15" fill="rgb(222,148,37)" fg:x="18089" fg:w="171"/><text x="44.7067%" y="335.50"></text></g><g><title>neuralang::main (115 samples, 0.28%)</title><rect x="44.5944%" y="309" width="0.2826%" height="15" fill="rgb(234,67,33)" fg:x="18145" fg:w="115"/><text x="44.8444%" y="319.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (664 samples, 1.63%)</title><rect x="43.3188%" y="389" width="1.6319%" height="15" fill="rgb(247,98,35)" fg:x="17626" fg:w="664"/><text x="43.5688%" y="399.50"></text></g><g><title>neuralang::main (30 samples, 0.07%)</title><rect x="44.8770%" y="373" width="0.0737%" height="15" fill="rgb(247,138,52)" fg:x="18260" fg:w="30"/><text x="45.1270%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="49.6940%" y="373" width="0.0123%" height="15" fill="rgb(213,79,30)" fg:x="20220" fg:w="5"/><text x="49.9440%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="49.6940%" y="357" width="0.0123%" height="15" fill="rgb(246,177,23)" fg:x="20220" fg:w="5"/><text x="49.9440%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="49.6940%" y="341" width="0.0123%" height="15" fill="rgb(230,62,27)" fg:x="20220" fg:w="5"/><text x="49.9440%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="49.6940%" y="325" width="0.0123%" height="15" fill="rgb(216,154,8)" fg:x="20220" fg:w="5"/><text x="49.9440%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (7 samples, 0.02%)</title><rect x="49.7063%" y="341" width="0.0172%" height="15" fill="rgb(244,35,45)" fg:x="20225" fg:w="7"/><text x="49.9563%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,980 samples, 4.87%)</title><rect x="44.9507%" y="389" width="4.8662%" height="15" fill="rgb(251,115,12)" fg:x="18290" fg:w="1980"/><text x="45.2007%" y="399.50">&lt;core:..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (45 samples, 0.11%)</title><rect x="49.7063%" y="373" width="0.1106%" height="15" fill="rgb(240,54,50)" fg:x="20225" fg:w="45"/><text x="49.9563%" y="383.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (45 samples, 0.11%)</title><rect x="49.7063%" y="357" width="0.1106%" height="15" fill="rgb(233,84,52)" fg:x="20225" fg:w="45"/><text x="49.9563%" y="367.50"></text></g><g><title>neuralang::main (38 samples, 0.09%)</title><rect x="49.7235%" y="341" width="0.0934%" height="15" fill="rgb(207,117,47)" fg:x="20232" fg:w="38"/><text x="49.9735%" y="351.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Div&lt;f32&gt;&gt;::div (45 samples, 0.11%)</title><rect x="49.8169%" y="389" width="0.1106%" height="15" fill="rgb(249,43,39)" fg:x="20270" fg:w="45"/><text x="50.0669%" y="399.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (45 samples, 0.11%)</title><rect x="49.8169%" y="373" width="0.1106%" height="15" fill="rgb(209,38,44)" fg:x="20270" fg:w="45"/><text x="50.0669%" y="383.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Sub&gt;::sub (83 samples, 0.20%)</title><rect x="49.9275%" y="389" width="0.2040%" height="15" fill="rgb(236,212,23)" fg:x="20315" fg:w="83"/><text x="50.1775%" y="399.50"></text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (83 samples, 0.20%)</title><rect x="49.9275%" y="373" width="0.2040%" height="15" fill="rgb(242,79,21)" fg:x="20315" fg:w="83"/><text x="50.1775%" y="383.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::SubAssign&gt;::sub_assign (5 samples, 0.01%)</title><rect x="50.1315%" y="389" width="0.0123%" height="15" fill="rgb(211,96,35)" fg:x="20398" fg:w="5"/><text x="50.3815%" y="399.50"></text></g><g><title>&lt;f32 as core::ops::arith::SubAssign&gt;::sub_assign (5 samples, 0.01%)</title><rect x="50.1315%" y="373" width="0.0123%" height="15" fill="rgb(253,215,40)" fg:x="20398" fg:w="5"/><text x="50.3815%" y="383.50"></text></g><g><title>&lt;slotmap::KeyData as core::cmp::PartialEq&gt;::eq (720 samples, 1.77%)</title><rect x="50.1536%" y="357" width="1.7695%" height="15" fill="rgb(211,81,21)" fg:x="20407" fg:w="720"/><text x="50.4036%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (724 samples, 1.78%)</title><rect x="50.1536%" y="389" width="1.7794%" height="15" fill="rgb(208,190,38)" fg:x="20407" fg:w="724"/><text x="50.4036%" y="399.50">c..</text></g><g><title>&lt;slotmap::DefaultKey as core::cmp::PartialEq&gt;::eq (724 samples, 1.78%)</title><rect x="50.1536%" y="373" width="1.7794%" height="15" fill="rgb(235,213,38)" fg:x="20407" fg:w="724"/><text x="50.4036%" y="383.50">&lt;..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (56 samples, 0.14%)</title><rect x="51.9575%" y="357" width="0.1376%" height="15" fill="rgb(237,122,38)" fg:x="21141" fg:w="56"/><text x="52.2075%" y="367.50"></text></g><g><title>neuralang::main (54 samples, 0.13%)</title><rect x="51.9624%" y="341" width="0.1327%" height="15" fill="rgb(244,218,35)" fg:x="21143" fg:w="54"/><text x="52.2124%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (286 samples, 0.70%)</title><rect x="51.9330%" y="389" width="0.7029%" height="15" fill="rgb(240,68,47)" fg:x="21131" fg:w="286"/><text x="52.1830%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (286 samples, 0.70%)</title><rect x="51.9330%" y="373" width="0.7029%" height="15" fill="rgb(210,16,53)" fg:x="21131" fg:w="286"/><text x="52.1830%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (220 samples, 0.54%)</title><rect x="52.0952%" y="357" width="0.5407%" height="15" fill="rgb(235,124,12)" fg:x="21197" fg:w="220"/><text x="52.3452%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (16 samples, 0.04%)</title><rect x="52.6358%" y="389" width="0.0393%" height="15" fill="rgb(224,169,11)" fg:x="21417" fg:w="16"/><text x="52.8858%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (35 samples, 0.09%)</title><rect x="52.6752%" y="389" width="0.0860%" height="15" fill="rgb(250,166,2)" fg:x="21433" fg:w="35"/><text x="52.9252%" y="399.50"></text></g><g><title>glam::f32::vec2::&lt;impl core::ops::arith::Mul&lt;glam::f32::vec2::Vec2&gt; for f32&gt;::mul (24 samples, 0.06%)</title><rect x="52.7612%" y="389" width="0.0590%" height="15" fill="rgb(242,216,29)" fg:x="21468" fg:w="24"/><text x="53.0112%" y="399.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (24 samples, 0.06%)</title><rect x="52.7612%" y="373" width="0.0590%" height="15" fill="rgb(230,116,27)" fg:x="21468" fg:w="24"/><text x="53.0112%" y="383.50"></text></g><g><title>glam::f32::vec2::Vec2::dot (33 samples, 0.08%)</title><rect x="52.8202%" y="389" width="0.0811%" height="15" fill="rgb(228,99,48)" fg:x="21492" fg:w="33"/><text x="53.0702%" y="399.50"></text></g><g><title>glam::f32::vec2::Vec2::normalize (6 samples, 0.01%)</title><rect x="52.9013%" y="389" width="0.0147%" height="15" fill="rgb(253,11,6)" fg:x="21525" fg:w="6"/><text x="53.1513%" y="399.50"></text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (206 samples, 0.51%)</title><rect x="54.3218%" y="357" width="0.5063%" height="15" fill="rgb(247,143,39)" fg:x="22103" fg:w="206"/><text x="54.5718%" y="367.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Sub&gt;::sub (266 samples, 0.65%)</title><rect x="54.3218%" y="373" width="0.6537%" height="15" fill="rgb(236,97,10)" fg:x="22103" fg:w="266"/><text x="54.5718%" y="383.50"></text></g><g><title>neuralang::main (60 samples, 0.15%)</title><rect x="54.8281%" y="357" width="0.1475%" height="15" fill="rgb(233,208,19)" fg:x="22309" fg:w="60"/><text x="55.0781%" y="367.50"></text></g><g><title>neuralang::main (55 samples, 0.14%)</title><rect x="54.9780%" y="341" width="0.1352%" height="15" fill="rgb(216,164,2)" fg:x="22370" fg:w="55"/><text x="55.2280%" y="351.50"></text></g><g><title>glam::f32::math::std_math::sqrt (681 samples, 1.67%)</title><rect x="54.9780%" y="357" width="1.6737%" height="15" fill="rgb(220,129,5)" fg:x="22370" fg:w="681"/><text x="55.2280%" y="367.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (626 samples, 1.54%)</title><rect x="55.1132%" y="341" width="1.5385%" height="15" fill="rgb(242,17,10)" fg:x="22425" fg:w="626"/><text x="55.3632%" y="351.50"></text></g><g><title>neuralang::b_collides_b (1,888 samples, 4.64%)</title><rect x="52.9160%" y="389" width="4.6401%" height="15" fill="rgb(242,107,0)" fg:x="21531" fg:w="1888"/><text x="53.1660%" y="399.50">neura..</text></g><g><title>glam::f32::vec2::Vec2::length (1,049 samples, 2.58%)</title><rect x="54.9780%" y="373" width="2.5781%" height="15" fill="rgb(251,28,31)" fg:x="22370" fg:w="1049"/><text x="55.2280%" y="383.50">gl..</text></g><g><title>glam::f32::vec2::Vec2::dot (368 samples, 0.90%)</title><rect x="56.6517%" y="357" width="0.9044%" height="15" fill="rgb(233,223,10)" fg:x="23051" fg:w="368"/><text x="56.9017%" y="367.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Sub&gt;::sub (128 samples, 0.31%)</title><rect x="57.9100%" y="357" width="0.3146%" height="15" fill="rgb(215,21,27)" fg:x="23563" fg:w="128"/><text x="58.1600%" y="367.50"></text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (128 samples, 0.31%)</title><rect x="57.9100%" y="341" width="0.3146%" height="15" fill="rgb(232,23,21)" fg:x="23563" fg:w="128"/><text x="58.1600%" y="351.50"></text></g><g><title>glam::f32::math::std_math::sqrt (264 samples, 0.65%)</title><rect x="58.2246%" y="341" width="0.6488%" height="15" fill="rgb(244,5,23)" fg:x="23691" fg:w="264"/><text x="58.4746%" y="351.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (263 samples, 0.65%)</title><rect x="58.2270%" y="325" width="0.6464%" height="15" fill="rgb(226,81,46)" fg:x="23692" fg:w="263"/><text x="58.4770%" y="335.50"></text></g><g><title>neuralang::b_collides_f (744 samples, 1.83%)</title><rect x="57.5561%" y="389" width="1.8285%" height="15" fill="rgb(247,70,30)" fg:x="23419" fg:w="744"/><text x="57.8061%" y="399.50">n..</text></g><g><title>glam::f32::vec2::Vec2::distance (600 samples, 1.47%)</title><rect x="57.9100%" y="373" width="1.4746%" height="15" fill="rgb(212,68,19)" fg:x="23563" fg:w="600"/><text x="58.1600%" y="383.50"></text></g><g><title>glam::f32::vec2::Vec2::length (472 samples, 1.16%)</title><rect x="58.2246%" y="357" width="1.1600%" height="15" fill="rgb(240,187,13)" fg:x="23691" fg:w="472"/><text x="58.4746%" y="367.50"></text></g><g><title>glam::f32::vec2::Vec2::dot (208 samples, 0.51%)</title><rect x="58.8734%" y="341" width="0.5112%" height="15" fill="rgb(223,113,26)" fg:x="23955" fg:w="208"/><text x="59.1234%" y="351.50"></text></g><g><title>abstop12 (7 samples, 0.02%)</title><rect x="59.4239%" y="341" width="0.0172%" height="15" fill="rgb(206,192,2)" fg:x="24179" fg:w="7"/><text x="59.6739%" y="351.50"></text></g><g><title>reduce_fast (15 samples, 0.04%)</title><rect x="59.4411%" y="341" width="0.0369%" height="15" fill="rgb(241,108,4)" fg:x="24186" fg:w="15"/><text x="59.6911%" y="351.50"></text></g><g><title>neuralang::dir_from_theta (92 samples, 0.23%)</title><rect x="59.3846%" y="389" width="0.2261%" height="15" fill="rgb(247,173,49)" fg:x="24163" fg:w="92"/><text x="59.6346%" y="399.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::cos (92 samples, 0.23%)</title><rect x="59.3846%" y="373" width="0.2261%" height="15" fill="rgb(224,114,35)" fg:x="24163" fg:w="92"/><text x="59.6346%" y="383.50"></text></g><g><title>__sincosf_fma (92 samples, 0.23%)</title><rect x="59.3846%" y="357" width="0.2261%" height="15" fill="rgb(245,159,27)" fg:x="24163" fg:w="92"/><text x="59.6346%" y="367.50"></text></g><g><title>sincosf_poly (54 samples, 0.13%)</title><rect x="59.4780%" y="341" width="0.1327%" height="15" fill="rgb(245,172,44)" fg:x="24201" fg:w="54"/><text x="59.7280%" y="351.50"></text></g><g><title>v2df_to_sf (24 samples, 0.06%)</title><rect x="59.5517%" y="325" width="0.0590%" height="15" fill="rgb(236,23,11)" fg:x="24231" fg:w="24"/><text x="59.8017%" y="335.50"></text></g><g><title>neuralang::main (412 samples, 1.01%)</title><rect x="59.6107%" y="389" width="1.0126%" height="15" fill="rgb(205,117,38)" fg:x="24255" fg:w="412"/><text x="59.8607%" y="399.50"></text></g><g><title>neuralang::oob (17 samples, 0.04%)</title><rect x="60.6233%" y="389" width="0.0418%" height="15" fill="rgb(237,72,25)" fg:x="24667" fg:w="17"/><text x="60.8733%" y="399.50"></text></g><g><title>neuralang::two_to_one (1,607 samples, 3.95%)</title><rect x="60.6650%" y="389" width="3.9495%" height="15" fill="rgb(244,70,9)" fg:x="24684" fg:w="1607"/><text x="60.9150%" y="399.50">neur..</text></g><g><title>&lt;slotmap::DefaultKey as slotmap::Key&gt;::data (65 samples, 0.16%)</title><rect x="64.8431%" y="373" width="0.1597%" height="15" fill="rgb(217,125,39)" fg:x="26384" fg:w="65"/><text x="65.0931%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (886 samples, 2.18%)</title><rect x="65.0028%" y="373" width="2.1775%" height="15" fill="rgb(235,36,10)" fg:x="26449" fg:w="886"/><text x="65.2528%" y="383.50">c..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (788 samples, 1.94%)</title><rect x="65.2437%" y="357" width="1.9366%" height="15" fill="rgb(251,123,47)" fg:x="26547" fg:w="788"/><text x="65.4937%" y="367.50">s..</text></g><g><title>core::option::Option&lt;T&gt;::map (223 samples, 0.55%)</title><rect x="67.1803%" y="373" width="0.5481%" height="15" fill="rgb(221,13,13)" fg:x="27335" fg:w="223"/><text x="67.4303%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (215 samples, 0.53%)</title><rect x="67.7284%" y="357" width="0.5284%" height="15" fill="rgb(238,131,9)" fg:x="27558" fg:w="215"/><text x="67.9784%" y="367.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (1,507 samples, 3.70%)</title><rect x="64.6145%" y="389" width="3.7037%" height="15" fill="rgb(211,50,8)" fg:x="26291" fg:w="1507"/><text x="64.8645%" y="399.50">slot..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (240 samples, 0.59%)</title><rect x="67.7284%" y="373" width="0.5898%" height="15" fill="rgb(245,182,24)" fg:x="27558" fg:w="240"/><text x="67.9784%" y="383.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (25 samples, 0.06%)</title><rect x="68.2568%" y="357" width="0.0614%" height="15" fill="rgb(242,14,37)" fg:x="27773" fg:w="25"/><text x="68.5068%" y="367.50"></text></g><g><title>&lt;slotmap::DefaultKey as slotmap::Key&gt;::data (6 samples, 0.01%)</title><rect x="68.4558%" y="373" width="0.0147%" height="15" fill="rgb(246,228,12)" fg:x="27854" fg:w="6"/><text x="68.7058%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (465 samples, 1.14%)</title><rect x="68.4706%" y="373" width="1.1428%" height="15" fill="rgb(213,55,15)" fg:x="27860" fg:w="465"/><text x="68.7206%" y="383.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut::{{closure}} (429 samples, 1.05%)</title><rect x="68.5591%" y="357" width="1.0543%" height="15" fill="rgb(209,9,3)" fg:x="27896" fg:w="429"/><text x="68.8091%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (11 samples, 0.03%)</title><rect x="69.6134%" y="373" width="0.0270%" height="15" fill="rgb(230,59,30)" fg:x="28325" fg:w="11"/><text x="69.8634%" y="383.50"></text></g><g><title>neuralang::World::check_collisions (21,704 samples, 53.34%)</title><rect x="16.3754%" y="405" width="53.3412%" height="15" fill="rgb(209,121,21)" fg:x="6663" fg:w="21704"/><text x="16.6254%" y="415.50">neuralang::World::check_collisions</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (569 samples, 1.40%)</title><rect x="68.3182%" y="389" width="1.3984%" height="15" fill="rgb(220,109,13)" fg:x="27798" fg:w="569"/><text x="68.5682%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (31 samples, 0.08%)</title><rect x="69.6404%" y="373" width="0.0762%" height="15" fill="rgb(232,18,1)" fg:x="28336" fg:w="31"/><text x="69.8904%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (31 samples, 0.08%)</title><rect x="69.6404%" y="357" width="0.0762%" height="15" fill="rgb(215,41,42)" fg:x="28336" fg:w="31"/><text x="69.8904%" y="367.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (19 samples, 0.05%)</title><rect x="70.1443%" y="341" width="0.0467%" height="15" fill="rgb(224,123,36)" fg:x="28541" fg:w="19"/><text x="70.3943%" y="351.50"></text></g><g><title>&lt;slotmap::DefaultKey as core::convert::From&lt;slotmap::KeyData&gt;&gt;::from (19 samples, 0.05%)</title><rect x="70.1443%" y="325" width="0.0467%" height="15" fill="rgb(240,125,3)" fg:x="28541" fg:w="19"/><text x="70.3943%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.05%)</title><rect x="70.1910%" y="341" width="0.0467%" height="15" fill="rgb(205,98,50)" fg:x="28560" fg:w="19"/><text x="70.4410%" y="351.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.05%)</title><rect x="70.1910%" y="325" width="0.0467%" height="15" fill="rgb(205,185,37)" fg:x="28560" fg:w="19"/><text x="70.4410%" y="335.50"></text></g><g><title>&lt;slotmap::basic::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (197 samples, 0.48%)</title><rect x="69.8346%" y="357" width="0.4842%" height="15" fill="rgb(238,207,15)" fg:x="28415" fg:w="197"/><text x="70.0846%" y="367.50"></text></g><g><title>slotmap::KeyData::new (33 samples, 0.08%)</title><rect x="70.2377%" y="341" width="0.0811%" height="15" fill="rgb(213,199,42)" fg:x="28579" fg:w="33"/><text x="70.4877%" y="351.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Add&gt;::add (298 samples, 0.73%)</title><rect x="70.3433%" y="325" width="0.7324%" height="15" fill="rgb(235,201,11)" fg:x="28622" fg:w="298"/><text x="70.5933%" y="335.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (298 samples, 0.73%)</title><rect x="70.3433%" y="309" width="0.7324%" height="15" fill="rgb(207,46,11)" fg:x="28622" fg:w="298"/><text x="70.5933%" y="319.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Mul&lt;f32&gt;&gt;::mul (162 samples, 0.40%)</title><rect x="71.0757%" y="325" width="0.3981%" height="15" fill="rgb(241,35,35)" fg:x="28920" fg:w="162"/><text x="71.3257%" y="335.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (162 samples, 0.40%)</title><rect x="71.0757%" y="309" width="0.3981%" height="15" fill="rgb(243,32,47)" fg:x="28920" fg:w="162"/><text x="71.3257%" y="319.50"></text></g><g><title>abstop12 (42 samples, 0.10%)</title><rect x="71.7811%" y="277" width="0.1032%" height="15" fill="rgb(247,202,23)" fg:x="29207" fg:w="42"/><text x="72.0311%" y="287.50"></text></g><g><title>asuint (39 samples, 0.10%)</title><rect x="71.7884%" y="261" width="0.0958%" height="15" fill="rgb(219,102,11)" fg:x="29210" fg:w="39"/><text x="72.0384%" y="271.50"></text></g><g><title>reduce_fast (59 samples, 0.15%)</title><rect x="71.8843%" y="277" width="0.1450%" height="15" fill="rgb(243,110,44)" fg:x="29249" fg:w="59"/><text x="72.1343%" y="287.50"></text></g><g><title>neuralang::dir_from_theta (583 samples, 1.43%)</title><rect x="71.4739%" y="325" width="1.4328%" height="15" fill="rgb(222,74,54)" fg:x="29082" fg:w="583"/><text x="71.7239%" y="335.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::cos (583 samples, 1.43%)</title><rect x="71.4739%" y="309" width="1.4328%" height="15" fill="rgb(216,99,12)" fg:x="29082" fg:w="583"/><text x="71.7239%" y="319.50"></text></g><g><title>__sincosf_fma (560 samples, 1.38%)</title><rect x="71.5304%" y="293" width="1.3763%" height="15" fill="rgb(226,22,26)" fg:x="29105" fg:w="560"/><text x="71.7804%" y="303.50"></text></g><g><title>sincosf_poly (357 samples, 0.88%)</title><rect x="72.0293%" y="277" width="0.8774%" height="15" fill="rgb(217,163,10)" fg:x="29308" fg:w="357"/><text x="72.2793%" y="287.50"></text></g><g><title>v2df_to_sf (106 samples, 0.26%)</title><rect x="72.6462%" y="261" width="0.2605%" height="15" fill="rgb(213,25,53)" fg:x="29559" fg:w="106"/><text x="72.8962%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,346 samples, 3.31%)</title><rect x="69.7166%" y="389" width="3.3080%" height="15" fill="rgb(252,105,26)" fg:x="28367" fg:w="1346"/><text x="69.9666%" y="399.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,346 samples, 3.31%)</title><rect x="69.7166%" y="373" width="3.3080%" height="15" fill="rgb(220,39,43)" fg:x="28367" fg:w="1346"/><text x="69.9666%" y="383.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1,101 samples, 2.71%)</title><rect x="70.3188%" y="357" width="2.7059%" height="15" fill="rgb(229,68,48)" fg:x="28612" fg:w="1101"/><text x="70.5688%" y="367.50">co..</text></g><g><title>neuralang::World::move_beings::{{closure}} (1,101 samples, 2.71%)</title><rect x="70.3188%" y="341" width="2.7059%" height="15" fill="rgb(252,8,32)" fg:x="28612" fg:w="1101"/><text x="70.5688%" y="351.50">ne..</text></g><g><title>neuralang::oob (48 samples, 0.12%)</title><rect x="72.9067%" y="325" width="0.1180%" height="15" fill="rgb(223,20,43)" fg:x="29665" fg:w="48"/><text x="73.1567%" y="335.50"></text></g><g><title>neuralang::World::move_beings (1,347 samples, 3.31%)</title><rect x="69.7166%" y="405" width="3.3105%" height="15" fill="rgb(229,81,49)" fg:x="28367" fg:w="1347"/><text x="69.9666%" y="415.50">neu..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.01%)</title><rect x="73.0984%" y="357" width="0.0147%" height="15" fill="rgb(236,28,36)" fg:x="29743" fg:w="6"/><text x="73.3484%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 0.01%)</title><rect x="73.0984%" y="341" width="0.0147%" height="15" fill="rgb(249,185,26)" fg:x="29743" fg:w="6"/><text x="73.3484%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.01%)</title><rect x="73.1008%" y="325" width="0.0123%" height="15" fill="rgb(249,174,33)" fg:x="29744" fg:w="5"/><text x="73.3508%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (37 samples, 0.09%)</title><rect x="73.0320%" y="373" width="0.0909%" height="15" fill="rgb(233,201,37)" fg:x="29716" fg:w="37"/><text x="73.2820%" y="383.50"></text></g><g><title>neuralang::pos_to_cell (25 samples, 0.06%)</title><rect x="73.1230%" y="373" width="0.0614%" height="15" fill="rgb(221,78,26)" fg:x="29753" fg:w="25"/><text x="73.3730%" y="383.50"></text></g><g><title>__ieee754_fmodf (17 samples, 0.04%)</title><rect x="73.1426%" y="357" width="0.0418%" height="15" fill="rgb(250,127,30)" fg:x="29761" fg:w="17"/><text x="73.3926%" y="367.50"></text></g><g><title>neuralang::World::add_food (66 samples, 0.16%)</title><rect x="73.0296%" y="389" width="0.1622%" height="15" fill="rgb(230,49,44)" fg:x="29715" fg:w="66"/><text x="73.2796%" y="399.50"></text></g><g><title>neuralang::World::repop_foods (71 samples, 0.17%)</title><rect x="73.0296%" y="405" width="0.1745%" height="15" fill="rgb(229,67,23)" fg:x="29715" fg:w="71"/><text x="73.2796%" y="415.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (37 samples, 0.09%)</title><rect x="73.8676%" y="373" width="0.0909%" height="15" fill="rgb(249,83,47)" fg:x="30056" fg:w="37"/><text x="74.1176%" y="383.50"></text></g><g><title>&lt;slotmap::DefaultKey as core::convert::From&lt;slotmap::KeyData&gt;&gt;::from (20 samples, 0.05%)</title><rect x="73.9094%" y="357" width="0.0492%" height="15" fill="rgb(215,43,3)" fg:x="30073" fg:w="20"/><text x="74.1594%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.07%)</title><rect x="73.9586%" y="373" width="0.0713%" height="15" fill="rgb(238,154,13)" fg:x="30093" fg:w="29"/><text x="74.2086%" y="383.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.07%)</title><rect x="73.9586%" y="357" width="0.0713%" height="15" fill="rgb(219,56,2)" fg:x="30093" fg:w="29"/><text x="74.2086%" y="367.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (7 samples, 0.02%)</title><rect x="74.0126%" y="341" width="0.0172%" height="15" fill="rgb(233,0,4)" fg:x="30115" fg:w="7"/><text x="74.2626%" y="351.50"></text></g><g><title>slotmap::KeyData::new (23 samples, 0.06%)</title><rect x="74.0298%" y="373" width="0.0565%" height="15" fill="rgb(235,30,7)" fg:x="30122" fg:w="23"/><text x="74.2798%" y="383.50"></text></g><g><title>neuralang::World::tire_beings (375 samples, 0.92%)</title><rect x="73.2065%" y="405" width="0.9216%" height="15" fill="rgb(250,79,13)" fg:x="29787" fg:w="375"/><text x="73.4565%" y="415.50"></text></g><g><title>&lt;slotmap::basic::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (276 samples, 0.68%)</title><rect x="73.4498%" y="389" width="0.6783%" height="15" fill="rgb(211,146,34)" fg:x="29886" fg:w="276"/><text x="73.6998%" y="399.50"></text></g><g><title>slotmap::basic::Slot&lt;T&gt;::get_mut (17 samples, 0.04%)</title><rect x="74.0864%" y="373" width="0.0418%" height="15" fill="rgb(228,22,38)" fg:x="30145" fg:w="17"/><text x="74.3364%" y="383.50"></text></g><g><title>slotmap::basic::Slot&lt;T&gt;::occupied (17 samples, 0.04%)</title><rect x="74.0864%" y="357" width="0.0418%" height="15" fill="rgb(235,168,5)" fg:x="30145" fg:w="17"/><text x="74.3364%" y="367.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (30 samples, 0.07%)</title><rect x="74.9711%" y="373" width="0.0737%" height="15" fill="rgb(221,155,16)" fg:x="30505" fg:w="30"/><text x="75.2211%" y="383.50"></text></g><g><title>&lt;slotmap::DefaultKey as core::convert::From&lt;slotmap::KeyData&gt;&gt;::from (28 samples, 0.07%)</title><rect x="74.9760%" y="357" width="0.0688%" height="15" fill="rgb(215,215,53)" fg:x="30507" fg:w="28"/><text x="75.2260%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.07%)</title><rect x="75.0449%" y="373" width="0.0688%" height="15" fill="rgb(223,4,10)" fg:x="30535" fg:w="28"/><text x="75.2949%" y="383.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.07%)</title><rect x="75.0449%" y="357" width="0.0688%" height="15" fill="rgb(234,103,6)" fg:x="30535" fg:w="28"/><text x="75.2949%" y="367.50"></text></g><g><title>slotmap::KeyData::new (24 samples, 0.06%)</title><rect x="75.1137%" y="373" width="0.0590%" height="15" fill="rgb(227,97,0)" fg:x="30563" fg:w="24"/><text x="75.3637%" y="383.50"></text></g><g><title>&lt;slotmap::basic::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (204 samples, 0.50%)</title><rect x="74.6762%" y="389" width="0.5014%" height="15" fill="rgb(234,150,53)" fg:x="30385" fg:w="204"/><text x="74.9262%" y="399.50"></text></g><g><title>neuralang::main (321 samples, 0.79%)</title><rect x="75.1825%" y="389" width="0.7889%" height="15" fill="rgb(228,201,54)" fg:x="30591" fg:w="321"/><text x="75.4325%" y="399.50"></text></g><g><title>neuralang::oob (20 samples, 0.05%)</title><rect x="75.9714%" y="389" width="0.0492%" height="15" fill="rgb(222,22,37)" fg:x="30912" fg:w="20"/><text x="76.2214%" y="399.50"></text></g><g><title>__fmodf (304 samples, 0.75%)</title><rect x="78.0334%" y="373" width="0.7471%" height="15" fill="rgb(237,53,32)" fg:x="31751" fg:w="304"/><text x="78.2834%" y="383.50"></text></g><g><title>neuralang::pos_to_cell (4,891 samples, 12.02%)</title><rect x="76.0205%" y="389" width="12.0204%" height="15" fill="rgb(233,25,53)" fg:x="30932" fg:w="4891"/><text x="76.2705%" y="399.50">neuralang::pos_to_..</text></g><g><title>__ieee754_fmodf (3,768 samples, 9.26%)</title><rect x="78.7805%" y="373" width="9.2605%" height="15" fill="rgb(210,40,34)" fg:x="32055" fg:w="3768"/><text x="79.0305%" y="383.50">__ieee754_fmo..</text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="88.0189%" y="357" width="0.0221%" height="15" fill="rgb(241,220,44)" fg:x="35814" fg:w="9"/><text x="88.2689%" y="367.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="88.0238%" y="341" width="0.0172%" height="15" fill="rgb(235,28,35)" fg:x="35816" fg:w="7"/><text x="88.2738%" y="351.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="88.0238%" y="325" width="0.0172%" height="15" fill="rgb(210,56,17)" fg:x="35816" fg:w="7"/><text x="88.2738%" y="335.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="88.0238%" y="309" width="0.0172%" height="15" fill="rgb(224,130,29)" fg:x="35816" fg:w="7"/><text x="88.2738%" y="319.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="88.0238%" y="293" width="0.0172%" height="15" fill="rgb(235,212,8)" fg:x="35816" fg:w="7"/><text x="88.2738%" y="303.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="88.0238%" y="277" width="0.0172%" height="15" fill="rgb(223,33,50)" fg:x="35816" fg:w="7"/><text x="88.2738%" y="287.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="88.0238%" y="261" width="0.0172%" height="15" fill="rgb(219,149,13)" fg:x="35816" fg:w="7"/><text x="88.2738%" y="271.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="88.0238%" y="245" width="0.0172%" height="15" fill="rgb(250,156,29)" fg:x="35816" fg:w="7"/><text x="88.2738%" y="255.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="88.0238%" y="229" width="0.0172%" height="15" fill="rgb(216,193,19)" fg:x="35816" fg:w="7"/><text x="88.2738%" y="239.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="88.0238%" y="213" width="0.0172%" height="15" fill="rgb(216,135,14)" fg:x="35816" fg:w="7"/><text x="88.2738%" y="223.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="88.0262%" y="197" width="0.0147%" height="15" fill="rgb(241,47,5)" fg:x="35817" fg:w="6"/><text x="88.2762%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="88.0287%" y="181" width="0.0123%" height="15" fill="rgb(233,42,35)" fg:x="35818" fg:w="5"/><text x="88.2787%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="88.0287%" y="165" width="0.0123%" height="15" fill="rgb(231,13,6)" fg:x="35818" fg:w="5"/><text x="88.2787%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="88.0287%" y="149" width="0.0123%" height="15" fill="rgb(207,181,40)" fg:x="35818" fg:w="5"/><text x="88.2787%" y="159.50"></text></g><g><title>neuralang::World::update_cells (5,716 samples, 14.05%)</title><rect x="74.1281%" y="405" width="14.0480%" height="15" fill="rgb(254,173,49)" fg:x="30162" fg:w="5716"/><text x="74.3781%" y="415.50">neuralang::World::upd..</text></g><g><title>neuralang::same_partition_index (55 samples, 0.14%)</title><rect x="88.0410%" y="389" width="0.1352%" height="15" fill="rgb(221,1,38)" fg:x="35823" fg:w="55"/><text x="88.2910%" y="399.50"></text></g><g><title>neuralang::World::step (38,581 samples, 94.82%)</title><rect x="5.1193%" y="421" width="94.8192%" height="15" fill="rgb(206,124,46)" fg:x="2083" fg:w="38581"/><text x="5.3693%" y="431.50">neuralang::World::step</text></g><g><title>neuralang::main (4,786 samples, 11.76%)</title><rect x="88.1762%" y="405" width="11.7624%" height="15" fill="rgb(249,21,11)" fg:x="35878" fg:w="4786"/><text x="88.4262%" y="415.50">neuralang::main</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (13 samples, 0.03%)</title><rect x="99.9459%" y="325" width="0.0319%" height="15" fill="rgb(222,201,40)" fg:x="40667" fg:w="13"/><text x="100.1959%" y="335.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (13 samples, 0.03%)</title><rect x="99.9459%" y="309" width="0.0319%" height="15" fill="rgb(235,61,29)" fg:x="40667" fg:w="13"/><text x="100.1959%" y="319.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (13 samples, 0.03%)</title><rect x="99.9459%" y="293" width="0.0319%" height="15" fill="rgb(219,207,3)" fg:x="40667" fg:w="13"/><text x="100.1959%" y="303.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (13 samples, 0.03%)</title><rect x="99.9459%" y="277" width="0.0319%" height="15" fill="rgb(222,56,46)" fg:x="40667" fg:w="13"/><text x="100.1959%" y="287.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (13 samples, 0.03%)</title><rect x="99.9459%" y="261" width="0.0319%" height="15" fill="rgb(239,76,54)" fg:x="40667" fg:w="13"/><text x="100.1959%" y="271.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (13 samples, 0.03%)</title><rect x="99.9459%" y="245" width="0.0319%" height="15" fill="rgb(231,124,27)" fg:x="40667" fg:w="13"/><text x="100.1959%" y="255.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (13 samples, 0.03%)</title><rect x="99.9459%" y="229" width="0.0319%" height="15" fill="rgb(249,195,6)" fg:x="40667" fg:w="13"/><text x="100.1959%" y="239.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (13 samples, 0.03%)</title><rect x="99.9459%" y="213" width="0.0319%" height="15" fill="rgb(237,174,47)" fg:x="40667" fg:w="13"/><text x="100.1959%" y="223.50"></text></g><g><title>__GI___libc_write (13 samples, 0.03%)</title><rect x="99.9459%" y="197" width="0.0319%" height="15" fill="rgb(206,201,31)" fg:x="40667" fg:w="13"/><text x="100.1959%" y="207.50"></text></g><g><title>[unknown] (13 samples, 0.03%)</title><rect x="99.9459%" y="181" width="0.0319%" height="15" fill="rgb(231,57,52)" fg:x="40667" fg:w="13"/><text x="100.1959%" y="191.50"></text></g><g><title>[unknown] (13 samples, 0.03%)</title><rect x="99.9459%" y="165" width="0.0319%" height="15" fill="rgb(248,177,22)" fg:x="40667" fg:w="13"/><text x="100.1959%" y="175.50"></text></g><g><title>[unknown] (13 samples, 0.03%)</title><rect x="99.9459%" y="149" width="0.0319%" height="15" fill="rgb(215,211,37)" fg:x="40667" fg:w="13"/><text x="100.1959%" y="159.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="99.9484%" y="133" width="0.0295%" height="15" fill="rgb(241,128,51)" fg:x="40668" fg:w="12"/><text x="100.1984%" y="143.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="99.9484%" y="117" width="0.0295%" height="15" fill="rgb(227,165,31)" fg:x="40668" fg:w="12"/><text x="100.1984%" y="127.50"></text></g><g><title>[unknown] (11 samples, 0.03%)</title><rect x="99.9508%" y="101" width="0.0270%" height="15" fill="rgb(228,167,24)" fg:x="40669" fg:w="11"/><text x="100.2008%" y="111.50"></text></g><g><title>[unknown] (10 samples, 0.02%)</title><rect x="99.9533%" y="85" width="0.0246%" height="15" fill="rgb(228,143,12)" fg:x="40670" fg:w="10"/><text x="100.2033%" y="95.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="99.9582%" y="69" width="0.0197%" height="15" fill="rgb(249,149,8)" fg:x="40672" fg:w="8"/><text x="100.2082%" y="79.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="99.9582%" y="53" width="0.0197%" height="15" fill="rgb(243,35,44)" fg:x="40672" fg:w="8"/><text x="100.2082%" y="63.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="99.9607%" y="37" width="0.0172%" height="15" fill="rgb(246,89,9)" fg:x="40673" fg:w="7"/><text x="100.2107%" y="47.50"></text></g><g><title>__libc_start_main_impl (38,599 samples, 94.86%)</title><rect x="5.1193%" y="693" width="94.8635%" height="15" fill="rgb(233,213,13)" fg:x="2083" fg:w="38599"/><text x="5.3693%" y="703.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (38,599 samples, 94.86%)</title><rect x="5.1193%" y="677" width="94.8635%" height="15" fill="rgb(233,141,41)" fg:x="2083" fg:w="38599"/><text x="5.3693%" y="687.50">__libc_start_call_main</text></g><g><title>main (38,599 samples, 94.86%)</title><rect x="5.1193%" y="661" width="94.8635%" height="15" fill="rgb(239,167,4)" fg:x="2083" fg:w="38599"/><text x="5.3693%" y="671.50">main</text></g><g><title>std::rt::lang_start_internal (38,599 samples, 94.86%)</title><rect x="5.1193%" y="645" width="94.8635%" height="15" fill="rgb(209,217,16)" fg:x="2083" fg:w="38599"/><text x="5.3693%" y="655.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (38,599 samples, 94.86%)</title><rect x="5.1193%" y="629" width="94.8635%" height="15" fill="rgb(219,88,35)" fg:x="2083" fg:w="38599"/><text x="5.3693%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (38,599 samples, 94.86%)</title><rect x="5.1193%" y="613" width="94.8635%" height="15" fill="rgb(220,193,23)" fg:x="2083" fg:w="38599"/><text x="5.3693%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (38,599 samples, 94.86%)</title><rect x="5.1193%" y="597" width="94.8635%" height="15" fill="rgb(230,90,52)" fg:x="2083" fg:w="38599"/><text x="5.3693%" y="607.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (38,599 samples, 94.86%)</title><rect x="5.1193%" y="581" width="94.8635%" height="15" fill="rgb(252,106,19)" fg:x="2083" fg:w="38599"/><text x="5.3693%" y="591.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (38,599 samples, 94.86%)</title><rect x="5.1193%" y="565" width="94.8635%" height="15" fill="rgb(206,74,20)" fg:x="2083" fg:w="38599"/><text x="5.3693%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (38,599 samples, 94.86%)</title><rect x="5.1193%" y="549" width="94.8635%" height="15" fill="rgb(230,138,44)" fg:x="2083" fg:w="38599"/><text x="5.3693%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (38,599 samples, 94.86%)</title><rect x="5.1193%" y="533" width="94.8635%" height="15" fill="rgb(235,182,43)" fg:x="2083" fg:w="38599"/><text x="5.3693%" y="543.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (38,599 samples, 94.86%)</title><rect x="5.1193%" y="517" width="94.8635%" height="15" fill="rgb(242,16,51)" fg:x="2083" fg:w="38599"/><text x="5.3693%" y="527.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (38,599 samples, 94.86%)</title><rect x="5.1193%" y="501" width="94.8635%" height="15" fill="rgb(248,9,4)" fg:x="2083" fg:w="38599"/><text x="5.3693%" y="511.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (38,599 samples, 94.86%)</title><rect x="5.1193%" y="485" width="94.8635%" height="15" fill="rgb(210,31,22)" fg:x="2083" fg:w="38599"/><text x="5.3693%" y="495.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (38,599 samples, 94.86%)</title><rect x="5.1193%" y="469" width="94.8635%" height="15" fill="rgb(239,54,39)" fg:x="2083" fg:w="38599"/><text x="5.3693%" y="479.50">core::ops::function::FnOnce::call_once</text></g><g><title>neuralang::main (38,599 samples, 94.86%)</title><rect x="5.1193%" y="453" width="94.8635%" height="15" fill="rgb(230,99,41)" fg:x="2083" fg:w="38599"/><text x="5.3693%" y="463.50">neuralang::main</text></g><g><title>neuralang::gauge (38,599 samples, 94.86%)</title><rect x="5.1193%" y="437" width="94.8635%" height="15" fill="rgb(253,106,12)" fg:x="2083" fg:w="38599"/><text x="5.3693%" y="447.50">neuralang::gauge</text></g><g><title>std::io::stdio::_print (15 samples, 0.04%)</title><rect x="99.9459%" y="421" width="0.0369%" height="15" fill="rgb(213,46,41)" fg:x="40667" fg:w="15"/><text x="100.1959%" y="431.50"></text></g><g><title>std::io::stdio::print_to (15 samples, 0.04%)</title><rect x="99.9459%" y="405" width="0.0369%" height="15" fill="rgb(215,133,35)" fg:x="40667" fg:w="15"/><text x="100.1959%" y="415.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (15 samples, 0.04%)</title><rect x="99.9459%" y="389" width="0.0369%" height="15" fill="rgb(213,28,5)" fg:x="40667" fg:w="15"/><text x="100.1959%" y="399.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (15 samples, 0.04%)</title><rect x="99.9459%" y="373" width="0.0369%" height="15" fill="rgb(215,77,49)" fg:x="40667" fg:w="15"/><text x="100.1959%" y="383.50"></text></g><g><title>std::io::Write::write_fmt (15 samples, 0.04%)</title><rect x="99.9459%" y="357" width="0.0369%" height="15" fill="rgb(248,100,22)" fg:x="40667" fg:w="15"/><text x="100.1959%" y="367.50"></text></g><g><title>core::fmt::write (15 samples, 0.04%)</title><rect x="99.9459%" y="341" width="0.0369%" height="15" fill="rgb(208,67,9)" fg:x="40667" fg:w="15"/><text x="100.1959%" y="351.50"></text></g><g><title>_start (38,600 samples, 94.87%)</title><rect x="5.1193%" y="709" width="94.8659%" height="15" fill="rgb(219,133,21)" fg:x="2083" fg:w="38600"/><text x="5.3693%" y="719.50">_start</text></g><g><title>neuralang (40,684 samples, 99.99%)</title><rect x="0.0000%" y="725" width="99.9877%" height="15" fill="rgb(246,46,29)" fg:x="0" fg:w="40684"/><text x="0.2500%" y="735.50">neuralang</text></g><g><title>all (40,689 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(246,185,52)" fg:x="0" fg:w="40689"/><text x="0.2500%" y="751.50"></text></g><g><title>perf-exec (5 samples, 0.01%)</title><rect x="99.9877%" y="725" width="0.0123%" height="15" fill="rgb(252,136,11)" fg:x="40684" fg:w="5"/><text x="100.2377%" y="735.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="709" width="0.0123%" height="15" fill="rgb(219,138,53)" fg:x="40684" fg:w="5"/><text x="100.2377%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="693" width="0.0123%" height="15" fill="rgb(211,51,23)" fg:x="40684" fg:w="5"/><text x="100.2377%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="677" width="0.0123%" height="15" fill="rgb(247,221,28)" fg:x="40684" fg:w="5"/><text x="100.2377%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="661" width="0.0123%" height="15" fill="rgb(251,222,45)" fg:x="40684" fg:w="5"/><text x="100.2377%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="645" width="0.0123%" height="15" fill="rgb(217,162,53)" fg:x="40684" fg:w="5"/><text x="100.2377%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="629" width="0.0123%" height="15" fill="rgb(229,93,14)" fg:x="40684" fg:w="5"/><text x="100.2377%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="613" width="0.0123%" height="15" fill="rgb(209,67,49)" fg:x="40684" fg:w="5"/><text x="100.2377%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="597" width="0.0123%" height="15" fill="rgb(213,87,29)" fg:x="40684" fg:w="5"/><text x="100.2377%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="581" width="0.0123%" height="15" fill="rgb(205,151,52)" fg:x="40684" fg:w="5"/><text x="100.2377%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="565" width="0.0123%" height="15" fill="rgb(253,215,39)" fg:x="40684" fg:w="5"/><text x="100.2377%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="549" width="0.0123%" height="15" fill="rgb(221,220,41)" fg:x="40684" fg:w="5"/><text x="100.2377%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="533" width="0.0123%" height="15" fill="rgb(218,133,21)" fg:x="40684" fg:w="5"/><text x="100.2377%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="517" width="0.0123%" height="15" fill="rgb(221,193,43)" fg:x="40684" fg:w="5"/><text x="100.2377%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="501" width="0.0123%" height="15" fill="rgb(240,128,52)" fg:x="40684" fg:w="5"/><text x="100.2377%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="485" width="0.0123%" height="15" fill="rgb(253,114,12)" fg:x="40684" fg:w="5"/><text x="100.2377%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="469" width="0.0123%" height="15" fill="rgb(215,223,47)" fg:x="40684" fg:w="5"/><text x="100.2377%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="453" width="0.0123%" height="15" fill="rgb(248,225,23)" fg:x="40684" fg:w="5"/><text x="100.2377%" y="463.50"></text></g></svg></svg>