<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="805.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="145699"><g><title>[unknown] (42 samples, 0.03%)</title><rect x="0.0082%" y="581" width="0.0288%" height="15" fill="rgb(227,0,7)" fg:x="12" fg:w="42"/><text x="0.2582%" y="591.50"></text></g><g><title>[unknown] (39 samples, 0.03%)</title><rect x="0.0103%" y="565" width="0.0268%" height="15" fill="rgb(217,0,24)" fg:x="15" fg:w="39"/><text x="0.2603%" y="575.50"></text></g><g><title>[unknown] (39 samples, 0.03%)</title><rect x="0.0103%" y="549" width="0.0268%" height="15" fill="rgb(221,193,54)" fg:x="15" fg:w="39"/><text x="0.2603%" y="559.50"></text></g><g><title>[unknown] (38 samples, 0.03%)</title><rect x="0.0110%" y="533" width="0.0261%" height="15" fill="rgb(248,212,6)" fg:x="16" fg:w="38"/><text x="0.2610%" y="543.50"></text></g><g><title>[unknown] (38 samples, 0.03%)</title><rect x="0.0110%" y="517" width="0.0261%" height="15" fill="rgb(208,68,35)" fg:x="16" fg:w="38"/><text x="0.2610%" y="527.50"></text></g><g><title>[unknown] (34 samples, 0.02%)</title><rect x="0.0137%" y="501" width="0.0233%" height="15" fill="rgb(232,128,0)" fg:x="20" fg:w="34"/><text x="0.2637%" y="511.50"></text></g><g><title>[unknown] (31 samples, 0.02%)</title><rect x="0.0158%" y="485" width="0.0213%" height="15" fill="rgb(207,160,47)" fg:x="23" fg:w="31"/><text x="0.2658%" y="495.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="0.0178%" y="469" width="0.0192%" height="15" fill="rgb(228,23,34)" fg:x="26" fg:w="28"/><text x="0.2678%" y="479.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="0.0206%" y="453" width="0.0165%" height="15" fill="rgb(218,30,26)" fg:x="30" fg:w="24"/><text x="0.2706%" y="463.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="0.0233%" y="437" width="0.0137%" height="15" fill="rgb(220,122,19)" fg:x="34" fg:w="20"/><text x="0.2733%" y="447.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="0.0268%" y="421" width="0.0103%" height="15" fill="rgb(250,228,42)" fg:x="39" fg:w="15"/><text x="0.2768%" y="431.50"></text></g><g><title>__GI___futex_abstimed_wait_cancelable64 (44 samples, 0.03%)</title><rect x="0.0075%" y="629" width="0.0302%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="44"/><text x="0.2575%" y="639.50"></text></g><g><title>__futex_abstimed_wait_common (44 samples, 0.03%)</title><rect x="0.0075%" y="613" width="0.0302%" height="15" fill="rgb(216,20,37)" fg:x="11" fg:w="44"/><text x="0.2575%" y="623.50"></text></g><g><title>__futex_abstimed_wait_common64 (44 samples, 0.03%)</title><rect x="0.0075%" y="597" width="0.0302%" height="15" fill="rgb(206,188,39)" fg:x="11" fg:w="44"/><text x="0.2575%" y="607.50"></text></g><g><title>___pthread_cond_timedwait64 (50 samples, 0.03%)</title><rect x="0.0075%" y="661" width="0.0343%" height="15" fill="rgb(217,207,13)" fg:x="11" fg:w="50"/><text x="0.2575%" y="671.50"></text></g><g><title>__pthread_cond_wait_common (50 samples, 0.03%)</title><rect x="0.0075%" y="645" width="0.0343%" height="15" fill="rgb(231,73,38)" fg:x="11" fg:w="50"/><text x="0.2575%" y="655.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (60 samples, 0.04%)</title><rect x="0.0055%" y="709" width="0.0412%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="60"/><text x="0.2555%" y="719.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (60 samples, 0.04%)</title><rect x="0.0055%" y="693" width="0.0412%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="60"/><text x="0.2555%" y="703.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (58 samples, 0.04%)</title><rect x="0.0069%" y="677" width="0.0398%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="58"/><text x="0.2569%" y="687.50"></text></g><g><title>[vkrt]_Analysis (69 samples, 0.05%)</title><rect x="0.0000%" y="757" width="0.0474%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="69"/><text x="0.2500%" y="767.50"></text></g><g><title>__clone3 (61 samples, 0.04%)</title><rect x="0.0055%" y="741" width="0.0419%" height="15" fill="rgb(249,33,26)" fg:x="8" fg:w="61"/><text x="0.2555%" y="751.50"></text></g><g><title>start_thread (61 samples, 0.04%)</title><rect x="0.0055%" y="725" width="0.0419%" height="15" fill="rgb(235,183,28)" fg:x="8" fg:w="61"/><text x="0.2555%" y="735.50"></text></g><g><title>[[heap]] (18 samples, 0.01%)</title><rect x="0.0480%" y="741" width="0.0124%" height="15" fill="rgb(221,5,38)" fg:x="70" fg:w="18"/><text x="0.2980%" y="751.50"></text></g><g><title>[anon] (18 samples, 0.01%)</title><rect x="0.0604%" y="741" width="0.0124%" height="15" fill="rgb(247,18,42)" fg:x="88" fg:w="18"/><text x="0.3104%" y="751.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="0.0762%" y="725" width="0.0103%" height="15" fill="rgb(241,131,45)" fg:x="111" fg:w="15"/><text x="0.3262%" y="735.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="0.0755%" y="741" width="0.0199%" height="15" fill="rgb(249,31,29)" fg:x="110" fg:w="29"/><text x="0.3255%" y="751.50"></text></g><g><title>&lt;alsa::pcm::PCM as alsa::poll::Descriptors&gt;::revents (17 samples, 0.01%)</title><rect x="0.0975%" y="485" width="0.0117%" height="15" fill="rgb(225,111,53)" fg:x="142" fg:w="17"/><text x="0.3475%" y="495.50"></text></g><g><title>snd_pcm_poll_descriptors_revents (16 samples, 0.01%)</title><rect x="0.0981%" y="469" width="0.0110%" height="15" fill="rgb(238,160,17)" fg:x="143" fg:w="16"/><text x="0.3481%" y="479.50"></text></g><g><title>[libasound.so.2.0.0] (16 samples, 0.01%)</title><rect x="0.0981%" y="453" width="0.0110%" height="15" fill="rgb(214,148,48)" fg:x="143" fg:w="16"/><text x="0.3481%" y="463.50"></text></g><g><title>alsa::pcm::PCM::status (20 samples, 0.01%)</title><rect x="0.1105%" y="485" width="0.0137%" height="15" fill="rgb(232,36,49)" fg:x="161" fg:w="20"/><text x="0.3605%" y="495.50"></text></g><g><title>alsa::pcm::StatusBuilder::build (20 samples, 0.01%)</title><rect x="0.1105%" y="469" width="0.0137%" height="15" fill="rgb(209,103,24)" fg:x="161" fg:w="20"/><text x="0.3605%" y="479.50"></text></g><g><title>snd_pcm_status (19 samples, 0.01%)</title><rect x="0.1112%" y="453" width="0.0130%" height="15" fill="rgb(229,88,8)" fg:x="162" fg:w="19"/><text x="0.3612%" y="463.50"></text></g><g><title>[libasound.so.2.0.0] (19 samples, 0.01%)</title><rect x="0.1112%" y="437" width="0.0130%" height="15" fill="rgb(213,181,19)" fg:x="162" fg:w="19"/><text x="0.3612%" y="447.50"></text></g><g><title>[unknown] (46 samples, 0.03%)</title><rect x="0.1249%" y="453" width="0.0316%" height="15" fill="rgb(254,191,54)" fg:x="182" fg:w="46"/><text x="0.3749%" y="463.50"></text></g><g><title>[unknown] (43 samples, 0.03%)</title><rect x="0.1270%" y="437" width="0.0295%" height="15" fill="rgb(241,83,37)" fg:x="185" fg:w="43"/><text x="0.3770%" y="447.50"></text></g><g><title>[unknown] (42 samples, 0.03%)</title><rect x="0.1277%" y="421" width="0.0288%" height="15" fill="rgb(233,36,39)" fg:x="186" fg:w="42"/><text x="0.3777%" y="431.50"></text></g><g><title>[unknown] (42 samples, 0.03%)</title><rect x="0.1277%" y="405" width="0.0288%" height="15" fill="rgb(226,3,54)" fg:x="186" fg:w="42"/><text x="0.3777%" y="415.50"></text></g><g><title>[unknown] (39 samples, 0.03%)</title><rect x="0.1297%" y="389" width="0.0268%" height="15" fill="rgb(245,192,40)" fg:x="189" fg:w="39"/><text x="0.3797%" y="399.50"></text></g><g><title>[unknown] (37 samples, 0.03%)</title><rect x="0.1311%" y="373" width="0.0254%" height="15" fill="rgb(238,167,29)" fg:x="191" fg:w="37"/><text x="0.3811%" y="383.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="0.1338%" y="357" width="0.0226%" height="15" fill="rgb(232,182,51)" fg:x="195" fg:w="33"/><text x="0.3838%" y="367.50"></text></g><g><title>[unknown] (32 samples, 0.02%)</title><rect x="0.1345%" y="341" width="0.0220%" height="15" fill="rgb(231,60,39)" fg:x="196" fg:w="32"/><text x="0.3845%" y="351.50"></text></g><g><title>[unknown] (31 samples, 0.02%)</title><rect x="0.1352%" y="325" width="0.0213%" height="15" fill="rgb(208,69,12)" fg:x="197" fg:w="31"/><text x="0.3852%" y="335.50"></text></g><g><title>[unknown] (30 samples, 0.02%)</title><rect x="0.1359%" y="309" width="0.0206%" height="15" fill="rgb(235,93,37)" fg:x="198" fg:w="30"/><text x="0.3859%" y="319.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="0.1380%" y="293" width="0.0185%" height="15" fill="rgb(213,116,39)" fg:x="201" fg:w="27"/><text x="0.3880%" y="303.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="0.1386%" y="277" width="0.0178%" height="15" fill="rgb(222,207,29)" fg:x="202" fg:w="26"/><text x="0.3886%" y="287.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="0.1393%" y="261" width="0.0172%" height="15" fill="rgb(206,96,30)" fg:x="203" fg:w="25"/><text x="0.3893%" y="271.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="0.1414%" y="245" width="0.0151%" height="15" fill="rgb(218,138,4)" fg:x="206" fg:w="22"/><text x="0.3914%" y="255.50"></text></g><g><title>cpal::host::alsa::poll_descriptors_and_prepare_buffer (91 samples, 0.06%)</title><rect x="0.0954%" y="501" width="0.0625%" height="15" fill="rgb(250,191,14)" fg:x="139" fg:w="91"/><text x="0.3454%" y="511.50"></text></g><g><title>alsa::poll::poll (49 samples, 0.03%)</title><rect x="0.1242%" y="485" width="0.0336%" height="15" fill="rgb(239,60,40)" fg:x="181" fg:w="49"/><text x="0.3742%" y="495.50"></text></g><g><title>__GI___poll (49 samples, 0.03%)</title><rect x="0.1242%" y="469" width="0.0336%" height="15" fill="rgb(206,27,48)" fg:x="181" fg:w="49"/><text x="0.3742%" y="479.50"></text></g><g><title>[libasound.so.2.0.0] (45 samples, 0.03%)</title><rect x="0.1579%" y="469" width="0.0309%" height="15" fill="rgb(225,35,8)" fg:x="230" fg:w="45"/><text x="0.4079%" y="479.50"></text></g><g><title>[libasound.so.2.0.0] (44 samples, 0.03%)</title><rect x="0.1585%" y="453" width="0.0302%" height="15" fill="rgb(250,213,24)" fg:x="231" fg:w="44"/><text x="0.4085%" y="463.50"></text></g><g><title>[libasound.so.2.0.0] (42 samples, 0.03%)</title><rect x="0.1599%" y="437" width="0.0288%" height="15" fill="rgb(247,123,22)" fg:x="233" fg:w="42"/><text x="0.4099%" y="447.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (33 samples, 0.02%)</title><rect x="0.1661%" y="421" width="0.0226%" height="15" fill="rgb(231,138,38)" fg:x="242" fg:w="33"/><text x="0.4161%" y="431.50"></text></g><g><title>pa_stream_write (19 samples, 0.01%)</title><rect x="0.1757%" y="405" width="0.0130%" height="15" fill="rgb(231,145,46)" fg:x="256" fg:w="19"/><text x="0.4257%" y="415.50"></text></g><g><title>pa_stream_write_ext_free (19 samples, 0.01%)</title><rect x="0.1757%" y="389" width="0.0130%" height="15" fill="rgb(251,118,11)" fg:x="256" fg:w="19"/><text x="0.4257%" y="399.50"></text></g><g><title>alsa::pcm::IO&lt;S&gt;::writei (47 samples, 0.03%)</title><rect x="0.1579%" y="485" width="0.0323%" height="15" fill="rgb(217,147,25)" fg:x="230" fg:w="47"/><text x="0.4079%" y="495.50"></text></g><g><title>core::ptr::read (16 samples, 0.01%)</title><rect x="0.2100%" y="357" width="0.0110%" height="15" fill="rgb(247,81,37)" fg:x="306" fg:w="16"/><text x="0.4600%" y="367.50"></text></g><g><title>core::mem::swap (29 samples, 0.02%)</title><rect x="0.2100%" y="389" width="0.0199%" height="15" fill="rgb(209,12,38)" fg:x="306" fg:w="29"/><text x="0.4600%" y="399.50"></text></g><g><title>core::mem::swap_simple (29 samples, 0.02%)</title><rect x="0.2100%" y="373" width="0.0199%" height="15" fill="rgb(227,1,9)" fg:x="306" fg:w="29"/><text x="0.4600%" y="383.50"></text></g><g><title>&lt;rodio::dynamic_mixer::DynamicMixer&lt;S&gt; as core::iter::traits::iterator::Iterator&gt;::next (64 samples, 0.04%)</title><rect x="0.1915%" y="421" width="0.0439%" height="15" fill="rgb(248,47,43)" fg:x="279" fg:w="64"/><text x="0.4415%" y="431.50"></text></g><g><title>rodio::dynamic_mixer::DynamicMixer&lt;S&gt;::sum_current_sources (55 samples, 0.04%)</title><rect x="0.1977%" y="405" width="0.0377%" height="15" fill="rgb(221,10,30)" fg:x="288" fg:w="55"/><text x="0.4477%" y="415.50"></text></g><g><title>__clone3 (206 samples, 0.14%)</title><rect x="0.0954%" y="741" width="0.1414%" height="15" fill="rgb(210,229,1)" fg:x="139" fg:w="206"/><text x="0.3454%" y="751.50"></text></g><g><title>start_thread (206 samples, 0.14%)</title><rect x="0.0954%" y="725" width="0.1414%" height="15" fill="rgb(222,148,37)" fg:x="139" fg:w="206"/><text x="0.3454%" y="735.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (206 samples, 0.14%)</title><rect x="0.0954%" y="709" width="0.1414%" height="15" fill="rgb(234,67,33)" fg:x="139" fg:w="206"/><text x="0.3454%" y="719.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (206 samples, 0.14%)</title><rect x="0.0954%" y="693" width="0.1414%" height="15" fill="rgb(247,98,35)" fg:x="139" fg:w="206"/><text x="0.3454%" y="703.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (206 samples, 0.14%)</title><rect x="0.0954%" y="677" width="0.1414%" height="15" fill="rgb(247,138,52)" fg:x="139" fg:w="206"/><text x="0.3454%" y="687.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (206 samples, 0.14%)</title><rect x="0.0954%" y="661" width="0.1414%" height="15" fill="rgb(213,79,30)" fg:x="139" fg:w="206"/><text x="0.3454%" y="671.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (206 samples, 0.14%)</title><rect x="0.0954%" y="645" width="0.1414%" height="15" fill="rgb(246,177,23)" fg:x="139" fg:w="206"/><text x="0.3454%" y="655.50"></text></g><g><title>std::panic::catch_unwind (206 samples, 0.14%)</title><rect x="0.0954%" y="629" width="0.1414%" height="15" fill="rgb(230,62,27)" fg:x="139" fg:w="206"/><text x="0.3454%" y="639.50"></text></g><g><title>std::panicking::try (206 samples, 0.14%)</title><rect x="0.0954%" y="613" width="0.1414%" height="15" fill="rgb(216,154,8)" fg:x="139" fg:w="206"/><text x="0.3454%" y="623.50"></text></g><g><title>std::panicking::try::do_call (206 samples, 0.14%)</title><rect x="0.0954%" y="597" width="0.1414%" height="15" fill="rgb(244,35,45)" fg:x="139" fg:w="206"/><text x="0.3454%" y="607.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (206 samples, 0.14%)</title><rect x="0.0954%" y="581" width="0.1414%" height="15" fill="rgb(251,115,12)" fg:x="139" fg:w="206"/><text x="0.3454%" y="591.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (206 samples, 0.14%)</title><rect x="0.0954%" y="565" width="0.1414%" height="15" fill="rgb(240,54,50)" fg:x="139" fg:w="206"/><text x="0.3454%" y="575.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (206 samples, 0.14%)</title><rect x="0.0954%" y="549" width="0.1414%" height="15" fill="rgb(233,84,52)" fg:x="139" fg:w="206"/><text x="0.3454%" y="559.50"></text></g><g><title>cpal::host::alsa::Stream::new_output::{{closure}} (206 samples, 0.14%)</title><rect x="0.0954%" y="533" width="0.1414%" height="15" fill="rgb(207,117,47)" fg:x="139" fg:w="206"/><text x="0.3454%" y="543.50"></text></g><g><title>cpal::host::alsa::output_stream_worker (206 samples, 0.14%)</title><rect x="0.0954%" y="517" width="0.1414%" height="15" fill="rgb(249,43,39)" fg:x="139" fg:w="206"/><text x="0.3454%" y="527.50"></text></g><g><title>cpal::host::alsa::process_output (115 samples, 0.08%)</title><rect x="0.1579%" y="501" width="0.0789%" height="15" fill="rgb(209,38,44)" fg:x="230" fg:w="115"/><text x="0.4079%" y="511.50"></text></g><g><title>cpal::traits::DeviceTrait::build_output_stream::{{closure}} (68 samples, 0.05%)</title><rect x="0.1901%" y="485" width="0.0467%" height="15" fill="rgb(236,212,23)" fg:x="277" fg:w="68"/><text x="0.4401%" y="495.50"></text></g><g><title>&lt;cpal::platform::platform_impl::Device as rodio::stream::CpalDeviceExt&gt;::new_output_stream_with_format::{{closure}} (68 samples, 0.05%)</title><rect x="0.1901%" y="469" width="0.0467%" height="15" fill="rgb(242,79,21)" fg:x="277" fg:w="68"/><text x="0.4401%" y="479.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (68 samples, 0.05%)</title><rect x="0.1901%" y="453" width="0.0467%" height="15" fill="rgb(211,96,35)" fg:x="277" fg:w="68"/><text x="0.4401%" y="463.50"></text></g><g><title>&lt;cpal::platform::platform_impl::Device as rodio::stream::CpalDeviceExt&gt;::new_output_stream_with_format::{{closure}}::{{closure}} (67 samples, 0.05%)</title><rect x="0.1908%" y="437" width="0.0460%" height="15" fill="rgb(253,215,40)" fg:x="278" fg:w="67"/><text x="0.4408%" y="447.50"></text></g><g><title>cpal_alsa_out (277 samples, 0.19%)</title><rect x="0.0474%" y="757" width="0.1901%" height="15" fill="rgb(211,81,21)" fg:x="69" fg:w="277"/><text x="0.2974%" y="767.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (52 samples, 0.04%)</title><rect x="0.2471%" y="725" width="0.0357%" height="15" fill="rgb(208,190,38)" fg:x="360" fg:w="52"/><text x="0.4971%" y="735.50"></text></g><g><title>[[heap]] (133 samples, 0.09%)</title><rect x="0.2382%" y="741" width="0.0913%" height="15" fill="rgb(235,213,38)" fg:x="347" fg:w="133"/><text x="0.4882%" y="751.50"></text></g><g><title>ggez::graphics::draw::DrawParam::dest (80 samples, 0.05%)</title><rect x="0.3967%" y="661" width="0.0549%" height="15" fill="rgb(237,122,38)" fg:x="578" fg:w="80"/><text x="0.6467%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (74 samples, 0.05%)</title><rect x="0.4008%" y="645" width="0.0508%" height="15" fill="rgb(244,218,35)" fg:x="584" fg:w="74"/><text x="0.6508%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (173 samples, 0.12%)</title><rect x="0.3336%" y="725" width="0.1187%" height="15" fill="rgb(240,68,47)" fg:x="486" fg:w="173"/><text x="0.5836%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (172 samples, 0.12%)</title><rect x="0.3343%" y="709" width="0.1181%" height="15" fill="rgb(210,16,53)" fg:x="487" fg:w="172"/><text x="0.5843%" y="719.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (172 samples, 0.12%)</title><rect x="0.3343%" y="693" width="0.1181%" height="15" fill="rgb(235,124,12)" fg:x="487" fg:w="172"/><text x="0.5843%" y="703.50"></text></g><g><title>&lt;neuralang::MainState as ggez::event::EventHandler&gt;::draw::{{closure}} (172 samples, 0.12%)</title><rect x="0.3343%" y="677" width="0.1181%" height="15" fill="rgb(224,169,11)" fg:x="487" fg:w="172"/><text x="0.5843%" y="687.50"></text></g><g><title>neuralang::World::move_balls (77 samples, 0.05%)</title><rect x="0.4537%" y="693" width="0.0528%" height="15" fill="rgb(250,166,2)" fg:x="661" fg:w="77"/><text x="0.7037%" y="703.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (77 samples, 0.05%)</title><rect x="0.4537%" y="677" width="0.0528%" height="15" fill="rgb(242,216,29)" fg:x="661" fg:w="77"/><text x="0.7037%" y="687.50"></text></g><g><title>neuralang::World::move_balls::{{closure}} (77 samples, 0.05%)</title><rect x="0.4537%" y="661" width="0.0528%" height="15" fill="rgb(230,116,27)" fg:x="661" fg:w="77"/><text x="0.7037%" y="671.50"></text></g><g><title>neuralang::dir_from_theta (77 samples, 0.05%)</title><rect x="0.4537%" y="645" width="0.0528%" height="15" fill="rgb(228,99,48)" fg:x="661" fg:w="77"/><text x="0.7037%" y="655.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::cos (77 samples, 0.05%)</title><rect x="0.4537%" y="629" width="0.0528%" height="15" fill="rgb(253,11,6)" fg:x="661" fg:w="77"/><text x="0.7037%" y="639.50"></text></g><g><title>&lt;neuralang::MainState as ggez::event::EventHandler&gt;::update (209 samples, 0.14%)</title><rect x="0.4537%" y="725" width="0.1434%" height="15" fill="rgb(247,143,39)" fg:x="661" fg:w="209"/><text x="0.7037%" y="735.50"></text></g><g><title>neuralang::World::step (209 samples, 0.14%)</title><rect x="0.4537%" y="709" width="0.1434%" height="15" fill="rgb(236,97,10)" fg:x="661" fg:w="209"/><text x="0.7037%" y="719.50"></text></g><g><title>neuralang::World::update_cells (132 samples, 0.09%)</title><rect x="0.5065%" y="693" width="0.0906%" height="15" fill="rgb(233,208,19)" fg:x="738" fg:w="132"/><text x="0.7565%" y="703.50"></text></g><g><title>neuralang::pos_to_cell (121 samples, 0.08%)</title><rect x="0.5141%" y="677" width="0.0830%" height="15" fill="rgb(216,164,2)" fg:x="749" fg:w="121"/><text x="0.7641%" y="687.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (36 samples, 0.02%)</title><rect x="0.6115%" y="725" width="0.0247%" height="15" fill="rgb(220,129,5)" fg:x="891" fg:w="36"/><text x="0.8615%" y="735.50"></text></g><g><title>ggez::graphics::draw::DrawUniforms::from_param (79 samples, 0.05%)</title><rect x="0.6610%" y="725" width="0.0542%" height="15" fill="rgb(242,17,10)" fg:x="963" fg:w="79"/><text x="0.9110%" y="735.50"></text></g><g><title>ggez::graphics::instance::InstanceArray::set (141 samples, 0.10%)</title><rect x="0.7186%" y="725" width="0.0968%" height="15" fill="rgb(242,107,0)" fg:x="1047" fg:w="141"/><text x="0.9686%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (138 samples, 0.09%)</title><rect x="0.7207%" y="709" width="0.0947%" height="15" fill="rgb(251,28,31)" fg:x="1050" fg:w="138"/><text x="0.9707%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (138 samples, 0.09%)</title><rect x="0.7207%" y="693" width="0.0947%" height="15" fill="rgb(233,223,10)" fg:x="1050" fg:w="138"/><text x="0.9707%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (138 samples, 0.09%)</title><rect x="0.7207%" y="677" width="0.0947%" height="15" fill="rgb(215,21,27)" fg:x="1050" fg:w="138"/><text x="0.9707%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (138 samples, 0.09%)</title><rect x="0.7207%" y="661" width="0.0947%" height="15" fill="rgb(232,23,21)" fg:x="1050" fg:w="138"/><text x="0.9707%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (138 samples, 0.09%)</title><rect x="0.7207%" y="645" width="0.0947%" height="15" fill="rgb(244,5,23)" fg:x="1050" fg:w="138"/><text x="0.9707%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (138 samples, 0.09%)</title><rect x="0.7207%" y="629" width="0.0947%" height="15" fill="rgb(226,81,46)" fg:x="1050" fg:w="138"/><text x="0.9707%" y="639.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (138 samples, 0.09%)</title><rect x="0.7207%" y="613" width="0.0947%" height="15" fill="rgb(247,70,30)" fg:x="1050" fg:w="138"/><text x="0.9707%" y="623.50"></text></g><g><title>ggez::graphics::instance::InstanceArray::set::{{closure}} (138 samples, 0.09%)</title><rect x="0.7207%" y="597" width="0.0947%" height="15" fill="rgb(212,68,19)" fg:x="1050" fg:w="138"/><text x="0.9707%" y="607.50"></text></g><g><title>[[stack]] (734 samples, 0.50%)</title><rect x="0.3294%" y="741" width="0.5038%" height="15" fill="rgb(240,187,13)" fg:x="480" fg:w="734"/><text x="0.5794%" y="751.50"></text></g><g><title>&lt;ggez::graphics::types::LinearColor as core::convert::From&lt;ggez::graphics::types::Color&gt;&gt;::from (215 samples, 0.15%)</title><rect x="0.8641%" y="709" width="0.1476%" height="15" fill="rgb(223,113,26)" fg:x="1259" fg:w="215"/><text x="1.1141%" y="719.50"></text></g><g><title>&lt;ggez::graphics::types::LinearColor as core::convert::From&lt;ggez::graphics::types::Color&gt;&gt;::from::f (215 samples, 0.15%)</title><rect x="0.8641%" y="693" width="0.1476%" height="15" fill="rgb(206,192,2)" fg:x="1259" fg:w="215"/><text x="1.1141%" y="703.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::powf (215 samples, 0.15%)</title><rect x="0.8641%" y="677" width="0.1476%" height="15" fill="rgb(241,108,4)" fg:x="1259" fg:w="215"/><text x="1.1141%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (90 samples, 0.06%)</title><rect x="1.0117%" y="693" width="0.0618%" height="15" fill="rgb(247,173,49)" fg:x="1474" fg:w="90"/><text x="1.2617%" y="703.50"></text></g><g><title>[anon] (362 samples, 0.25%)</title><rect x="0.8332%" y="741" width="0.2485%" height="15" fill="rgb(224,114,35)" fg:x="1214" fg:w="362"/><text x="1.0832%" y="751.50"></text></g><g><title>ggez::graphics::draw::DrawUniforms::from_param (340 samples, 0.23%)</title><rect x="0.8483%" y="725" width="0.2334%" height="15" fill="rgb(245,159,27)" fg:x="1236" fg:w="340"/><text x="1.0983%" y="735.50"></text></g><g><title>ggez::graphics::draw::Transform::to_bare_matrix (102 samples, 0.07%)</title><rect x="1.0117%" y="709" width="0.0700%" height="15" fill="rgb(245,172,44)" fg:x="1474" fg:w="102"/><text x="1.2617%" y="719.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (19 samples, 0.01%)</title><rect x="1.0837%" y="741" width="0.0130%" height="15" fill="rgb(236,23,11)" fg:x="1579" fg:w="19"/><text x="1.3337%" y="751.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (68 samples, 0.05%)</title><rect x="1.1462%" y="725" width="0.0467%" height="15" fill="rgb(205,117,38)" fg:x="1670" fg:w="68"/><text x="1.3962%" y="735.50"></text></g><g><title>[unknown] (81 samples, 0.06%)</title><rect x="1.1942%" y="725" width="0.0556%" height="15" fill="rgb(237,72,25)" fg:x="1740" fg:w="81"/><text x="1.4442%" y="735.50"></text></g><g><title>[unknown] (80 samples, 0.05%)</title><rect x="1.1949%" y="709" width="0.0549%" height="15" fill="rgb(244,70,9)" fg:x="1741" fg:w="80"/><text x="1.4449%" y="719.50"></text></g><g><title>[unknown] (78 samples, 0.05%)</title><rect x="1.1963%" y="693" width="0.0535%" height="15" fill="rgb(217,125,39)" fg:x="1743" fg:w="78"/><text x="1.4463%" y="703.50"></text></g><g><title>[unknown] (77 samples, 0.05%)</title><rect x="1.1970%" y="677" width="0.0528%" height="15" fill="rgb(235,36,10)" fg:x="1744" fg:w="77"/><text x="1.4470%" y="687.50"></text></g><g><title>[unknown] (77 samples, 0.05%)</title><rect x="1.1970%" y="661" width="0.0528%" height="15" fill="rgb(251,123,47)" fg:x="1744" fg:w="77"/><text x="1.4470%" y="671.50"></text></g><g><title>[unknown] (76 samples, 0.05%)</title><rect x="1.1977%" y="645" width="0.0522%" height="15" fill="rgb(221,13,13)" fg:x="1745" fg:w="76"/><text x="1.4477%" y="655.50"></text></g><g><title>[unknown] (46 samples, 0.03%)</title><rect x="1.2183%" y="629" width="0.0316%" height="15" fill="rgb(238,131,9)" fg:x="1775" fg:w="46"/><text x="1.4683%" y="639.50"></text></g><g><title>[unknown] (44 samples, 0.03%)</title><rect x="1.2196%" y="613" width="0.0302%" height="15" fill="rgb(211,50,8)" fg:x="1777" fg:w="44"/><text x="1.4696%" y="623.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="1.2272%" y="597" width="0.0226%" height="15" fill="rgb(245,182,24)" fg:x="1788" fg:w="33"/><text x="1.4772%" y="607.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="1.2361%" y="581" width="0.0137%" height="15" fill="rgb(242,14,37)" fg:x="1801" fg:w="20"/><text x="1.4861%" y="591.50"></text></g><g><title>__ieee754_fmodf (267 samples, 0.18%)</title><rect x="1.2519%" y="725" width="0.1833%" height="15" fill="rgb(246,228,12)" fg:x="1824" fg:w="267"/><text x="1.5019%" y="735.50"></text></g><g><title>__sincosf_fma (24 samples, 0.02%)</title><rect x="1.4537%" y="725" width="0.0165%" height="15" fill="rgb(213,55,15)" fg:x="2118" fg:w="24"/><text x="1.7037%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (23 samples, 0.02%)</title><rect x="1.4756%" y="725" width="0.0158%" height="15" fill="rgb(209,9,3)" fg:x="2150" fg:w="23"/><text x="1.7256%" y="735.50"></text></g><g><title>ggez::context::ContextBuilder::build (22 samples, 0.02%)</title><rect x="1.4962%" y="725" width="0.0151%" height="15" fill="rgb(230,59,30)" fg:x="2180" fg:w="22"/><text x="1.7462%" y="735.50"></text></g><g><title>ggez::context::Context::from_conf (22 samples, 0.02%)</title><rect x="1.4962%" y="709" width="0.0151%" height="15" fill="rgb(209,121,21)" fg:x="2180" fg:w="22"/><text x="1.7462%" y="719.50"></text></g><g><title>ggez::graphics::context::GraphicsContext::new (21 samples, 0.01%)</title><rect x="1.4969%" y="693" width="0.0144%" height="15" fill="rgb(220,109,13)" fg:x="2181" fg:w="21"/><text x="1.7469%" y="703.50"></text></g><g><title>ggez::graphics::context::GraphicsContext::new_from_instance (20 samples, 0.01%)</title><rect x="1.4976%" y="677" width="0.0137%" height="15" fill="rgb(232,18,1)" fg:x="2182" fg:w="20"/><text x="1.7476%" y="687.50"></text></g><g><title>wgpu::Surface::configure (16 samples, 0.01%)</title><rect x="1.5004%" y="661" width="0.0110%" height="15" fill="rgb(215,41,42)" fg:x="2186" fg:w="16"/><text x="1.7504%" y="671.50"></text></g><g><title>&lt;T as wgpu::context::DynContext&gt;::surface_configure (16 samples, 0.01%)</title><rect x="1.5004%" y="645" width="0.0110%" height="15" fill="rgb(224,123,36)" fg:x="2186" fg:w="16"/><text x="1.7504%" y="655.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::surface_configure (16 samples, 0.01%)</title><rect x="1.5004%" y="629" width="0.0110%" height="15" fill="rgb(240,125,3)" fg:x="2186" fg:w="16"/><text x="1.7504%" y="639.50"></text></g><g><title>wgpu_core::device::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::surface_configure (16 samples, 0.01%)</title><rect x="1.5004%" y="613" width="0.0110%" height="15" fill="rgb(205,98,50)" fg:x="2186" fg:w="16"/><text x="1.7504%" y="623.50"></text></g><g><title>wgpu_hal::vulkan::instance::&lt;impl wgpu_hal::Surface&lt;wgpu_hal::vulkan::Api&gt; for wgpu_hal::vulkan::Surface&gt;::configure (16 samples, 0.01%)</title><rect x="1.5004%" y="597" width="0.0110%" height="15" fill="rgb(205,185,37)" fg:x="2186" fg:w="16"/><text x="1.7504%" y="607.50"></text></g><g><title>wgpu_hal::vulkan::device::&lt;impl wgpu_hal::vulkan::Device&gt;::create_swapchain (16 samples, 0.01%)</title><rect x="1.5004%" y="581" width="0.0110%" height="15" fill="rgb(238,207,15)" fg:x="2186" fg:w="16"/><text x="1.7504%" y="591.50"></text></g><g><title>ash::extensions::khr::swapchain::Swapchain::create_swapchain (16 samples, 0.01%)</title><rect x="1.5004%" y="565" width="0.0110%" height="15" fill="rgb(213,199,42)" fg:x="2186" fg:w="16"/><text x="1.7504%" y="575.50"></text></g><g><title>[libvulkan.so.1.3.204] (16 samples, 0.01%)</title><rect x="1.5004%" y="549" width="0.0110%" height="15" fill="rgb(235,201,11)" fg:x="2186" fg:w="16"/><text x="1.7504%" y="559.50"></text></g><g><title>[libGLX_nvidia.so.530.30.02] (16 samples, 0.01%)</title><rect x="1.5004%" y="533" width="0.0110%" height="15" fill="rgb(207,46,11)" fg:x="2186" fg:w="16"/><text x="1.7504%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (16 samples, 0.01%)</title><rect x="1.5004%" y="517" width="0.0110%" height="15" fill="rgb(241,35,35)" fg:x="2186" fg:w="16"/><text x="1.7504%" y="527.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (16 samples, 0.01%)</title><rect x="1.5004%" y="501" width="0.0110%" height="15" fill="rgb(243,32,47)" fg:x="2186" fg:w="16"/><text x="1.7504%" y="511.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (16 samples, 0.01%)</title><rect x="1.5004%" y="485" width="0.0110%" height="15" fill="rgb(247,202,23)" fg:x="2186" fg:w="16"/><text x="1.7504%" y="495.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (16 samples, 0.01%)</title><rect x="1.5004%" y="469" width="0.0110%" height="15" fill="rgb(219,102,11)" fg:x="2186" fg:w="16"/><text x="1.7504%" y="479.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (16 samples, 0.01%)</title><rect x="1.5004%" y="453" width="0.0110%" height="15" fill="rgb(243,110,44)" fg:x="2186" fg:w="16"/><text x="1.7504%" y="463.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (16 samples, 0.01%)</title><rect x="1.5004%" y="437" width="0.0110%" height="15" fill="rgb(222,74,54)" fg:x="2186" fg:w="16"/><text x="1.7504%" y="447.50"></text></g><g><title>ash::device::Device::cmd_begin_render_pass (18 samples, 0.01%)</title><rect x="1.5127%" y="549" width="0.0124%" height="15" fill="rgb(216,99,12)" fg:x="2204" fg:w="18"/><text x="1.7627%" y="559.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (18 samples, 0.01%)</title><rect x="1.5127%" y="533" width="0.0124%" height="15" fill="rgb(226,22,26)" fg:x="2204" fg:w="18"/><text x="1.7627%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (15 samples, 0.01%)</title><rect x="1.5148%" y="517" width="0.0103%" height="15" fill="rgb(217,163,10)" fg:x="2207" fg:w="15"/><text x="1.7648%" y="527.50"></text></g><g><title>ggez::graphics::canvas::Canvas::finalize (28 samples, 0.02%)</title><rect x="1.5120%" y="725" width="0.0192%" height="15" fill="rgb(213,25,53)" fg:x="2203" fg:w="28"/><text x="1.7620%" y="735.50"></text></g><g><title>ggez::graphics::internal_canvas::InternalCanvas::finish (28 samples, 0.02%)</title><rect x="1.5120%" y="709" width="0.0192%" height="15" fill="rgb(252,105,26)" fg:x="2203" fg:w="28"/><text x="1.7620%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;ggez::graphics::internal_canvas::InternalCanvas&gt; (28 samples, 0.02%)</title><rect x="1.5120%" y="693" width="0.0192%" height="15" fill="rgb(220,39,43)" fg:x="2203" fg:w="28"/><text x="1.7620%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;wgpu::RenderPass&gt; (28 samples, 0.02%)</title><rect x="1.5120%" y="677" width="0.0192%" height="15" fill="rgb(229,68,48)" fg:x="2203" fg:w="28"/><text x="1.7620%" y="687.50"></text></g><g><title>&lt;wgpu::RenderPass as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="1.5120%" y="661" width="0.0192%" height="15" fill="rgb(252,8,32)" fg:x="2203" fg:w="28"/><text x="1.7620%" y="671.50"></text></g><g><title>&lt;T as wgpu::context::DynContext&gt;::command_encoder_end_render_pass (28 samples, 0.02%)</title><rect x="1.5120%" y="645" width="0.0192%" height="15" fill="rgb(223,20,43)" fg:x="2203" fg:w="28"/><text x="1.7620%" y="655.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::command_encoder_end_render_pass (28 samples, 0.02%)</title><rect x="1.5120%" y="629" width="0.0192%" height="15" fill="rgb(229,81,49)" fg:x="2203" fg:w="28"/><text x="1.7620%" y="639.50"></text></g><g><title>wgpu_core::command::render::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass (28 samples, 0.02%)</title><rect x="1.5120%" y="613" width="0.0192%" height="15" fill="rgb(236,28,36)" fg:x="2203" fg:w="28"/><text x="1.7620%" y="623.50"></text></g><g><title>wgpu_core::command::render::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass_impl (28 samples, 0.02%)</title><rect x="1.5120%" y="597" width="0.0192%" height="15" fill="rgb(249,185,26)" fg:x="2203" fg:w="28"/><text x="1.7620%" y="607.50"></text></g><g><title>wgpu_core::command::render::RenderPassInfo&lt;A&gt;::start (28 samples, 0.02%)</title><rect x="1.5120%" y="581" width="0.0192%" height="15" fill="rgb(249,174,33)" fg:x="2203" fg:w="28"/><text x="1.7620%" y="591.50"></text></g><g><title>wgpu_hal::vulkan::command::&lt;impl wgpu_hal::CommandEncoder&lt;wgpu_hal::vulkan::Api&gt; for wgpu_hal::vulkan::CommandEncoder&gt;::begin_render_pass (28 samples, 0.02%)</title><rect x="1.5120%" y="565" width="0.0192%" height="15" fill="rgb(233,201,37)" fg:x="2203" fg:w="28"/><text x="1.7620%" y="575.50"></text></g><g><title>ggez::graphics::context::GraphicsContext::new (18 samples, 0.01%)</title><rect x="1.5319%" y="725" width="0.0124%" height="15" fill="rgb(221,78,26)" fg:x="2232" fg:w="18"/><text x="1.7819%" y="735.50"></text></g><g><title>ggez::graphics::draw::DrawParam::get_dest_mut (111 samples, 0.08%)</title><rect x="1.5505%" y="725" width="0.0762%" height="15" fill="rgb(250,127,30)" fg:x="2259" fg:w="111"/><text x="1.8005%" y="735.50"></text></g><g><title>ggez::graphics::draw::DrawParam::rotation (27 samples, 0.02%)</title><rect x="1.6321%" y="725" width="0.0185%" height="15" fill="rgb(230,49,44)" fg:x="2378" fg:w="27"/><text x="1.8821%" y="735.50"></text></g><g><title>ggez::graphics::draw::DrawUniforms::from_param (81 samples, 0.06%)</title><rect x="1.6507%" y="725" width="0.0556%" height="15" fill="rgb(229,67,23)" fg:x="2405" fg:w="81"/><text x="1.9007%" y="735.50"></text></g><g><title>glam::features::impl_mint::&lt;impl core::convert::From&lt;glam::f32::sse2::mat4::Mat4&gt; for mint::matrix::ColumnMatrix4&lt;f32&gt;&gt;::from (62 samples, 0.04%)</title><rect x="1.7090%" y="725" width="0.0426%" height="15" fill="rgb(249,83,47)" fg:x="2490" fg:w="62"/><text x="1.9590%" y="735.50"></text></g><g><title>glam::features::impl_mint::&lt;impl core::convert::From&lt;glam::f32::vec2::Vec2&gt; for mint::vector::Point2&lt;f32&gt;&gt;::from (191 samples, 0.13%)</title><rect x="1.7516%" y="725" width="0.1311%" height="15" fill="rgb(215,43,3)" fg:x="2552" fg:w="191"/><text x="2.0016%" y="735.50"></text></g><g><title>[libudev.so.1.7.2] (36 samples, 0.02%)</title><rect x="1.8929%" y="469" width="0.0247%" height="15" fill="rgb(238,154,13)" fg:x="2758" fg:w="36"/><text x="2.1429%" y="479.50"></text></g><g><title>__libc_openat64 (17 samples, 0.01%)</title><rect x="1.9259%" y="469" width="0.0117%" height="15" fill="rgb(219,56,2)" fg:x="2806" fg:w="17"/><text x="2.1759%" y="479.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="1.9259%" y="453" width="0.0117%" height="15" fill="rgb(233,0,4)" fg:x="2806" fg:w="17"/><text x="2.1759%" y="463.50"></text></g><g><title>[libudev.so.1.7.2] (67 samples, 0.05%)</title><rect x="1.8923%" y="485" width="0.0460%" height="15" fill="rgb(235,30,7)" fg:x="2757" fg:w="67"/><text x="2.1423%" y="495.50"></text></g><g><title>[libudev.so.1.7.2] (77 samples, 0.05%)</title><rect x="1.8909%" y="517" width="0.0528%" height="15" fill="rgb(250,79,13)" fg:x="2755" fg:w="77"/><text x="2.1409%" y="527.50"></text></g><g><title>[libudev.so.1.7.2] (76 samples, 0.05%)</title><rect x="1.8916%" y="501" width="0.0522%" height="15" fill="rgb(211,146,34)" fg:x="2756" fg:w="76"/><text x="2.1416%" y="511.50"></text></g><g><title>ggez::input::gamepad::GamepadContext::new (78 samples, 0.05%)</title><rect x="1.8909%" y="661" width="0.0535%" height="15" fill="rgb(228,22,38)" fg:x="2755" fg:w="78"/><text x="2.1409%" y="671.50"></text></g><g><title>gilrs::gamepad::Gilrs::new (78 samples, 0.05%)</title><rect x="1.8909%" y="645" width="0.0535%" height="15" fill="rgb(235,168,5)" fg:x="2755" fg:w="78"/><text x="2.1409%" y="655.50"></text></g><g><title>gilrs::gamepad::GilrsBuilder::build (78 samples, 0.05%)</title><rect x="1.8909%" y="629" width="0.0535%" height="15" fill="rgb(221,155,16)" fg:x="2755" fg:w="78"/><text x="2.1409%" y="639.50"></text></g><g><title>gilrs_core::Gilrs::new (78 samples, 0.05%)</title><rect x="1.8909%" y="613" width="0.0535%" height="15" fill="rgb(215,215,53)" fg:x="2755" fg:w="78"/><text x="2.1409%" y="623.50"></text></g><g><title>gilrs_core::platform::platform::gamepad::Gilrs::new (78 samples, 0.05%)</title><rect x="1.8909%" y="597" width="0.0535%" height="15" fill="rgb(223,4,10)" fg:x="2755" fg:w="78"/><text x="2.1409%" y="607.50"></text></g><g><title>gilrs_core::platform::platform::udev::Enumerate::scan_devices (78 samples, 0.05%)</title><rect x="1.8909%" y="581" width="0.0535%" height="15" fill="rgb(234,103,6)" fg:x="2755" fg:w="78"/><text x="2.1409%" y="591.50"></text></g><g><title>udev_enumerate_scan_devices (78 samples, 0.05%)</title><rect x="1.8909%" y="565" width="0.0535%" height="15" fill="rgb(227,97,0)" fg:x="2755" fg:w="78"/><text x="2.1409%" y="575.50"></text></g><g><title>[libudev.so.1.7.2] (78 samples, 0.05%)</title><rect x="1.8909%" y="549" width="0.0535%" height="15" fill="rgb(234,150,53)" fg:x="2755" fg:w="78"/><text x="2.1409%" y="559.50"></text></g><g><title>[libudev.so.1.7.2] (78 samples, 0.05%)</title><rect x="1.8909%" y="533" width="0.0535%" height="15" fill="rgb(228,201,54)" fg:x="2755" fg:w="78"/><text x="2.1409%" y="543.50"></text></g><g><title>ggez::context::ContextBuilder::build (90 samples, 0.06%)</title><rect x="1.8868%" y="693" width="0.0618%" height="15" fill="rgb(222,22,37)" fg:x="2749" fg:w="90"/><text x="2.1368%" y="703.50"></text></g><g><title>ggez::context::Context::from_conf (90 samples, 0.06%)</title><rect x="1.8868%" y="677" width="0.0618%" height="15" fill="rgb(237,53,32)" fg:x="2749" fg:w="90"/><text x="2.1368%" y="687.50"></text></g><g><title>winit::platform_impl::platform::x11::event_processor::EventProcessor&lt;T&gt;::poll_one_event (21 samples, 0.01%)</title><rect x="1.9533%" y="581" width="0.0144%" height="15" fill="rgb(233,25,53)" fg:x="2846" fg:w="21"/><text x="2.2033%" y="591.50"></text></g><g><title>XCheckIfEvent (21 samples, 0.01%)</title><rect x="1.9533%" y="565" width="0.0144%" height="15" fill="rgb(210,40,34)" fg:x="2846" fg:w="21"/><text x="2.2033%" y="575.50"></text></g><g><title>_XEventsQueued (20 samples, 0.01%)</title><rect x="1.9540%" y="549" width="0.0137%" height="15" fill="rgb(241,220,44)" fg:x="2847" fg:w="20"/><text x="2.2040%" y="559.50"></text></g><g><title>[libX11.so.6.4.0] (20 samples, 0.01%)</title><rect x="1.9540%" y="533" width="0.0137%" height="15" fill="rgb(235,28,35)" fg:x="2847" fg:w="20"/><text x="2.2040%" y="543.50"></text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::drain_events (34 samples, 0.02%)</title><rect x="1.9533%" y="597" width="0.0233%" height="15" fill="rgb(210,56,17)" fg:x="2846" fg:w="34"/><text x="2.2033%" y="607.50"></text></g><g><title>wgpu_core::device::Device&lt;A&gt;::create_bind_group (39 samples, 0.03%)</title><rect x="2.0103%" y="421" width="0.0268%" height="15" fill="rgb(224,130,29)" fg:x="2929" fg:w="39"/><text x="2.2603%" y="431.50"></text></g><g><title>wgpu_hal::vulkan::device::&lt;impl wgpu_hal::Device&lt;wgpu_hal::vulkan::Api&gt; for wgpu_hal::vulkan::Device&gt;::create_bind_group (23 samples, 0.02%)</title><rect x="2.0213%" y="405" width="0.0158%" height="15" fill="rgb(235,212,8)" fg:x="2945" fg:w="23"/><text x="2.2713%" y="415.50"></text></g><g><title>gpu_descriptor::allocator::DescriptorAllocator&lt;P,S&gt;::allocate (20 samples, 0.01%)</title><rect x="2.0233%" y="389" width="0.0137%" height="15" fill="rgb(223,33,50)" fg:x="2948" fg:w="20"/><text x="2.2733%" y="399.50"></text></g><g><title>wgpu::Device::create_bind_group (51 samples, 0.04%)</title><rect x="2.0041%" y="485" width="0.0350%" height="15" fill="rgb(219,149,13)" fg:x="2920" fg:w="51"/><text x="2.2541%" y="495.50"></text></g><g><title>&lt;T as wgpu::context::DynContext&gt;::device_create_bind_group (51 samples, 0.04%)</title><rect x="2.0041%" y="469" width="0.0350%" height="15" fill="rgb(250,156,29)" fg:x="2920" fg:w="51"/><text x="2.2541%" y="479.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::device_create_bind_group (49 samples, 0.03%)</title><rect x="2.0055%" y="453" width="0.0336%" height="15" fill="rgb(216,193,19)" fg:x="2922" fg:w="49"/><text x="2.2555%" y="463.50"></text></g><g><title>wgpu_core::device::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::device_create_bind_group (43 samples, 0.03%)</title><rect x="2.0096%" y="437" width="0.0295%" height="15" fill="rgb(216,135,14)" fg:x="2928" fg:w="43"/><text x="2.2596%" y="447.50"></text></g><g><title>ash::device::Device::bind_buffer_memory (17 samples, 0.01%)</title><rect x="2.0563%" y="389" width="0.0117%" height="15" fill="rgb(241,47,5)" fg:x="2996" fg:w="17"/><text x="2.3063%" y="399.50"></text></g><g><title>[libGLX_nvidia.so.530.30.02] (17 samples, 0.01%)</title><rect x="2.0563%" y="373" width="0.0117%" height="15" fill="rgb(233,42,35)" fg:x="2996" fg:w="17"/><text x="2.3063%" y="383.50"></text></g><g><title>wgpu_core::device::Device&lt;A&gt;::create_buffer (62 samples, 0.04%)</title><rect x="2.0433%" y="421" width="0.0426%" height="15" fill="rgb(231,13,6)" fg:x="2977" fg:w="62"/><text x="2.2933%" y="431.50"></text></g><g><title>wgpu_hal::vulkan::device::&lt;impl wgpu_hal::Device&lt;wgpu_hal::vulkan::Api&gt; for wgpu_hal::vulkan::Device&gt;::create_buffer (46 samples, 0.03%)</title><rect x="2.0542%" y="405" width="0.0316%" height="15" fill="rgb(207,181,40)" fg:x="2993" fg:w="46"/><text x="2.3042%" y="415.50"></text></g><g><title>&lt;T as wgpu::context::DynContext&gt;::device_create_buffer (71 samples, 0.05%)</title><rect x="2.0391%" y="469" width="0.0487%" height="15" fill="rgb(254,173,49)" fg:x="2971" fg:w="71"/><text x="2.2891%" y="479.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::device_create_buffer (71 samples, 0.05%)</title><rect x="2.0391%" y="453" width="0.0487%" height="15" fill="rgb(221,1,38)" fg:x="2971" fg:w="71"/><text x="2.2891%" y="463.50"></text></g><g><title>wgpu_core::device::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::device_create_buffer (69 samples, 0.05%)</title><rect x="2.0405%" y="437" width="0.0474%" height="15" fill="rgb(206,124,46)" fg:x="2973" fg:w="69"/><text x="2.2905%" y="447.50"></text></g><g><title>ggez::graphics::instance::InstanceArray::new_wgpu (129 samples, 0.09%)</title><rect x="2.0000%" y="501" width="0.0885%" height="15" fill="rgb(249,21,11)" fg:x="2914" fg:w="129"/><text x="2.2500%" y="511.50"></text></g><g><title>wgpu::Device::create_buffer (72 samples, 0.05%)</title><rect x="2.0391%" y="485" width="0.0494%" height="15" fill="rgb(222,201,40)" fg:x="2971" fg:w="72"/><text x="2.2891%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,979 samples, 2.73%)</title><rect x="2.0920%" y="437" width="2.7310%" height="15" fill="rgb(235,61,29)" fg:x="3048" fg:w="3979"/><text x="2.3420%" y="447.50">co..</text></g><g><title>__memcpy_avx_unaligned_erms (3,979 samples, 2.73%)</title><rect x="2.0920%" y="421" width="2.7310%" height="15" fill="rgb(219,207,3)" fg:x="3048" fg:w="3979"/><text x="2.3420%" y="431.50">__..</text></g><g><title>wgpu_core::device::queue::PendingWrites&lt;A&gt;::activate (28 samples, 0.02%)</title><rect x="4.8250%" y="421" width="0.0192%" height="15" fill="rgb(222,56,46)" fg:x="7030" fg:w="28"/><text x="5.0750%" y="431.50"></text></g><g><title>wgpu_hal::vulkan::command::&lt;impl wgpu_hal::CommandEncoder&lt;wgpu_hal::vulkan::Api&gt; for wgpu_hal::vulkan::CommandEncoder&gt;::begin_encoding (28 samples, 0.02%)</title><rect x="4.8250%" y="405" width="0.0192%" height="15" fill="rgb(239,76,54)" fg:x="7030" fg:w="28"/><text x="5.0750%" y="415.50"></text></g><g><title>ash::device::Device::begin_command_buffer (26 samples, 0.02%)</title><rect x="4.8264%" y="389" width="0.0178%" height="15" fill="rgb(231,124,27)" fg:x="7032" fg:w="26"/><text x="5.0764%" y="399.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (26 samples, 0.02%)</title><rect x="4.8264%" y="373" width="0.0178%" height="15" fill="rgb(249,195,6)" fg:x="7032" fg:w="26"/><text x="5.0764%" y="383.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (22 samples, 0.02%)</title><rect x="4.8291%" y="357" width="0.0151%" height="15" fill="rgb(237,174,47)" fg:x="7036" fg:w="22"/><text x="5.0791%" y="367.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (17 samples, 0.01%)</title><rect x="4.8326%" y="341" width="0.0117%" height="15" fill="rgb(206,201,31)" fg:x="7041" fg:w="17"/><text x="5.0826%" y="351.50"></text></g><g><title>wgpu_hal::vulkan::command::&lt;impl wgpu_hal::CommandEncoder&lt;wgpu_hal::vulkan::Api&gt; for wgpu_hal::vulkan::CommandEncoder&gt;::copy_buffer_to_buffer (25 samples, 0.02%)</title><rect x="4.8456%" y="421" width="0.0172%" height="15" fill="rgb(231,57,52)" fg:x="7060" fg:w="25"/><text x="5.0956%" y="431.50"></text></g><g><title>ash::device::Device::cmd_copy_buffer (25 samples, 0.02%)</title><rect x="4.8456%" y="405" width="0.0172%" height="15" fill="rgb(248,177,22)" fg:x="7060" fg:w="25"/><text x="5.0956%" y="415.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (25 samples, 0.02%)</title><rect x="4.8456%" y="389" width="0.0172%" height="15" fill="rgb(215,211,37)" fg:x="7060" fg:w="25"/><text x="5.0956%" y="399.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (25 samples, 0.02%)</title><rect x="4.8456%" y="373" width="0.0172%" height="15" fill="rgb(241,128,51)" fg:x="7060" fg:w="25"/><text x="5.0956%" y="383.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (23 samples, 0.02%)</title><rect x="4.8470%" y="357" width="0.0158%" height="15" fill="rgb(227,165,31)" fg:x="7062" fg:w="23"/><text x="5.0970%" y="367.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (22 samples, 0.02%)</title><rect x="4.8477%" y="341" width="0.0151%" height="15" fill="rgb(228,167,24)" fg:x="7063" fg:w="22"/><text x="5.0977%" y="351.50"></text></g><g><title>wgpu_core::device::queue::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::queue_write_staging_buffer_impl (74 samples, 0.05%)</title><rect x="4.8230%" y="437" width="0.0508%" height="15" fill="rgb(228,143,12)" fg:x="7027" fg:w="74"/><text x="5.0730%" y="447.50"></text></g><g><title>wgpu_hal::vulkan::command::&lt;impl wgpu_hal::CommandEncoder&lt;wgpu_hal::vulkan::Api&gt; for wgpu_hal::vulkan::CommandEncoder&gt;::transition_buffers (16 samples, 0.01%)</title><rect x="4.8628%" y="421" width="0.0110%" height="15" fill="rgb(249,149,8)" fg:x="7085" fg:w="16"/><text x="5.1128%" y="431.50"></text></g><g><title>ash::device::Device::cmd_pipeline_barrier (16 samples, 0.01%)</title><rect x="4.8628%" y="405" width="0.0110%" height="15" fill="rgb(243,35,44)" fg:x="7085" fg:w="16"/><text x="5.1128%" y="415.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (16 samples, 0.01%)</title><rect x="4.8628%" y="389" width="0.0110%" height="15" fill="rgb(246,89,9)" fg:x="7085" fg:w="16"/><text x="5.1128%" y="399.50"></text></g><g><title>ggez::graphics::instance::InstanceArray::flush_wgpu (4,225 samples, 2.90%)</title><rect x="1.9835%" y="517" width="2.8998%" height="15" fill="rgb(233,213,13)" fg:x="2890" fg:w="4225"/><text x="2.2335%" y="527.50">gg..</text></g><g><title>wgpu::Queue::write_buffer (4,071 samples, 2.79%)</title><rect x="2.0892%" y="501" width="2.7941%" height="15" fill="rgb(233,141,41)" fg:x="3044" fg:w="4071"/><text x="2.3392%" y="511.50">wg..</text></g><g><title>&lt;T as wgpu::context::DynContext&gt;::queue_write_buffer (4,071 samples, 2.79%)</title><rect x="2.0892%" y="485" width="2.7941%" height="15" fill="rgb(239,167,4)" fg:x="3044" fg:w="4071"/><text x="2.3392%" y="495.50">&lt;T..</text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::queue_write_buffer (4,071 samples, 2.79%)</title><rect x="2.0892%" y="469" width="2.7941%" height="15" fill="rgb(209,217,16)" fg:x="3044" fg:w="4071"/><text x="2.3392%" y="479.50">&lt;w..</text></g><g><title>wgpu_core::device::queue::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::queue_write_buffer (4,067 samples, 2.79%)</title><rect x="2.0920%" y="453" width="2.7914%" height="15" fill="rgb(219,88,35)" fg:x="3048" fg:w="4067"/><text x="2.3420%" y="463.50">wg..</text></g><g><title>&lt;ggez::graphics::instance::InstanceArray as ggez::graphics::draw::Drawable&gt;::draw (4,233 samples, 2.91%)</title><rect x="1.9794%" y="533" width="2.9053%" height="15" fill="rgb(220,193,23)" fg:x="2884" fg:w="4233"/><text x="2.2294%" y="543.50">&lt;g..</text></g><g><title>ggez::graphics::canvas::Canvas::draw (4,236 samples, 2.91%)</title><rect x="1.9794%" y="549" width="2.9074%" height="15" fill="rgb(230,90,52)" fg:x="2884" fg:w="4236"/><text x="2.2294%" y="559.50">gg..</text></g><g><title>ggez::graphics::internal_canvas::InternalCanvas::update_pipeline (36 samples, 0.02%)</title><rect x="4.9026%" y="501" width="0.0247%" height="15" fill="rgb(252,106,19)" fg:x="7143" fg:w="36"/><text x="5.1526%" y="511.50"></text></g><g><title>ggez::graphics::internal_canvas::InternalCanvas::draw_mesh_instances (66 samples, 0.05%)</title><rect x="4.8923%" y="517" width="0.0453%" height="15" fill="rgb(206,74,20)" fg:x="7128" fg:w="66"/><text x="5.1423%" y="527.50"></text></g><g><title>wgpu_core::command::render::RenderPassInfo&lt;A&gt;::start (16 samples, 0.01%)</title><rect x="4.9801%" y="389" width="0.0110%" height="15" fill="rgb(230,138,44)" fg:x="7256" fg:w="16"/><text x="5.2301%" y="399.50"></text></g><g><title>wgpu_core::track::Tracker&lt;A&gt;::set_size (15 samples, 0.01%)</title><rect x="4.9932%" y="389" width="0.0103%" height="15" fill="rgb(235,182,43)" fg:x="7275" fg:w="15"/><text x="5.2432%" y="399.50"></text></g><g><title>&lt;wgpu::RenderPass as core::ops::drop::Drop&gt;::drop (116 samples, 0.08%)</title><rect x="4.9383%" y="469" width="0.0796%" height="15" fill="rgb(242,16,51)" fg:x="7195" fg:w="116"/><text x="5.1883%" y="479.50"></text></g><g><title>&lt;T as wgpu::context::DynContext&gt;::command_encoder_end_render_pass (116 samples, 0.08%)</title><rect x="4.9383%" y="453" width="0.0796%" height="15" fill="rgb(248,9,4)" fg:x="7195" fg:w="116"/><text x="5.1883%" y="463.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::command_encoder_end_render_pass (116 samples, 0.08%)</title><rect x="4.9383%" y="437" width="0.0796%" height="15" fill="rgb(210,31,22)" fg:x="7195" fg:w="116"/><text x="5.1883%" y="447.50"></text></g><g><title>wgpu_core::command::render::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass (116 samples, 0.08%)</title><rect x="4.9383%" y="421" width="0.0796%" height="15" fill="rgb(239,54,39)" fg:x="7195" fg:w="116"/><text x="5.1883%" y="431.50"></text></g><g><title>wgpu_core::command::render::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass_impl (116 samples, 0.08%)</title><rect x="4.9383%" y="405" width="0.0796%" height="15" fill="rgb(230,99,41)" fg:x="7195" fg:w="116"/><text x="5.1883%" y="415.50"></text></g><g><title>ggez::graphics::internal_canvas::InternalCanvas::finish (119 samples, 0.08%)</title><rect x="4.9376%" y="517" width="0.0817%" height="15" fill="rgb(253,106,12)" fg:x="7194" fg:w="119"/><text x="5.1876%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;ggez::graphics::internal_canvas::InternalCanvas&gt; (119 samples, 0.08%)</title><rect x="4.9376%" y="501" width="0.0817%" height="15" fill="rgb(213,46,41)" fg:x="7194" fg:w="119"/><text x="5.1876%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;wgpu::RenderPass&gt; (119 samples, 0.08%)</title><rect x="4.9376%" y="485" width="0.0817%" height="15" fill="rgb(215,133,35)" fg:x="7194" fg:w="119"/><text x="5.1876%" y="495.50"></text></g><g><title>_XSend (49 samples, 0.03%)</title><rect x="5.0323%" y="357" width="0.0336%" height="15" fill="rgb(213,28,5)" fg:x="7332" fg:w="49"/><text x="5.2823%" y="367.50"></text></g><g><title>xcb_writev (48 samples, 0.03%)</title><rect x="5.0330%" y="341" width="0.0329%" height="15" fill="rgb(215,77,49)" fg:x="7333" fg:w="48"/><text x="5.2830%" y="351.50"></text></g><g><title>[libxcb.so.1.1.0] (48 samples, 0.03%)</title><rect x="5.0330%" y="325" width="0.0329%" height="15" fill="rgb(248,100,22)" fg:x="7333" fg:w="48"/><text x="5.2830%" y="335.50"></text></g><g><title>[libxcb.so.1.1.0] (47 samples, 0.03%)</title><rect x="5.0337%" y="309" width="0.0323%" height="15" fill="rgb(208,67,9)" fg:x="7334" fg:w="47"/><text x="5.2837%" y="319.50"></text></g><g><title>__GI___writev (35 samples, 0.02%)</title><rect x="5.0419%" y="293" width="0.0240%" height="15" fill="rgb(219,133,21)" fg:x="7346" fg:w="35"/><text x="5.2919%" y="303.50"></text></g><g><title>__GI___writev (35 samples, 0.02%)</title><rect x="5.0419%" y="277" width="0.0240%" height="15" fill="rgb(246,46,29)" fg:x="7346" fg:w="35"/><text x="5.2919%" y="287.50"></text></g><g><title>[unknown] (35 samples, 0.02%)</title><rect x="5.0419%" y="261" width="0.0240%" height="15" fill="rgb(246,185,52)" fg:x="7346" fg:w="35"/><text x="5.2919%" y="271.50"></text></g><g><title>[unknown] (34 samples, 0.02%)</title><rect x="5.0426%" y="245" width="0.0233%" height="15" fill="rgb(252,136,11)" fg:x="7347" fg:w="34"/><text x="5.2926%" y="255.50"></text></g><g><title>[unknown] (32 samples, 0.02%)</title><rect x="5.0440%" y="229" width="0.0220%" height="15" fill="rgb(219,138,53)" fg:x="7349" fg:w="32"/><text x="5.2940%" y="239.50"></text></g><g><title>[unknown] (31 samples, 0.02%)</title><rect x="5.0446%" y="213" width="0.0213%" height="15" fill="rgb(211,51,23)" fg:x="7350" fg:w="31"/><text x="5.2946%" y="223.50"></text></g><g><title>[unknown] (30 samples, 0.02%)</title><rect x="5.0453%" y="197" width="0.0206%" height="15" fill="rgb(247,221,28)" fg:x="7351" fg:w="30"/><text x="5.2953%" y="207.50"></text></g><g><title>[unknown] (30 samples, 0.02%)</title><rect x="5.0453%" y="181" width="0.0206%" height="15" fill="rgb(251,222,45)" fg:x="7351" fg:w="30"/><text x="5.2953%" y="191.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="5.0467%" y="165" width="0.0192%" height="15" fill="rgb(217,162,53)" fg:x="7353" fg:w="28"/><text x="5.2967%" y="175.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="5.0467%" y="149" width="0.0192%" height="15" fill="rgb(229,93,14)" fg:x="7353" fg:w="28"/><text x="5.2967%" y="159.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="5.0467%" y="133" width="0.0192%" height="15" fill="rgb(209,67,49)" fg:x="7353" fg:w="28"/><text x="5.2967%" y="143.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="5.0474%" y="117" width="0.0185%" height="15" fill="rgb(213,87,29)" fg:x="7354" fg:w="27"/><text x="5.2974%" y="127.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="5.0488%" y="101" width="0.0172%" height="15" fill="rgb(205,151,52)" fg:x="7356" fg:w="25"/><text x="5.2988%" y="111.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="5.0488%" y="85" width="0.0172%" height="15" fill="rgb(253,215,39)" fg:x="7356" fg:w="25"/><text x="5.2988%" y="95.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="5.0488%" y="69" width="0.0172%" height="15" fill="rgb(221,220,41)" fg:x="7356" fg:w="25"/><text x="5.2988%" y="79.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="5.0508%" y="53" width="0.0151%" height="15" fill="rgb(218,133,21)" fg:x="7359" fg:w="22"/><text x="5.3008%" y="63.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="5.0543%" y="37" width="0.0117%" height="15" fill="rgb(221,193,43)" fg:x="7364" fg:w="17"/><text x="5.3043%" y="47.50"></text></g><g><title>[libxcb.so.1.1.0] (18 samples, 0.01%)</title><rect x="5.0680%" y="309" width="0.0124%" height="15" fill="rgb(240,128,52)" fg:x="7384" fg:w="18"/><text x="5.3180%" y="319.50"></text></g><g><title>__libc_recvmsg (16 samples, 0.01%)</title><rect x="5.0694%" y="293" width="0.0110%" height="15" fill="rgb(253,114,12)" fg:x="7386" fg:w="16"/><text x="5.3194%" y="303.50"></text></g><g><title>__recvmsg_syscall (16 samples, 0.01%)</title><rect x="5.0694%" y="277" width="0.0110%" height="15" fill="rgb(215,223,47)" fg:x="7386" fg:w="16"/><text x="5.3194%" y="287.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="5.0694%" y="261" width="0.0110%" height="15" fill="rgb(248,225,23)" fg:x="7386" fg:w="16"/><text x="5.3194%" y="271.50"></text></g><g><title>ggez::graphics::context::GraphicsContext::drawable_size (113 samples, 0.08%)</title><rect x="5.0199%" y="485" width="0.0776%" height="15" fill="rgb(250,108,0)" fg:x="7314" fg:w="113"/><text x="5.2699%" y="495.50"></text></g><g><title>winit::window::Window::inner_size (113 samples, 0.08%)</title><rect x="5.0199%" y="469" width="0.0776%" height="15" fill="rgb(228,208,7)" fg:x="7314" fg:w="113"/><text x="5.2699%" y="479.50"></text></g><g><title>winit::platform_impl::platform::Window::inner_size (113 samples, 0.08%)</title><rect x="5.0199%" y="453" width="0.0776%" height="15" fill="rgb(244,45,10)" fg:x="7314" fg:w="113"/><text x="5.2699%" y="463.50"></text></g><g><title>winit::platform_impl::platform::x11::window::UnownedWindow::inner_size (113 samples, 0.08%)</title><rect x="5.0199%" y="437" width="0.0776%" height="15" fill="rgb(207,125,25)" fg:x="7314" fg:w="113"/><text x="5.2699%" y="447.50"></text></g><g><title>winit::platform_impl::platform::x11::window::UnownedWindow::inner_size_physical (112 samples, 0.08%)</title><rect x="5.0206%" y="421" width="0.0769%" height="15" fill="rgb(210,195,18)" fg:x="7315" fg:w="112"/><text x="5.2706%" y="431.50"></text></g><g><title>winit::platform_impl::platform::x11::util::geometry::&lt;impl winit::platform_impl::platform::x11::xdisplay::XConnection&gt;::get_geometry (112 samples, 0.08%)</title><rect x="5.0206%" y="405" width="0.0769%" height="15" fill="rgb(249,80,12)" fg:x="7315" fg:w="112"/><text x="5.2706%" y="415.50"></text></g><g><title>XGetGeometry (112 samples, 0.08%)</title><rect x="5.0206%" y="389" width="0.0769%" height="15" fill="rgb(221,65,9)" fg:x="7315" fg:w="112"/><text x="5.2706%" y="399.50"></text></g><g><title>_XReply (107 samples, 0.07%)</title><rect x="5.0241%" y="373" width="0.0734%" height="15" fill="rgb(235,49,36)" fg:x="7320" fg:w="107"/><text x="5.2741%" y="383.50"></text></g><g><title>xcb_wait_for_reply64 (44 samples, 0.03%)</title><rect x="5.0673%" y="357" width="0.0302%" height="15" fill="rgb(225,32,20)" fg:x="7383" fg:w="44"/><text x="5.3173%" y="367.50"></text></g><g><title>[libxcb.so.1.1.0] (44 samples, 0.03%)</title><rect x="5.0673%" y="341" width="0.0302%" height="15" fill="rgb(215,141,46)" fg:x="7383" fg:w="44"/><text x="5.3173%" y="351.50"></text></g><g><title>[libxcb.so.1.1.0] (44 samples, 0.03%)</title><rect x="5.0673%" y="325" width="0.0302%" height="15" fill="rgb(250,160,47)" fg:x="7383" fg:w="44"/><text x="5.3173%" y="335.50"></text></g><g><title>__GI___poll (25 samples, 0.02%)</title><rect x="5.0803%" y="309" width="0.0172%" height="15" fill="rgb(216,222,40)" fg:x="7402" fg:w="25"/><text x="5.3303%" y="319.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="5.0803%" y="293" width="0.0172%" height="15" fill="rgb(234,217,39)" fg:x="7402" fg:w="25"/><text x="5.3303%" y="303.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="5.0824%" y="277" width="0.0151%" height="15" fill="rgb(207,178,40)" fg:x="7405" fg:w="22"/><text x="5.3324%" y="287.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="5.0831%" y="261" width="0.0144%" height="15" fill="rgb(221,136,13)" fg:x="7406" fg:w="21"/><text x="5.3331%" y="271.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="5.0858%" y="245" width="0.0117%" height="15" fill="rgb(249,199,10)" fg:x="7410" fg:w="17"/><text x="5.3358%" y="255.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="5.0872%" y="229" width="0.0103%" height="15" fill="rgb(249,222,13)" fg:x="7412" fg:w="15"/><text x="5.3372%" y="239.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="5.0872%" y="213" width="0.0103%" height="15" fill="rgb(244,185,38)" fg:x="7412" fg:w="15"/><text x="5.3372%" y="223.50"></text></g><g><title>ggez::graphics::internal_canvas::InternalCanvas::from_image (138 samples, 0.09%)</title><rect x="5.0193%" y="517" width="0.0947%" height="15" fill="rgb(236,202,9)" fg:x="7313" fg:w="138"/><text x="5.2693%" y="527.50"></text></g><g><title>ggez::graphics::internal_canvas::InternalCanvas::new (138 samples, 0.09%)</title><rect x="5.0193%" y="501" width="0.0947%" height="15" fill="rgb(250,229,37)" fg:x="7313" fg:w="138"/><text x="5.2693%" y="511.50"></text></g><g><title>wgpu::Queue::write_buffer (20 samples, 0.01%)</title><rect x="5.1002%" y="485" width="0.0137%" height="15" fill="rgb(206,174,23)" fg:x="7431" fg:w="20"/><text x="5.3502%" y="495.50"></text></g><g><title>&lt;T as wgpu::context::DynContext&gt;::queue_write_buffer (20 samples, 0.01%)</title><rect x="5.1002%" y="469" width="0.0137%" height="15" fill="rgb(211,33,43)" fg:x="7431" fg:w="20"/><text x="5.3502%" y="479.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::queue_write_buffer (20 samples, 0.01%)</title><rect x="5.1002%" y="453" width="0.0137%" height="15" fill="rgb(245,58,50)" fg:x="7431" fg:w="20"/><text x="5.3502%" y="463.50"></text></g><g><title>wgpu_core::device::queue::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::queue_write_buffer (20 samples, 0.01%)</title><rect x="5.1002%" y="437" width="0.0137%" height="15" fill="rgb(244,68,36)" fg:x="7431" fg:w="20"/><text x="5.3502%" y="447.50"></text></g><g><title>ggez::graphics::canvas::Canvas::finish (341 samples, 0.23%)</title><rect x="4.8868%" y="549" width="0.2340%" height="15" fill="rgb(232,229,15)" fg:x="7120" fg:w="341"/><text x="5.1368%" y="559.50"></text></g><g><title>ggez::graphics::canvas::Canvas::finalize (341 samples, 0.23%)</title><rect x="4.8868%" y="533" width="0.2340%" height="15" fill="rgb(254,30,23)" fg:x="7120" fg:w="341"/><text x="5.1368%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (86 samples, 0.06%)</title><rect x="5.1249%" y="453" width="0.0590%" height="15" fill="rgb(235,160,14)" fg:x="7467" fg:w="86"/><text x="5.3749%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (81 samples, 0.06%)</title><rect x="5.1840%" y="437" width="0.0556%" height="15" fill="rgb(212,155,44)" fg:x="7553" fg:w="81"/><text x="5.4340%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (68 samples, 0.05%)</title><rect x="5.2396%" y="421" width="0.0467%" height="15" fill="rgb(226,2,50)" fg:x="7634" fg:w="68"/><text x="5.4896%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (72 samples, 0.05%)</title><rect x="5.7351%" y="405" width="0.0494%" height="15" fill="rgb(234,177,6)" fg:x="8356" fg:w="72"/><text x="5.9851%" y="415.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (16 samples, 0.01%)</title><rect x="7.7118%" y="389" width="0.0110%" height="15" fill="rgb(217,24,9)" fg:x="11236" fg:w="16"/><text x="7.9618%" y="399.50"></text></g><g><title>ggez::graphics::draw::DrawParam::dest (2,929 samples, 2.01%)</title><rect x="5.7852%" y="405" width="2.0103%" height="15" fill="rgb(220,13,46)" fg:x="8429" fg:w="2929"/><text x="6.0352%" y="415.50">g..</text></g><g><title>ggez::graphics::draw::DrawParam::get_dest_mut (100 samples, 0.07%)</title><rect x="7.7269%" y="389" width="0.0686%" height="15" fill="rgb(239,221,27)" fg:x="11258" fg:w="100"/><text x="7.9769%" y="399.50"></text></g><g><title>ggez::graphics::draw::DrawParam::new (223 samples, 0.15%)</title><rect x="7.7955%" y="405" width="0.1531%" height="15" fill="rgb(222,198,25)" fg:x="11358" fg:w="223"/><text x="8.0455%" y="415.50"></text></g><g><title>&lt;ggez::graphics::draw::DrawParam as core::default::Default&gt;::default (161 samples, 0.11%)</title><rect x="7.8381%" y="389" width="0.1105%" height="15" fill="rgb(211,99,13)" fg:x="11420" fg:w="161"/><text x="8.0881%" y="399.50"></text></g><g><title>ggez::graphics::draw::DrawParam::rotation (1,978 samples, 1.36%)</title><rect x="7.9486%" y="405" width="1.3576%" height="15" fill="rgb(232,111,31)" fg:x="11581" fg:w="1978"/><text x="8.1986%" y="415.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (78 samples, 0.05%)</title><rect x="9.5237%" y="389" width="0.0535%" height="15" fill="rgb(245,82,37)" fg:x="13876" fg:w="78"/><text x="9.7737%" y="399.50"></text></g><g><title>&lt;neuralang::MainState as ggez::event::EventHandler&gt;::draw::{{closure}} (6,253 samples, 4.29%)</title><rect x="5.2862%" y="421" width="4.2917%" height="15" fill="rgb(227,149,46)" fg:x="7702" fg:w="6253"/><text x="5.5362%" y="431.50">&lt;neur..</text></g><g><title>ggez::graphics::draw::DrawParam::scale (396 samples, 0.27%)</title><rect x="9.3062%" y="405" width="0.2718%" height="15" fill="rgb(218,36,50)" fg:x="13559" fg:w="396"/><text x="9.5562%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1,019 samples, 0.70%)</title><rect x="9.5780%" y="421" width="0.6994%" height="15" fill="rgb(226,80,48)" fg:x="13955" fg:w="1019"/><text x="9.8280%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (1,019 samples, 0.70%)</title><rect x="9.5780%" y="405" width="0.6994%" height="15" fill="rgb(238,224,15)" fg:x="13955" fg:w="1019"/><text x="9.8280%" y="415.50"></text></g><g><title>core::ptr::write (1,019 samples, 0.70%)</title><rect x="9.5780%" y="389" width="0.6994%" height="15" fill="rgb(241,136,10)" fg:x="13955" fg:w="1019"/><text x="9.8280%" y="399.50"></text></g><g><title>crevice::imp::imp_mint::&lt;impl crevice::std140::traits::AsStd140 for mint::matrix::ColumnMatrix4&lt;f32&gt;&gt;::as_std140 (301 samples, 0.21%)</title><rect x="10.7063%" y="389" width="0.2066%" height="15" fill="rgb(208,32,45)" fg:x="15599" fg:w="301"/><text x="10.9563%" y="399.50"></text></g><g><title>crevice::imp::imp_mint::&lt;impl crevice::std140::traits::AsStd140 for mint::vector::Vector4&lt;f32&gt;&gt;::as_std140 (301 samples, 0.21%)</title><rect x="10.7063%" y="373" width="0.2066%" height="15" fill="rgb(207,135,9)" fg:x="15599" fg:w="301"/><text x="10.9563%" y="383.50"></text></g><g><title>&lt;T as crevice::std140::traits::AsStd140&gt;::as_std140 (301 samples, 0.21%)</title><rect x="10.7063%" y="357" width="0.2066%" height="15" fill="rgb(206,86,44)" fg:x="15599" fg:w="301"/><text x="10.9563%" y="367.50"></text></g><g><title>&lt;ggez::graphics::draw::DrawUniforms as crevice::std140::traits::AsStd140&gt;::as_std140 (1,924 samples, 1.32%)</title><rect x="10.3638%" y="405" width="1.3205%" height="15" fill="rgb(245,177,15)" fg:x="15100" fg:w="1924"/><text x="10.6138%" y="415.50"></text></g><g><title>crevice::imp::imp_mint::&lt;impl crevice::std140::traits::AsStd140 for mint::vector::Vector4&lt;f32&gt;&gt;::as_std140 (1,124 samples, 0.77%)</title><rect x="10.9129%" y="389" width="0.7715%" height="15" fill="rgb(206,64,50)" fg:x="15900" fg:w="1124"/><text x="11.1629%" y="399.50"></text></g><g><title>&lt;T as crevice::std140::traits::AsStd140&gt;::as_std140 (1,124 samples, 0.77%)</title><rect x="10.9129%" y="373" width="0.7715%" height="15" fill="rgb(234,36,40)" fg:x="15900" fg:w="1124"/><text x="11.1629%" y="383.50"></text></g><g><title>ggez::graphics::draw::DrawUniforms::from_param (211 samples, 0.14%)</title><rect x="13.2547%" y="357" width="0.1448%" height="15" fill="rgb(213,64,8)" fg:x="19312" fg:w="211"/><text x="13.5047%" y="367.50"></text></g><g><title>asuint (198 samples, 0.14%)</title><rect x="14.7118%" y="325" width="0.1359%" height="15" fill="rgb(210,75,36)" fg:x="21435" fg:w="198"/><text x="14.9618%" y="335.50"></text></g><g><title>exp2_inline (3,277 samples, 2.25%)</title><rect x="14.8477%" y="325" width="2.2492%" height="15" fill="rgb(229,88,21)" fg:x="21633" fg:w="3277"/><text x="15.0977%" y="335.50">e..</text></g><g><title>asuint64 (110 samples, 0.08%)</title><rect x="17.0214%" y="309" width="0.0755%" height="15" fill="rgb(252,204,47)" fg:x="24800" fg:w="110"/><text x="17.2714%" y="319.50"></text></g><g><title>log2_inline (1,586 samples, 1.09%)</title><rect x="17.0969%" y="325" width="1.0885%" height="15" fill="rgb(208,77,27)" fg:x="24910" fg:w="1586"/><text x="17.3469%" y="335.50"></text></g><g><title>__powf_fma (7,038 samples, 4.83%)</title><rect x="13.4277%" y="341" width="4.8305%" height="15" fill="rgb(221,76,26)" fg:x="19564" fg:w="7038"/><text x="13.6777%" y="351.50">__powf..</text></g><g><title>zeroinfnan (106 samples, 0.07%)</title><rect x="18.1854%" y="325" width="0.0728%" height="15" fill="rgb(225,139,18)" fg:x="26496" fg:w="106"/><text x="18.4354%" y="335.50"></text></g><g><title>&lt;ggez::graphics::types::LinearColor as core::convert::From&lt;ggez::graphics::types::Color&gt;&gt;::from::f (7,757 samples, 5.32%)</title><rect x="12.9349%" y="373" width="5.3240%" height="15" fill="rgb(230,137,11)" fg:x="18846" fg:w="7757"/><text x="13.1849%" y="383.50">&lt;ggez::..</text></g><g><title>std::f32::&lt;impl f32&gt;::powf (7,080 samples, 4.86%)</title><rect x="13.3995%" y="357" width="4.8593%" height="15" fill="rgb(212,28,1)" fg:x="19523" fg:w="7080"/><text x="13.6495%" y="367.50">std::f..</text></g><g><title>&lt;ggez::graphics::types::LinearColor as core::convert::From&lt;ggez::graphics::types::Color&gt;&gt;::from (7,806 samples, 5.36%)</title><rect x="12.9349%" y="389" width="5.3576%" height="15" fill="rgb(248,164,17)" fg:x="18846" fg:w="7806"/><text x="13.1849%" y="399.50">&lt;ggez::..</text></g><g><title>ggez::graphics::draw::DrawUniforms::from_param (49 samples, 0.03%)</title><rect x="18.2589%" y="373" width="0.0336%" height="15" fill="rgb(222,171,42)" fg:x="26603" fg:w="49"/><text x="18.5089%" y="383.50"></text></g><g><title>ggez::graphics::draw::DrawUniforms::from_param (142 samples, 0.10%)</title><rect x="18.2946%" y="389" width="0.0975%" height="15" fill="rgb(243,84,45)" fg:x="26655" fg:w="142"/><text x="18.5446%" y="399.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (237 samples, 0.16%)</title><rect x="19.9130%" y="373" width="0.1627%" height="15" fill="rgb(252,49,23)" fg:x="29013" fg:w="237"/><text x="20.1630%" y="383.50"></text></g><g><title>glam::features::impl_mint::&lt;impl core::convert::From&lt;glam::f32::sse2::mat4::Mat4&gt; for mint::matrix::ColumnMatrix4&lt;f32&gt;&gt;::from (169 samples, 0.12%)</title><rect x="19.9596%" y="357" width="0.1160%" height="15" fill="rgb(215,19,7)" fg:x="29081" fg:w="169"/><text x="20.2096%" y="367.50"></text></g><g><title>glam::f32::sse2::mat4::Mat4::transpose (238 samples, 0.16%)</title><rect x="20.0825%" y="373" width="0.1634%" height="15" fill="rgb(238,81,41)" fg:x="29260" fg:w="238"/><text x="20.3325%" y="383.50"></text></g><g><title>core::core_arch::x86::sse::_mm_shuffle_ps (146 samples, 0.10%)</title><rect x="20.1456%" y="357" width="0.1002%" height="15" fill="rgb(210,199,37)" fg:x="29352" fg:w="146"/><text x="20.3956%" y="367.50"></text></g><g><title>abstop12 (76 samples, 0.05%)</title><rect x="20.5005%" y="325" width="0.0522%" height="15" fill="rgb(244,192,49)" fg:x="29869" fg:w="76"/><text x="20.7505%" y="335.50"></text></g><g><title>reduce_fast (18 samples, 0.01%)</title><rect x="20.5526%" y="325" width="0.0124%" height="15" fill="rgb(226,211,11)" fg:x="29945" fg:w="18"/><text x="20.8026%" y="335.50"></text></g><g><title>reduce_large (605 samples, 0.42%)</title><rect x="20.5650%" y="325" width="0.4152%" height="15" fill="rgb(236,162,54)" fg:x="29963" fg:w="605"/><text x="20.8150%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (23,586 samples, 16.19%)</title><rect x="5.2396%" y="437" width="16.1882%" height="15" fill="rgb(220,229,9)" fg:x="7634" fg:w="23586"/><text x="5.4896%" y="447.50">core::iter::adapters::map..</text></g><g><title>ggez::graphics::instance::InstanceArray::set::{{closure}} (16,246 samples, 11.15%)</title><rect x="10.2774%" y="421" width="11.1504%" height="15" fill="rgb(250,87,22)" fg:x="14974" fg:w="16246"/><text x="10.5274%" y="431.50">ggez::graphics::..</text></g><g><title>ggez::graphics::draw::DrawUniforms::from_param (14,195 samples, 9.74%)</title><rect x="11.6850%" y="405" width="9.7427%" height="15" fill="rgb(239,43,17)" fg:x="17025" fg:w="14195"/><text x="11.9350%" y="415.50">ggez::graphics..</text></g><g><title>ggez::graphics::draw::Transform::to_bare_matrix (4,423 samples, 3.04%)</title><rect x="18.3920%" y="389" width="3.0357%" height="15" fill="rgb(231,177,25)" fg:x="26797" fg:w="4423"/><text x="18.6420%" y="399.50">gge..</text></g><g><title>std::f32::&lt;impl f32&gt;::sin_cos (1,722 samples, 1.18%)</title><rect x="20.2458%" y="373" width="1.1819%" height="15" fill="rgb(219,179,1)" fg:x="29498" fg:w="1722"/><text x="20.4958%" y="383.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sin (1,722 samples, 1.18%)</title><rect x="20.2458%" y="357" width="1.1819%" height="15" fill="rgb(238,219,53)" fg:x="29498" fg:w="1722"/><text x="20.4958%" y="367.50"></text></g><g><title>__sincosf_fma (1,722 samples, 1.18%)</title><rect x="20.2458%" y="341" width="1.1819%" height="15" fill="rgb(232,167,36)" fg:x="29498" fg:w="1722"/><text x="20.4958%" y="351.50"></text></g><g><title>sincosf_poly (652 samples, 0.45%)</title><rect x="20.9802%" y="325" width="0.4475%" height="15" fill="rgb(244,19,51)" fg:x="30568" fg:w="652"/><text x="21.2302%" y="335.50"></text></g><g><title>v2df_to_sf (161 samples, 0.11%)</title><rect x="21.3172%" y="309" width="0.1105%" height="15" fill="rgb(224,6,22)" fg:x="31059" fg:w="161"/><text x="21.5672%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (23,669 samples, 16.25%)</title><rect x="5.1840%" y="453" width="16.2451%" height="15" fill="rgb(224,145,5)" fg:x="7553" fg:w="23669"/><text x="5.4340%" y="463.50">core::iter::traits::itera..</text></g><g><title>&lt;neuralang::MainState as ggez::event::EventHandler&gt;::draw (28,340 samples, 19.45%)</title><rect x="1.9787%" y="565" width="19.4511%" height="15" fill="rgb(234,130,49)" fg:x="2883" fg:w="28340"/><text x="2.2287%" y="575.50">&lt;neuralang::MainState as ggez:..</text></g><g><title>ggez::graphics::instance::InstanceArray::set (23,756 samples, 16.30%)</title><rect x="5.1249%" y="549" width="16.3048%" height="15" fill="rgb(254,6,2)" fg:x="7467" fg:w="23756"/><text x="5.3749%" y="559.50">ggez::graphics::instance:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (23,756 samples, 16.30%)</title><rect x="5.1249%" y="533" width="16.3048%" height="15" fill="rgb(208,96,46)" fg:x="7467" fg:w="23756"/><text x="5.3749%" y="543.50">&lt;alloc::vec::Vec&lt;T,A&gt; as ..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (23,756 samples, 16.30%)</title><rect x="5.1249%" y="517" width="16.3048%" height="15" fill="rgb(239,3,39)" fg:x="7467" fg:w="23756"/><text x="5.3749%" y="527.50">&lt;alloc::vec::Vec&lt;T,A&gt; as ..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (23,756 samples, 16.30%)</title><rect x="5.1249%" y="501" width="16.3048%" height="15" fill="rgb(233,210,1)" fg:x="7467" fg:w="23756"/><text x="5.3749%" y="511.50">alloc::vec::Vec&lt;T,A&gt;::ext..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (23,756 samples, 16.30%)</title><rect x="5.1249%" y="485" width="16.3048%" height="15" fill="rgb(244,137,37)" fg:x="7467" fg:w="23756"/><text x="5.3749%" y="495.50">core::iter::traits::itera..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23,756 samples, 16.30%)</title><rect x="5.1249%" y="469" width="16.3048%" height="15" fill="rgb(240,136,2)" fg:x="7467" fg:w="23756"/><text x="5.3749%" y="479.50">&lt;core::iter::adapters::ma..</text></g><g><title>&lt;neuralang::MainState as ggez::event::EventHandler&gt;::update (3,334 samples, 2.29%)</title><rect x="21.4325%" y="533" width="2.2883%" height="15" fill="rgb(239,18,37)" fg:x="31227" fg:w="3334"/><text x="21.6825%" y="543.50">&lt;..</text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1,930 samples, 1.32%)</title><rect x="41.0305%" y="517" width="1.3246%" height="15" fill="rgb(218,185,22)" fg:x="59781" fg:w="1930"/><text x="41.2805%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1,930 samples, 1.32%)</title><rect x="41.0305%" y="501" width="1.3246%" height="15" fill="rgb(225,218,4)" fg:x="59781" fg:w="1930"/><text x="41.2805%" y="511.50"></text></g><g><title>&lt;neuralang::MainState as ggez::event::EventHandler&gt;::update (427 samples, 0.29%)</title><rect x="42.3551%" y="485" width="0.2931%" height="15" fill="rgb(230,182,32)" fg:x="61711" fg:w="427"/><text x="42.6051%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,439 samples, 0.99%)</title><rect x="42.3551%" y="517" width="0.9877%" height="15" fill="rgb(242,56,43)" fg:x="61711" fg:w="1439"/><text x="42.6051%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,439 samples, 0.99%)</title><rect x="42.3551%" y="501" width="0.9877%" height="15" fill="rgb(233,99,24)" fg:x="61711" fg:w="1439"/><text x="42.6051%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,012 samples, 0.69%)</title><rect x="42.6482%" y="485" width="0.6946%" height="15" fill="rgb(234,209,42)" fg:x="62138" fg:w="1012"/><text x="42.8982%" y="495.50"></text></g><g><title>&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::next (826 samples, 0.57%)</title><rect x="43.3428%" y="501" width="0.5669%" height="15" fill="rgb(227,7,12)" fg:x="63150" fg:w="826"/><text x="43.5928%" y="511.50"></text></g><g><title>core::ops::index_range::IndexRange::next_unchecked (742 samples, 0.51%)</title><rect x="43.4004%" y="485" width="0.5093%" height="15" fill="rgb(245,203,43)" fg:x="63234" fg:w="742"/><text x="43.6504%" y="495.50"></text></g><g><title>&lt;neuralang::MainState as ggez::event::EventHandler&gt;::update (17 samples, 0.01%)</title><rect x="43.9097%" y="437" width="0.0117%" height="15" fill="rgb(238,205,33)" fg:x="63976" fg:w="17"/><text x="44.1597%" y="447.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (851 samples, 0.58%)</title><rect x="43.3428%" y="517" width="0.5841%" height="15" fill="rgb(231,56,7)" fg:x="63150" fg:w="851"/><text x="43.5928%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (25 samples, 0.02%)</title><rect x="43.9097%" y="501" width="0.0172%" height="15" fill="rgb(244,186,29)" fg:x="63976" fg:w="25"/><text x="44.1597%" y="511.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (25 samples, 0.02%)</title><rect x="43.9097%" y="485" width="0.0172%" height="15" fill="rgb(234,111,31)" fg:x="63976" fg:w="25"/><text x="44.1597%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (25 samples, 0.02%)</title><rect x="43.9097%" y="469" width="0.0172%" height="15" fill="rgb(241,149,10)" fg:x="63976" fg:w="25"/><text x="44.1597%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (25 samples, 0.02%)</title><rect x="43.9097%" y="453" width="0.0172%" height="15" fill="rgb(249,206,44)" fg:x="63976" fg:w="25"/><text x="44.1597%" y="463.50"></text></g><g><title>&lt;neuralang::MainState as ggez::event::EventHandler&gt;::update (70 samples, 0.05%)</title><rect x="46.4904%" y="469" width="0.0480%" height="15" fill="rgb(251,153,30)" fg:x="67736" fg:w="70"/><text x="46.7404%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,896 samples, 2.67%)</title><rect x="43.9269%" y="517" width="2.6740%" height="15" fill="rgb(239,152,38)" fg:x="64001" fg:w="3896"/><text x="44.1769%" y="527.50">&lt;c..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (161 samples, 0.11%)</title><rect x="46.4904%" y="501" width="0.1105%" height="15" fill="rgb(249,139,47)" fg:x="67736" fg:w="161"/><text x="46.7404%" y="511.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (161 samples, 0.11%)</title><rect x="46.4904%" y="485" width="0.1105%" height="15" fill="rgb(244,64,35)" fg:x="67736" fg:w="161"/><text x="46.7404%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (91 samples, 0.06%)</title><rect x="46.5384%" y="469" width="0.0625%" height="15" fill="rgb(216,46,15)" fg:x="67806" fg:w="91"/><text x="46.7884%" y="479.50"></text></g><g><title>&lt;neuralang::MainState as ggez::event::EventHandler&gt;::update (974 samples, 0.67%)</title><rect x="46.6009%" y="517" width="0.6685%" height="15" fill="rgb(250,74,19)" fg:x="67897" fg:w="974"/><text x="46.8509%" y="527.50"></text></g><g><title>[unknown] (66 samples, 0.05%)</title><rect x="47.2694%" y="517" width="0.0453%" height="15" fill="rgb(249,42,33)" fg:x="68871" fg:w="66"/><text x="47.5194%" y="527.50"></text></g><g><title>[unknown] (58 samples, 0.04%)</title><rect x="47.2749%" y="501" width="0.0398%" height="15" fill="rgb(242,149,17)" fg:x="68879" fg:w="58"/><text x="47.5249%" y="511.50"></text></g><g><title>[unknown] (58 samples, 0.04%)</title><rect x="47.2749%" y="485" width="0.0398%" height="15" fill="rgb(244,29,21)" fg:x="68879" fg:w="58"/><text x="47.5249%" y="495.50"></text></g><g><title>[unknown] (57 samples, 0.04%)</title><rect x="47.2755%" y="469" width="0.0391%" height="15" fill="rgb(220,130,37)" fg:x="68880" fg:w="57"/><text x="47.5255%" y="479.50"></text></g><g><title>[unknown] (52 samples, 0.04%)</title><rect x="47.2790%" y="453" width="0.0357%" height="15" fill="rgb(211,67,2)" fg:x="68885" fg:w="52"/><text x="47.5290%" y="463.50"></text></g><g><title>[unknown] (49 samples, 0.03%)</title><rect x="47.2810%" y="437" width="0.0336%" height="15" fill="rgb(235,68,52)" fg:x="68888" fg:w="49"/><text x="47.5310%" y="447.50"></text></g><g><title>[unknown] (48 samples, 0.03%)</title><rect x="47.2817%" y="421" width="0.0329%" height="15" fill="rgb(246,142,3)" fg:x="68889" fg:w="48"/><text x="47.5317%" y="431.50"></text></g><g><title>[unknown] (39 samples, 0.03%)</title><rect x="47.2879%" y="405" width="0.0268%" height="15" fill="rgb(241,25,7)" fg:x="68898" fg:w="39"/><text x="47.5379%" y="415.50"></text></g><g><title>[unknown] (37 samples, 0.03%)</title><rect x="47.2893%" y="389" width="0.0254%" height="15" fill="rgb(242,119,39)" fg:x="68900" fg:w="37"/><text x="47.5393%" y="399.50"></text></g><g><title>[unknown] (32 samples, 0.02%)</title><rect x="47.2927%" y="373" width="0.0220%" height="15" fill="rgb(241,98,45)" fg:x="68905" fg:w="32"/><text x="47.5427%" y="383.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="47.2968%" y="357" width="0.0178%" height="15" fill="rgb(254,28,30)" fg:x="68911" fg:w="26"/><text x="47.5468%" y="367.50"></text></g><g><title>[unknown] (19 samples, 0.01%)</title><rect x="47.3016%" y="341" width="0.0130%" height="15" fill="rgb(241,142,54)" fg:x="68918" fg:w="19"/><text x="47.5516%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (40 samples, 0.03%)</title><rect x="47.3147%" y="517" width="0.0275%" height="15" fill="rgb(222,85,15)" fg:x="68937" fg:w="40"/><text x="47.5647%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (40 samples, 0.03%)</title><rect x="47.3147%" y="501" width="0.0275%" height="15" fill="rgb(210,85,47)" fg:x="68937" fg:w="40"/><text x="47.5647%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (37 samples, 0.03%)</title><rect x="47.3167%" y="485" width="0.0254%" height="15" fill="rgb(224,206,25)" fg:x="68940" fg:w="37"/><text x="47.5667%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::as_ref (2,032 samples, 1.39%)</title><rect x="47.3428%" y="517" width="1.3947%" height="15" fill="rgb(243,201,19)" fg:x="68978" fg:w="2032"/><text x="47.5928%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (155 samples, 0.11%)</title><rect x="48.7375%" y="517" width="0.1064%" height="15" fill="rgb(236,59,4)" fg:x="71010" fg:w="155"/><text x="48.9875%" y="527.50"></text></g><g><title>neuralang::add_2d (2,173 samples, 1.49%)</title><rect x="48.8438%" y="517" width="1.4914%" height="15" fill="rgb(254,179,45)" fg:x="71165" fg:w="2173"/><text x="49.0938%" y="527.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="60.4925%" y="501" width="0.0124%" height="15" fill="rgb(226,14,10)" fg:x="88137" fg:w="18"/><text x="60.7425%" y="511.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="60.4925%" y="485" width="0.0124%" height="15" fill="rgb(244,27,41)" fg:x="88137" fg:w="18"/><text x="60.7425%" y="495.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="60.4925%" y="469" width="0.0124%" height="15" fill="rgb(235,35,32)" fg:x="88137" fg:w="18"/><text x="60.7425%" y="479.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="60.4925%" y="453" width="0.0124%" height="15" fill="rgb(218,68,31)" fg:x="88137" fg:w="18"/><text x="60.7425%" y="463.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="60.4925%" y="437" width="0.0124%" height="15" fill="rgb(207,120,37)" fg:x="88137" fg:w="18"/><text x="60.7425%" y="447.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="60.4925%" y="421" width="0.0124%" height="15" fill="rgb(227,98,0)" fg:x="88137" fg:w="18"/><text x="60.7425%" y="431.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="60.4925%" y="405" width="0.0124%" height="15" fill="rgb(207,7,3)" fg:x="88137" fg:w="18"/><text x="60.7425%" y="415.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="60.4932%" y="389" width="0.0117%" height="15" fill="rgb(206,98,19)" fg:x="88138" fg:w="17"/><text x="60.7432%" y="399.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="60.4939%" y="373" width="0.0110%" height="15" fill="rgb(217,5,26)" fg:x="88139" fg:w="16"/><text x="60.7439%" y="383.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="60.4946%" y="357" width="0.0103%" height="15" fill="rgb(235,190,38)" fg:x="88140" fg:w="15"/><text x="60.7446%" y="367.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="63.5536%" y="485" width="0.0199%" height="15" fill="rgb(247,86,24)" fg:x="92597" fg:w="29"/><text x="63.8036%" y="495.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="63.5557%" y="469" width="0.0178%" height="15" fill="rgb(205,101,16)" fg:x="92600" fg:w="26"/><text x="63.8057%" y="479.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="63.5557%" y="453" width="0.0178%" height="15" fill="rgb(246,168,33)" fg:x="92600" fg:w="26"/><text x="63.8057%" y="463.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="63.5571%" y="437" width="0.0165%" height="15" fill="rgb(231,114,1)" fg:x="92602" fg:w="24"/><text x="63.8071%" y="447.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="63.5577%" y="421" width="0.0158%" height="15" fill="rgb(207,184,53)" fg:x="92603" fg:w="23"/><text x="63.8077%" y="431.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="63.5577%" y="405" width="0.0158%" height="15" fill="rgb(224,95,51)" fg:x="92603" fg:w="23"/><text x="63.8077%" y="415.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="63.5584%" y="389" width="0.0151%" height="15" fill="rgb(212,188,45)" fg:x="92604" fg:w="22"/><text x="63.8084%" y="399.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="63.5591%" y="373" width="0.0144%" height="15" fill="rgb(223,154,38)" fg:x="92605" fg:w="21"/><text x="63.8091%" y="383.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="63.5598%" y="357" width="0.0137%" height="15" fill="rgb(251,22,52)" fg:x="92606" fg:w="20"/><text x="63.8098%" y="367.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="63.5626%" y="341" width="0.0110%" height="15" fill="rgb(229,209,22)" fg:x="92610" fg:w="16"/><text x="63.8126%" y="351.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::powi (1,063 samples, 0.73%)</title><rect x="63.5735%" y="485" width="0.7296%" height="15" fill="rgb(234,138,34)" fg:x="92626" fg:w="1063"/><text x="63.8235%" y="495.50"></text></g><g><title>neuralang::balls_collide (25,799 samples, 17.71%)</title><rect x="50.3353%" y="517" width="17.7071%" height="15" fill="rgb(212,95,11)" fg:x="73338" fg:w="25799"/><text x="50.5853%" y="527.50">neuralang::balls_collide</text></g><g><title>neuralang::dist_2d (10,982 samples, 7.54%)</title><rect x="60.5049%" y="501" width="7.5375%" height="15" fill="rgb(240,179,47)" fg:x="88155" fg:w="10982"/><text x="60.7549%" y="511.50">neuralang:..</text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (5,448 samples, 3.74%)</title><rect x="64.3031%" y="485" width="3.7392%" height="15" fill="rgb(240,163,11)" fg:x="93689" fg:w="5448"/><text x="64.5531%" y="495.50">std:..</text></g><g><title>neuralang::oob (282 samples, 0.19%)</title><rect x="68.0547%" y="517" width="0.1935%" height="15" fill="rgb(236,37,12)" fg:x="99155" fg:w="282"/><text x="68.3047%" y="527.50"></text></g><g><title>neuralang::scale_2d (132 samples, 0.09%)</title><rect x="68.2482%" y="517" width="0.0906%" height="15" fill="rgb(232,164,16)" fg:x="99437" fg:w="132"/><text x="68.4982%" y="527.50"></text></g><g><title>neuralang::two_to_one (183 samples, 0.13%)</title><rect x="68.3388%" y="517" width="0.1256%" height="15" fill="rgb(244,205,15)" fg:x="99569" fg:w="183"/><text x="68.5888%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;V&gt; as splitmut::SplitMut&lt;usize,V&gt;&gt;::get1_mut (2,116 samples, 1.45%)</title><rect x="69.9147%" y="501" width="1.4523%" height="15" fill="rgb(223,117,47)" fg:x="101865" fg:w="2116"/><text x="70.1647%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (2,116 samples, 1.45%)</title><rect x="69.9147%" y="485" width="1.4523%" height="15" fill="rgb(244,107,35)" fg:x="101865" fg:w="2116"/><text x="70.1647%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (2,116 samples, 1.45%)</title><rect x="69.9147%" y="469" width="1.4523%" height="15" fill="rgb(205,140,8)" fg:x="101865" fg:w="2116"/><text x="70.1647%" y="479.50"></text></g><g><title>splitmut::check_r (246 samples, 0.17%)</title><rect x="71.3697%" y="501" width="0.1688%" height="15" fill="rgb(228,84,46)" fg:x="103985" fg:w="246"/><text x="71.6197%" y="511.50"></text></g><g><title>splitmut::from_r (330 samples, 0.23%)</title><rect x="71.5386%" y="501" width="0.2265%" height="15" fill="rgb(254,188,9)" fg:x="104231" fg:w="330"/><text x="71.7886%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (330 samples, 0.23%)</title><rect x="71.5386%" y="485" width="0.2265%" height="15" fill="rgb(206,112,54)" fg:x="104231" fg:w="330"/><text x="71.7886%" y="495.50"></text></g><g><title>neuralang::World::check_collisions (70,496 samples, 48.38%)</title><rect x="23.7311%" y="533" width="48.3847%" height="15" fill="rgb(216,84,49)" fg:x="34576" fg:w="70496"/><text x="23.9811%" y="543.50">neuralang::World::check_collisions</text></g><g><title>splitmut::SplitMut::get2_mut (5,320 samples, 3.65%)</title><rect x="68.4644%" y="517" width="3.6514%" height="15" fill="rgb(214,194,35)" fg:x="99752" fg:w="5320"/><text x="68.7144%" y="527.50">spli..</text></g><g><title>splitmut::to_r (511 samples, 0.35%)</title><rect x="71.7651%" y="501" width="0.3507%" height="15" fill="rgb(249,28,3)" fg:x="104561" fg:w="511"/><text x="72.0151%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (511 samples, 0.35%)</title><rect x="71.7651%" y="485" width="0.3507%" height="15" fill="rgb(222,56,52)" fg:x="104561" fg:w="511"/><text x="72.0151%" y="495.50"></text></g><g><title>&lt;neuralang::MainState as ggez::event::EventHandler&gt;::update (931 samples, 0.64%)</title><rect x="72.4926%" y="485" width="0.6390%" height="15" fill="rgb(245,217,50)" fg:x="105621" fg:w="931"/><text x="72.7426%" y="495.50"></text></g><g><title>neuralang::add_2d (260 samples, 0.18%)</title><rect x="73.1316%" y="485" width="0.1785%" height="15" fill="rgb(213,201,24)" fg:x="106552" fg:w="260"/><text x="73.3816%" y="495.50"></text></g><g><title>abstop12 (142 samples, 0.10%)</title><rect x="73.5338%" y="437" width="0.0975%" height="15" fill="rgb(248,116,28)" fg:x="107138" fg:w="142"/><text x="73.7838%" y="447.50"></text></g><g><title>reduce_fast (63 samples, 0.04%)</title><rect x="73.6313%" y="437" width="0.0432%" height="15" fill="rgb(219,72,43)" fg:x="107280" fg:w="63"/><text x="73.8813%" y="447.50"></text></g><g><title>reduce_large (681 samples, 0.47%)</title><rect x="73.6745%" y="437" width="0.4674%" height="15" fill="rgb(209,138,14)" fg:x="107343" fg:w="681"/><text x="73.9245%" y="447.50"></text></g><g><title>neuralang::dir_from_theta (2,083 samples, 1.43%)</title><rect x="73.3100%" y="485" width="1.4297%" height="15" fill="rgb(222,18,33)" fg:x="106812" fg:w="2083"/><text x="73.5600%" y="495.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::cos (2,083 samples, 1.43%)</title><rect x="73.3100%" y="469" width="1.4297%" height="15" fill="rgb(213,199,7)" fg:x="106812" fg:w="2083"/><text x="73.5600%" y="479.50"></text></g><g><title>__sincosf_fma (2,082 samples, 1.43%)</title><rect x="73.3107%" y="453" width="1.4290%" height="15" fill="rgb(250,110,10)" fg:x="106813" fg:w="2082"/><text x="73.5607%" y="463.50"></text></g><g><title>sincosf_poly (871 samples, 0.60%)</title><rect x="74.1419%" y="437" width="0.5978%" height="15" fill="rgb(248,123,6)" fg:x="108024" fg:w="871"/><text x="74.3919%" y="447.50"></text></g><g><title>v2df_to_sf (338 samples, 0.23%)</title><rect x="74.5077%" y="421" width="0.2320%" height="15" fill="rgb(206,91,31)" fg:x="108557" fg:w="338"/><text x="74.7577%" y="431.50"></text></g><g><title>neuralang::oob (204 samples, 0.14%)</title><rect x="74.7397%" y="485" width="0.1400%" height="15" fill="rgb(211,154,13)" fg:x="108895" fg:w="204"/><text x="74.9897%" y="495.50"></text></g><g><title>neuralang::scale_2d (606 samples, 0.42%)</title><rect x="74.8797%" y="485" width="0.4159%" height="15" fill="rgb(225,148,7)" fg:x="109099" fg:w="606"/><text x="75.1297%" y="495.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (4,647 samples, 3.19%)</title><rect x="72.1158%" y="517" width="3.1895%" height="15" fill="rgb(220,160,43)" fg:x="105072" fg:w="4647"/><text x="72.3658%" y="527.50">&lt;co..</text></g><g><title>neuralang::World::move_balls::{{closure}} (4,647 samples, 3.19%)</title><rect x="72.1158%" y="501" width="3.1895%" height="15" fill="rgb(213,52,39)" fg:x="105072" fg:w="4647"/><text x="72.3658%" y="511.50">neu..</text></g><g><title>neuralang::World::move_balls (4,648 samples, 3.19%)</title><rect x="72.1158%" y="533" width="3.1901%" height="15" fill="rgb(243,137,7)" fg:x="105072" fg:w="4648"/><text x="72.3658%" y="543.50">neu..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (111 samples, 0.08%)</title><rect x="76.0849%" y="517" width="0.0762%" height="15" fill="rgb(230,79,13)" fg:x="110855" fg:w="111"/><text x="76.3349%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (111 samples, 0.08%)</title><rect x="76.0849%" y="501" width="0.0762%" height="15" fill="rgb(247,105,23)" fg:x="110855" fg:w="111"/><text x="76.3349%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (111 samples, 0.08%)</title><rect x="76.0849%" y="485" width="0.0762%" height="15" fill="rgb(223,179,41)" fg:x="110855" fg:w="111"/><text x="76.3349%" y="495.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (110 samples, 0.08%)</title><rect x="76.1611%" y="517" width="0.0755%" height="15" fill="rgb(218,9,34)" fg:x="110966" fg:w="110"/><text x="76.4111%" y="527.50"></text></g><g><title>&lt;neuralang::MainState as ggez::event::EventHandler&gt;::update (1,503 samples, 1.03%)</title><rect x="76.2366%" y="517" width="1.0316%" height="15" fill="rgb(222,106,8)" fg:x="111076" fg:w="1503"/><text x="76.4866%" y="527.50"></text></g><g><title>__GI___libc_realloc (16 samples, 0.01%)</title><rect x="77.5668%" y="405" width="0.0110%" height="15" fill="rgb(211,220,0)" fg:x="113014" fg:w="16"/><text x="77.8168%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (17 samples, 0.01%)</title><rect x="77.5668%" y="453" width="0.0117%" height="15" fill="rgb(229,52,16)" fg:x="113014" fg:w="17"/><text x="77.8168%" y="463.50"></text></g><g><title>alloc::alloc::Global::grow_impl (17 samples, 0.01%)</title><rect x="77.5668%" y="437" width="0.0117%" height="15" fill="rgb(212,155,18)" fg:x="113014" fg:w="17"/><text x="77.8168%" y="447.50"></text></g><g><title>alloc::alloc::realloc (17 samples, 0.01%)</title><rect x="77.5668%" y="421" width="0.0117%" height="15" fill="rgb(242,21,14)" fg:x="113014" fg:w="17"/><text x="77.8168%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (19 samples, 0.01%)</title><rect x="77.5668%" y="469" width="0.0130%" height="15" fill="rgb(222,19,48)" fg:x="113014" fg:w="19"/><text x="77.8168%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (20 samples, 0.01%)</title><rect x="77.5668%" y="501" width="0.0137%" height="15" fill="rgb(232,45,27)" fg:x="113014" fg:w="20"/><text x="77.8168%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (20 samples, 0.01%)</title><rect x="77.5668%" y="485" width="0.0137%" height="15" fill="rgb(249,103,42)" fg:x="113014" fg:w="20"/><text x="77.8168%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (30 samples, 0.02%)</title><rect x="77.5805%" y="501" width="0.0206%" height="15" fill="rgb(246,81,33)" fg:x="113034" fg:w="30"/><text x="77.8305%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (30 samples, 0.02%)</title><rect x="77.5805%" y="485" width="0.0206%" height="15" fill="rgb(252,33,42)" fg:x="113034" fg:w="30"/><text x="77.8305%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (684 samples, 0.47%)</title><rect x="77.2709%" y="517" width="0.4695%" height="15" fill="rgb(209,212,41)" fg:x="112583" fg:w="684"/><text x="77.5209%" y="527.50"></text></g><g><title>core::ptr::write (203 samples, 0.14%)</title><rect x="77.6011%" y="501" width="0.1393%" height="15" fill="rgb(207,154,6)" fg:x="113064" fg:w="203"/><text x="77.8511%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (21 samples, 0.01%)</title><rect x="77.7404%" y="501" width="0.0144%" height="15" fill="rgb(223,64,47)" fg:x="113267" fg:w="21"/><text x="77.9904%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3,421 samples, 2.35%)</title><rect x="77.7548%" y="485" width="2.3480%" height="15" fill="rgb(211,161,38)" fg:x="113288" fg:w="3421"/><text x="78.0048%" y="495.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (419 samples, 0.29%)</title><rect x="80.1028%" y="485" width="0.2876%" height="15" fill="rgb(219,138,40)" fg:x="116709" fg:w="419"/><text x="80.3528%" y="495.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="83.5558%" y="469" width="0.0103%" height="15" fill="rgb(241,228,46)" fg:x="121740" fg:w="15"/><text x="83.8058%" y="479.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="83.5558%" y="453" width="0.0103%" height="15" fill="rgb(223,209,38)" fg:x="121740" fg:w="15"/><text x="83.8058%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (40 samples, 0.03%)</title><rect x="83.5661%" y="469" width="0.0275%" height="15" fill="rgb(236,164,45)" fg:x="121755" fg:w="40"/><text x="83.8161%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (40 samples, 0.03%)</title><rect x="83.5661%" y="453" width="0.0275%" height="15" fill="rgb(231,15,5)" fg:x="121755" fg:w="40"/><text x="83.8161%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (1,070 samples, 0.73%)</title><rect x="83.5936%" y="469" width="0.7344%" height="15" fill="rgb(252,35,15)" fg:x="121795" fg:w="1070"/><text x="83.8436%" y="479.50"></text></g><g><title>neuralang::World::update_cells::{{closure}} (1,070 samples, 0.73%)</title><rect x="83.5936%" y="453" width="0.7344%" height="15" fill="rgb(248,181,18)" fg:x="121795" fg:w="1070"/><text x="83.8436%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (1,070 samples, 0.73%)</title><rect x="83.5936%" y="437" width="0.7344%" height="15" fill="rgb(233,39,42)" fg:x="121795" fg:w="1070"/><text x="83.8436%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::ne (1,070 samples, 0.73%)</title><rect x="83.5936%" y="421" width="0.7344%" height="15" fill="rgb(238,110,33)" fg:x="121795" fg:w="1070"/><text x="83.8436%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (5,753 samples, 3.95%)</title><rect x="80.3904%" y="485" width="3.9486%" height="15" fill="rgb(233,195,10)" fg:x="117128" fg:w="5753"/><text x="80.6404%" y="495.50">allo..</text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.01%)</title><rect x="84.3280%" y="469" width="0.0110%" height="15" fill="rgb(254,105,3)" fg:x="122865" fg:w="16"/><text x="84.5780%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (9,653 samples, 6.63%)</title><rect x="77.7404%" y="517" width="6.6253%" height="15" fill="rgb(221,225,9)" fg:x="113267" fg:w="9653"/><text x="77.9904%" y="527.50">alloc::ve..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (9,632 samples, 6.61%)</title><rect x="77.7548%" y="501" width="6.6109%" height="15" fill="rgb(224,227,45)" fg:x="113288" fg:w="9632"/><text x="78.0048%" y="511.50">alloc::ve..</text></g><g><title>core::mem::drop (39 samples, 0.03%)</title><rect x="84.3389%" y="485" width="0.0268%" height="15" fill="rgb(229,198,43)" fg:x="122881" fg:w="39"/><text x="84.5889%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;T,A&gt;::retain_mut::BackshiftOnDrop&lt;usize,alloc::alloc::Global&gt;&gt; (39 samples, 0.03%)</title><rect x="84.3389%" y="469" width="0.0268%" height="15" fill="rgb(206,209,35)" fg:x="122881" fg:w="39"/><text x="84.5889%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt;::retain_mut::BackshiftOnDrop&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.03%)</title><rect x="84.3389%" y="453" width="0.0268%" height="15" fill="rgb(245,195,53)" fg:x="122881" fg:w="39"/><text x="84.5889%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (21 samples, 0.01%)</title><rect x="84.3513%" y="437" width="0.0144%" height="15" fill="rgb(240,92,26)" fg:x="122899" fg:w="21"/><text x="84.6013%" y="447.50"></text></g><g><title>neuralang::add_2d (81 samples, 0.06%)</title><rect x="84.3657%" y="517" width="0.0556%" height="15" fill="rgb(207,40,23)" fg:x="122920" fg:w="81"/><text x="84.6157%" y="527.50"></text></g><g><title>neuralang::oob (81 samples, 0.06%)</title><rect x="84.4213%" y="517" width="0.0556%" height="15" fill="rgb(223,111,35)" fg:x="123001" fg:w="81"/><text x="84.6713%" y="527.50"></text></g><g><title>__fmodf (1,063 samples, 0.73%)</title><rect x="85.9999%" y="501" width="0.7296%" height="15" fill="rgb(229,147,28)" fg:x="125301" fg:w="1063"/><text x="86.2499%" y="511.50"></text></g><g><title>neuralang::pos_to_cell (17,831 samples, 12.24%)</title><rect x="84.4769%" y="517" width="12.2382%" height="15" fill="rgb(211,29,28)" fg:x="123082" fg:w="17831"/><text x="84.7269%" y="527.50">neuralang::pos_to_..</text></g><g><title>__ieee754_fmodf (14,549 samples, 9.99%)</title><rect x="86.7295%" y="501" width="9.9857%" height="15" fill="rgb(228,72,33)" fg:x="126364" fg:w="14549"/><text x="86.9795%" y="511.50">__ieee754_fmodf</text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="96.6980%" y="485" width="0.0172%" height="15" fill="rgb(205,214,31)" fg:x="140888" fg:w="25"/><text x="96.9480%" y="495.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="96.7007%" y="469" width="0.0144%" height="15" fill="rgb(224,111,15)" fg:x="140892" fg:w="21"/><text x="96.9507%" y="479.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="96.7007%" y="453" width="0.0144%" height="15" fill="rgb(253,21,26)" fg:x="140892" fg:w="21"/><text x="96.9507%" y="463.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="96.7007%" y="437" width="0.0144%" height="15" fill="rgb(245,139,43)" fg:x="140892" fg:w="21"/><text x="96.9507%" y="447.50"></text></g><g><title>[unknown] (19 samples, 0.01%)</title><rect x="96.7021%" y="421" width="0.0130%" height="15" fill="rgb(252,170,7)" fg:x="140894" fg:w="19"/><text x="96.9521%" y="431.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="96.7028%" y="405" width="0.0124%" height="15" fill="rgb(231,118,14)" fg:x="140895" fg:w="18"/><text x="96.9528%" y="415.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="96.7035%" y="389" width="0.0117%" height="15" fill="rgb(238,83,0)" fg:x="140896" fg:w="17"/><text x="96.9535%" y="399.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="96.7042%" y="373" width="0.0110%" height="15" fill="rgb(221,39,39)" fg:x="140897" fg:w="16"/><text x="96.9542%" y="383.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="96.7049%" y="357" width="0.0103%" height="15" fill="rgb(222,119,46)" fg:x="140898" fg:w="15"/><text x="96.9549%" y="367.50"></text></g><g><title>neuralang::same_index (107 samples, 0.07%)</title><rect x="96.7151%" y="517" width="0.0734%" height="15" fill="rgb(222,165,49)" fg:x="140913" fg:w="107"/><text x="96.9651%" y="527.50"></text></g><g><title>neuralang::World::step (109,794 samples, 75.36%)</title><rect x="21.4325%" y="549" width="75.3567%" height="15" fill="rgb(219,113,52)" fg:x="31227" fg:w="109794"/><text x="21.6825%" y="559.50">neuralang::World::step</text></g><g><title>neuralang::World::update_cells (31,301 samples, 21.48%)</title><rect x="75.3059%" y="533" width="21.4833%" height="15" fill="rgb(214,7,15)" fg:x="109720" fg:w="31301"/><text x="75.5559%" y="543.50">neuralang::World::update_cells</text></g><g><title>&lt;neuralang::MainState as ggez::event::EventHandler&gt;::update (109,800 samples, 75.36%)</title><rect x="21.4298%" y="565" width="75.3608%" height="15" fill="rgb(235,32,4)" fg:x="31223" fg:w="109800"/><text x="21.6798%" y="575.50">&lt;neuralang::MainState as ggez::event::EventHandler&gt;::update</text></g><g><title>[libnvidia-glcore.so.530.30.02] (17 samples, 0.01%)</title><rect x="96.8222%" y="421" width="0.0117%" height="15" fill="rgb(238,90,54)" fg:x="141069" fg:w="17"/><text x="97.0722%" y="431.50"></text></g><g><title>ash::device::Device::create_image_view (24 samples, 0.02%)</title><rect x="96.8181%" y="469" width="0.0165%" height="15" fill="rgb(213,208,19)" fg:x="141063" fg:w="24"/><text x="97.0681%" y="479.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (24 samples, 0.02%)</title><rect x="96.8181%" y="453" width="0.0165%" height="15" fill="rgb(233,156,4)" fg:x="141063" fg:w="24"/><text x="97.0681%" y="463.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (19 samples, 0.01%)</title><rect x="96.8215%" y="437" width="0.0130%" height="15" fill="rgb(207,194,5)" fg:x="141068" fg:w="19"/><text x="97.0715%" y="447.50"></text></g><g><title>wgpu_hal::vulkan::device::&lt;impl wgpu_hal::Device&lt;wgpu_hal::vulkan::Api&gt; for wgpu_hal::vulkan::Device&gt;::create_texture_view (30 samples, 0.02%)</title><rect x="96.8174%" y="485" width="0.0206%" height="15" fill="rgb(206,111,30)" fg:x="141062" fg:w="30"/><text x="97.0674%" y="495.50"></text></g><g><title>ash::device::Device::wait_for_fences (54 samples, 0.04%)</title><rect x="96.8394%" y="469" width="0.0371%" height="15" fill="rgb(243,70,54)" fg:x="141094" fg:w="54"/><text x="97.0894%" y="479.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (54 samples, 0.04%)</title><rect x="96.8394%" y="453" width="0.0371%" height="15" fill="rgb(242,28,8)" fg:x="141094" fg:w="54"/><text x="97.0894%" y="463.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (54 samples, 0.04%)</title><rect x="96.8394%" y="437" width="0.0371%" height="15" fill="rgb(219,106,18)" fg:x="141094" fg:w="54"/><text x="97.0894%" y="447.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (54 samples, 0.04%)</title><rect x="96.8394%" y="421" width="0.0371%" height="15" fill="rgb(244,222,10)" fg:x="141094" fg:w="54"/><text x="97.0894%" y="431.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (54 samples, 0.04%)</title><rect x="96.8394%" y="405" width="0.0371%" height="15" fill="rgb(236,179,52)" fg:x="141094" fg:w="54"/><text x="97.0894%" y="415.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (51 samples, 0.04%)</title><rect x="96.8414%" y="389" width="0.0350%" height="15" fill="rgb(213,23,39)" fg:x="141097" fg:w="51"/><text x="97.0914%" y="399.50"></text></g><g><title>__GI___poll (29 samples, 0.02%)</title><rect x="96.8565%" y="373" width="0.0199%" height="15" fill="rgb(238,48,10)" fg:x="141119" fg:w="29"/><text x="97.1065%" y="383.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="96.8565%" y="357" width="0.0199%" height="15" fill="rgb(251,196,23)" fg:x="141119" fg:w="29"/><text x="97.1065%" y="367.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="96.8572%" y="341" width="0.0192%" height="15" fill="rgb(250,152,24)" fg:x="141120" fg:w="28"/><text x="97.1072%" y="351.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="96.8572%" y="325" width="0.0192%" height="15" fill="rgb(209,150,17)" fg:x="141120" fg:w="28"/><text x="97.1072%" y="335.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="96.8579%" y="309" width="0.0185%" height="15" fill="rgb(234,202,34)" fg:x="141121" fg:w="27"/><text x="97.1079%" y="319.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="96.8593%" y="293" width="0.0172%" height="15" fill="rgb(253,148,53)" fg:x="141123" fg:w="25"/><text x="97.1093%" y="303.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="96.8600%" y="277" width="0.0165%" height="15" fill="rgb(218,129,16)" fg:x="141124" fg:w="24"/><text x="97.1100%" y="287.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="96.8627%" y="261" width="0.0137%" height="15" fill="rgb(216,85,19)" fg:x="141128" fg:w="20"/><text x="97.1127%" y="271.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="96.8661%" y="245" width="0.0103%" height="15" fill="rgb(235,228,7)" fg:x="141133" fg:w="15"/><text x="97.1161%" y="255.50"></text></g><g><title>ash::extensions::khr::swapchain::Swapchain::acquire_next_image (43 samples, 0.03%)</title><rect x="96.8764%" y="469" width="0.0295%" height="15" fill="rgb(245,175,0)" fg:x="141148" fg:w="43"/><text x="97.1264%" y="479.50"></text></g><g><title>[libGLX_nvidia.so.530.30.02] (43 samples, 0.03%)</title><rect x="96.8764%" y="453" width="0.0295%" height="15" fill="rgb(208,168,36)" fg:x="141148" fg:w="43"/><text x="97.1264%" y="463.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (33 samples, 0.02%)</title><rect x="96.8833%" y="437" width="0.0226%" height="15" fill="rgb(246,171,24)" fg:x="141158" fg:w="33"/><text x="97.1333%" y="447.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (16 samples, 0.01%)</title><rect x="96.8950%" y="421" width="0.0110%" height="15" fill="rgb(215,142,24)" fg:x="141175" fg:w="16"/><text x="97.1450%" y="431.50"></text></g><g><title>&lt;T as wgpu::context::DynContext&gt;::surface_get_current_texture (151 samples, 0.10%)</title><rect x="96.8030%" y="533" width="0.1036%" height="15" fill="rgb(250,187,7)" fg:x="141041" fg:w="151"/><text x="97.0530%" y="543.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::surface_get_current_texture (151 samples, 0.10%)</title><rect x="96.8030%" y="517" width="0.1036%" height="15" fill="rgb(228,66,33)" fg:x="141041" fg:w="151"/><text x="97.0530%" y="527.50"></text></g><g><title>wgpu_core::present::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::surface_get_current_texture (145 samples, 0.10%)</title><rect x="96.8071%" y="501" width="0.0995%" height="15" fill="rgb(234,215,21)" fg:x="141047" fg:w="145"/><text x="97.0571%" y="511.50"></text></g><g><title>wgpu_hal::vulkan::instance::&lt;impl wgpu_hal::Surface&lt;wgpu_hal::vulkan::Api&gt; for wgpu_hal::vulkan::Surface&gt;::acquire_texture (100 samples, 0.07%)</title><rect x="96.8380%" y="485" width="0.0686%" height="15" fill="rgb(222,191,20)" fg:x="141092" fg:w="100"/><text x="97.0880%" y="495.50"></text></g><g><title>wgpu::Surface::get_current_texture (156 samples, 0.11%)</title><rect x="96.8023%" y="549" width="0.1071%" height="15" fill="rgb(245,79,54)" fg:x="141040" fg:w="156"/><text x="97.0523%" y="559.50"></text></g><g><title>[libX11.so.6.4.0] (15 samples, 0.01%)</title><rect x="96.9259%" y="437" width="0.0103%" height="15" fill="rgb(240,10,37)" fg:x="141220" fg:w="15"/><text x="97.1759%" y="447.50"></text></g><g><title>[libxcb.so.1.1.0] (82 samples, 0.06%)</title><rect x="96.9410%" y="389" width="0.0563%" height="15" fill="rgb(214,192,32)" fg:x="141242" fg:w="82"/><text x="97.1910%" y="399.50"></text></g><g><title>__GI___writev (63 samples, 0.04%)</title><rect x="96.9540%" y="373" width="0.0432%" height="15" fill="rgb(209,36,54)" fg:x="141261" fg:w="63"/><text x="97.2040%" y="383.50"></text></g><g><title>__GI___writev (63 samples, 0.04%)</title><rect x="96.9540%" y="357" width="0.0432%" height="15" fill="rgb(220,10,11)" fg:x="141261" fg:w="63"/><text x="97.2040%" y="367.50"></text></g><g><title>[unknown] (63 samples, 0.04%)</title><rect x="96.9540%" y="341" width="0.0432%" height="15" fill="rgb(221,106,17)" fg:x="141261" fg:w="63"/><text x="97.2040%" y="351.50"></text></g><g><title>[unknown] (62 samples, 0.04%)</title><rect x="96.9547%" y="325" width="0.0426%" height="15" fill="rgb(251,142,44)" fg:x="141262" fg:w="62"/><text x="97.2047%" y="335.50"></text></g><g><title>[unknown] (60 samples, 0.04%)</title><rect x="96.9561%" y="309" width="0.0412%" height="15" fill="rgb(238,13,15)" fg:x="141264" fg:w="60"/><text x="97.2061%" y="319.50"></text></g><g><title>[unknown] (58 samples, 0.04%)</title><rect x="96.9574%" y="293" width="0.0398%" height="15" fill="rgb(208,107,27)" fg:x="141266" fg:w="58"/><text x="97.2074%" y="303.50"></text></g><g><title>[unknown] (58 samples, 0.04%)</title><rect x="96.9574%" y="277" width="0.0398%" height="15" fill="rgb(205,136,37)" fg:x="141266" fg:w="58"/><text x="97.2074%" y="287.50"></text></g><g><title>[unknown] (56 samples, 0.04%)</title><rect x="96.9588%" y="261" width="0.0384%" height="15" fill="rgb(250,205,27)" fg:x="141268" fg:w="56"/><text x="97.2088%" y="271.50"></text></g><g><title>[unknown] (56 samples, 0.04%)</title><rect x="96.9588%" y="245" width="0.0384%" height="15" fill="rgb(210,80,43)" fg:x="141268" fg:w="56"/><text x="97.2088%" y="255.50"></text></g><g><title>[unknown] (53 samples, 0.04%)</title><rect x="96.9609%" y="229" width="0.0364%" height="15" fill="rgb(247,160,36)" fg:x="141271" fg:w="53"/><text x="97.2109%" y="239.50"></text></g><g><title>[unknown] (50 samples, 0.03%)</title><rect x="96.9629%" y="213" width="0.0343%" height="15" fill="rgb(234,13,49)" fg:x="141274" fg:w="50"/><text x="97.2129%" y="223.50"></text></g><g><title>[unknown] (50 samples, 0.03%)</title><rect x="96.9629%" y="197" width="0.0343%" height="15" fill="rgb(234,122,0)" fg:x="141274" fg:w="50"/><text x="97.2129%" y="207.50"></text></g><g><title>[unknown] (42 samples, 0.03%)</title><rect x="96.9684%" y="181" width="0.0288%" height="15" fill="rgb(207,146,38)" fg:x="141282" fg:w="42"/><text x="97.2184%" y="191.50"></text></g><g><title>[unknown] (36 samples, 0.02%)</title><rect x="96.9725%" y="165" width="0.0247%" height="15" fill="rgb(207,177,25)" fg:x="141288" fg:w="36"/><text x="97.2225%" y="175.50"></text></g><g><title>[unknown] (34 samples, 0.02%)</title><rect x="96.9739%" y="149" width="0.0233%" height="15" fill="rgb(211,178,42)" fg:x="141290" fg:w="34"/><text x="97.2239%" y="159.50"></text></g><g><title>[unknown] (31 samples, 0.02%)</title><rect x="96.9760%" y="133" width="0.0213%" height="15" fill="rgb(230,69,54)" fg:x="141293" fg:w="31"/><text x="97.2260%" y="143.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="96.9787%" y="117" width="0.0185%" height="15" fill="rgb(214,135,41)" fg:x="141297" fg:w="27"/><text x="97.2287%" y="127.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="96.9828%" y="101" width="0.0144%" height="15" fill="rgb(237,67,25)" fg:x="141303" fg:w="21"/><text x="97.2328%" y="111.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="96.9849%" y="85" width="0.0124%" height="15" fill="rgb(222,189,50)" fg:x="141306" fg:w="18"/><text x="97.2349%" y="95.50"></text></g><g><title>_XSend (90 samples, 0.06%)</title><rect x="96.9361%" y="437" width="0.0618%" height="15" fill="rgb(245,148,34)" fg:x="141235" fg:w="90"/><text x="97.1861%" y="447.50"></text></g><g><title>xcb_writev (86 samples, 0.06%)</title><rect x="96.9389%" y="421" width="0.0590%" height="15" fill="rgb(222,29,6)" fg:x="141239" fg:w="86"/><text x="97.1889%" y="431.50"></text></g><g><title>[libxcb.so.1.1.0] (85 samples, 0.06%)</title><rect x="96.9396%" y="405" width="0.0583%" height="15" fill="rgb(221,189,43)" fg:x="141240" fg:w="85"/><text x="97.1896%" y="415.50"></text></g><g><title>[libxcb.so.1.1.0] (25 samples, 0.02%)</title><rect x="96.9993%" y="389" width="0.0172%" height="15" fill="rgb(207,36,27)" fg:x="141327" fg:w="25"/><text x="97.2493%" y="399.50"></text></g><g><title>__libc_recvmsg (21 samples, 0.01%)</title><rect x="97.0020%" y="373" width="0.0144%" height="15" fill="rgb(217,90,24)" fg:x="141331" fg:w="21"/><text x="97.2520%" y="383.50"></text></g><g><title>__recvmsg_syscall (20 samples, 0.01%)</title><rect x="97.0027%" y="357" width="0.0137%" height="15" fill="rgb(224,66,35)" fg:x="141332" fg:w="20"/><text x="97.2527%" y="367.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="97.0027%" y="341" width="0.0137%" height="15" fill="rgb(221,13,50)" fg:x="141332" fg:w="20"/><text x="97.2527%" y="351.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="97.0041%" y="325" width="0.0124%" height="15" fill="rgb(236,68,49)" fg:x="141334" fg:w="18"/><text x="97.2541%" y="335.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="97.0048%" y="309" width="0.0117%" height="15" fill="rgb(229,146,28)" fg:x="141335" fg:w="17"/><text x="97.2548%" y="319.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="97.0062%" y="293" width="0.0103%" height="15" fill="rgb(225,31,38)" fg:x="141337" fg:w="15"/><text x="97.2562%" y="303.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="97.0062%" y="277" width="0.0103%" height="15" fill="rgb(250,208,3)" fg:x="141337" fg:w="15"/><text x="97.2562%" y="287.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="97.0062%" y="261" width="0.0103%" height="15" fill="rgb(246,54,23)" fg:x="141337" fg:w="15"/><text x="97.2562%" y="271.50"></text></g><g><title>XGetGeometry (171 samples, 0.12%)</title><rect x="96.9204%" y="469" width="0.1174%" height="15" fill="rgb(243,76,11)" fg:x="141212" fg:w="171"/><text x="97.1704%" y="479.50"></text></g><g><title>_XReply (165 samples, 0.11%)</title><rect x="96.9245%" y="453" width="0.1132%" height="15" fill="rgb(245,21,50)" fg:x="141218" fg:w="165"/><text x="97.1745%" y="463.50"></text></g><g><title>xcb_wait_for_reply64 (58 samples, 0.04%)</title><rect x="96.9979%" y="437" width="0.0398%" height="15" fill="rgb(228,9,43)" fg:x="141325" fg:w="58"/><text x="97.2479%" y="447.50"></text></g><g><title>[libxcb.so.1.1.0] (58 samples, 0.04%)</title><rect x="96.9979%" y="421" width="0.0398%" height="15" fill="rgb(208,100,47)" fg:x="141325" fg:w="58"/><text x="97.2479%" y="431.50"></text></g><g><title>[libxcb.so.1.1.0] (58 samples, 0.04%)</title><rect x="96.9979%" y="405" width="0.0398%" height="15" fill="rgb(232,26,8)" fg:x="141325" fg:w="58"/><text x="97.2479%" y="415.50"></text></g><g><title>__GI___poll (31 samples, 0.02%)</title><rect x="97.0165%" y="389" width="0.0213%" height="15" fill="rgb(216,166,38)" fg:x="141352" fg:w="31"/><text x="97.2665%" y="399.50"></text></g><g><title>[unknown] (31 samples, 0.02%)</title><rect x="97.0165%" y="373" width="0.0213%" height="15" fill="rgb(251,202,51)" fg:x="141352" fg:w="31"/><text x="97.2665%" y="383.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="97.0199%" y="357" width="0.0178%" height="15" fill="rgb(254,216,34)" fg:x="141357" fg:w="26"/><text x="97.2699%" y="367.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="97.0199%" y="341" width="0.0178%" height="15" fill="rgb(251,32,27)" fg:x="141357" fg:w="26"/><text x="97.2699%" y="351.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="97.0213%" y="325" width="0.0165%" height="15" fill="rgb(208,127,28)" fg:x="141359" fg:w="24"/><text x="97.2713%" y="335.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="97.0219%" y="309" width="0.0158%" height="15" fill="rgb(224,137,22)" fg:x="141360" fg:w="23"/><text x="97.2719%" y="319.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="97.0233%" y="293" width="0.0144%" height="15" fill="rgb(254,70,32)" fg:x="141362" fg:w="21"/><text x="97.2733%" y="303.50"></text></g><g><title>[unknown] (19 samples, 0.01%)</title><rect x="97.0247%" y="277" width="0.0130%" height="15" fill="rgb(229,75,37)" fg:x="141364" fg:w="19"/><text x="97.2747%" y="287.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="97.0254%" y="261" width="0.0124%" height="15" fill="rgb(252,64,23)" fg:x="141365" fg:w="18"/><text x="97.2754%" y="271.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="97.0261%" y="245" width="0.0117%" height="15" fill="rgb(232,162,48)" fg:x="141366" fg:w="17"/><text x="97.2761%" y="255.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="97.0267%" y="229" width="0.0110%" height="15" fill="rgb(246,160,12)" fg:x="141367" fg:w="16"/><text x="97.2767%" y="239.50"></text></g><g><title>ggez::graphics::context::GraphicsContext::begin_frame (361 samples, 0.25%)</title><rect x="96.7913%" y="565" width="0.2478%" height="15" fill="rgb(247,166,0)" fg:x="141024" fg:w="361"/><text x="97.0413%" y="575.50"></text></g><g><title>winit::window::Window::inner_size (175 samples, 0.12%)</title><rect x="96.9190%" y="549" width="0.1201%" height="15" fill="rgb(249,219,21)" fg:x="141210" fg:w="175"/><text x="97.1690%" y="559.50"></text></g><g><title>winit::platform_impl::platform::Window::inner_size (175 samples, 0.12%)</title><rect x="96.9190%" y="533" width="0.1201%" height="15" fill="rgb(205,209,3)" fg:x="141210" fg:w="175"/><text x="97.1690%" y="543.50"></text></g><g><title>winit::platform_impl::platform::x11::window::UnownedWindow::inner_size (175 samples, 0.12%)</title><rect x="96.9190%" y="517" width="0.1201%" height="15" fill="rgb(243,44,1)" fg:x="141210" fg:w="175"/><text x="97.1690%" y="527.50"></text></g><g><title>winit::platform_impl::platform::x11::window::UnownedWindow::inner_size_physical (173 samples, 0.12%)</title><rect x="96.9204%" y="501" width="0.1187%" height="15" fill="rgb(206,159,16)" fg:x="141212" fg:w="173"/><text x="97.1704%" y="511.50"></text></g><g><title>winit::platform_impl::platform::x11::util::geometry::&lt;impl winit::platform_impl::platform::x11::xdisplay::XConnection&gt;::get_geometry (173 samples, 0.12%)</title><rect x="96.9204%" y="485" width="0.1187%" height="15" fill="rgb(244,77,30)" fg:x="141212" fg:w="173"/><text x="97.1704%" y="495.50"></text></g><g><title>wgpu_core::command::CommandBuffer&lt;A&gt;::drain_barriers (16 samples, 0.01%)</title><rect x="97.0473%" y="421" width="0.0110%" height="15" fill="rgb(218,69,12)" fg:x="141397" fg:w="16"/><text x="97.2973%" y="431.50"></text></g><g><title>wgpu_hal::vulkan::command::&lt;impl wgpu_hal::CommandEncoder&lt;wgpu_hal::vulkan::Api&gt; for wgpu_hal::vulkan::CommandEncoder&gt;::transition_textures (16 samples, 0.01%)</title><rect x="97.0473%" y="405" width="0.0110%" height="15" fill="rgb(212,87,7)" fg:x="141397" fg:w="16"/><text x="97.2973%" y="415.50"></text></g><g><title>wgpu_core::command::CommandBuffer&lt;A&gt;::insert_barriers_from_scope (21 samples, 0.01%)</title><rect x="97.0473%" y="437" width="0.0144%" height="15" fill="rgb(245,114,25)" fg:x="141397" fg:w="21"/><text x="97.2973%" y="447.50"></text></g><g><title>core::mem::drop (65 samples, 0.04%)</title><rect x="97.0405%" y="549" width="0.0446%" height="15" fill="rgb(210,61,42)" fg:x="141387" fg:w="65"/><text x="97.2905%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;wgpu::RenderPass&gt; (65 samples, 0.04%)</title><rect x="97.0405%" y="533" width="0.0446%" height="15" fill="rgb(211,52,33)" fg:x="141387" fg:w="65"/><text x="97.2905%" y="543.50"></text></g><g><title>&lt;wgpu::RenderPass as core::ops::drop::Drop&gt;::drop (63 samples, 0.04%)</title><rect x="97.0418%" y="517" width="0.0432%" height="15" fill="rgb(234,58,33)" fg:x="141389" fg:w="63"/><text x="97.2918%" y="527.50"></text></g><g><title>&lt;T as wgpu::context::DynContext&gt;::command_encoder_end_render_pass (63 samples, 0.04%)</title><rect x="97.0418%" y="501" width="0.0432%" height="15" fill="rgb(220,115,36)" fg:x="141389" fg:w="63"/><text x="97.2918%" y="511.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::command_encoder_end_render_pass (63 samples, 0.04%)</title><rect x="97.0418%" y="485" width="0.0432%" height="15" fill="rgb(243,153,54)" fg:x="141389" fg:w="63"/><text x="97.2918%" y="495.50"></text></g><g><title>wgpu_core::command::render::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass (63 samples, 0.04%)</title><rect x="97.0418%" y="469" width="0.0432%" height="15" fill="rgb(251,47,18)" fg:x="141389" fg:w="63"/><text x="97.2918%" y="479.50"></text></g><g><title>wgpu_core::command::render::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass_impl (63 samples, 0.04%)</title><rect x="97.0418%" y="453" width="0.0432%" height="15" fill="rgb(242,102,42)" fg:x="141389" fg:w="63"/><text x="97.2918%" y="463.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (96 samples, 0.07%)</title><rect x="97.2059%" y="277" width="0.0659%" height="15" fill="rgb(234,31,38)" fg:x="141628" fg:w="96"/><text x="97.4559%" y="287.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (110 samples, 0.08%)</title><rect x="97.1970%" y="293" width="0.0755%" height="15" fill="rgb(221,117,51)" fg:x="141615" fg:w="110"/><text x="97.4470%" y="303.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (207 samples, 0.14%)</title><rect x="97.1338%" y="325" width="0.1421%" height="15" fill="rgb(212,20,18)" fg:x="141523" fg:w="207"/><text x="97.3838%" y="335.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (118 samples, 0.08%)</title><rect x="97.1949%" y="309" width="0.0810%" height="15" fill="rgb(245,133,36)" fg:x="141612" fg:w="118"/><text x="97.4449%" y="319.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (210 samples, 0.14%)</title><rect x="97.1324%" y="357" width="0.1441%" height="15" fill="rgb(212,6,19)" fg:x="141521" fg:w="210"/><text x="97.3824%" y="367.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (209 samples, 0.14%)</title><rect x="97.1331%" y="341" width="0.1434%" height="15" fill="rgb(218,1,36)" fg:x="141522" fg:w="209"/><text x="97.3831%" y="351.50"></text></g><g><title>ash::device::Device::queue_submit (249 samples, 0.17%)</title><rect x="97.1070%" y="469" width="0.1709%" height="15" fill="rgb(246,84,54)" fg:x="141484" fg:w="249"/><text x="97.3570%" y="479.50"></text></g><g><title>[libGLX_nvidia.so.530.30.02] (249 samples, 0.17%)</title><rect x="97.1070%" y="453" width="0.1709%" height="15" fill="rgb(242,110,6)" fg:x="141484" fg:w="249"/><text x="97.3570%" y="463.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (244 samples, 0.17%)</title><rect x="97.1105%" y="437" width="0.1675%" height="15" fill="rgb(214,47,5)" fg:x="141489" fg:w="244"/><text x="97.3605%" y="447.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (242 samples, 0.17%)</title><rect x="97.1119%" y="421" width="0.1661%" height="15" fill="rgb(218,159,25)" fg:x="141491" fg:w="242"/><text x="97.3619%" y="431.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (237 samples, 0.16%)</title><rect x="97.1153%" y="405" width="0.1627%" height="15" fill="rgb(215,211,28)" fg:x="141496" fg:w="237"/><text x="97.3653%" y="415.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (225 samples, 0.15%)</title><rect x="97.1235%" y="389" width="0.1544%" height="15" fill="rgb(238,59,32)" fg:x="141508" fg:w="225"/><text x="97.3735%" y="399.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (217 samples, 0.15%)</title><rect x="97.1290%" y="373" width="0.1489%" height="15" fill="rgb(226,82,3)" fg:x="141516" fg:w="217"/><text x="97.3790%" y="383.50"></text></g><g><title>&lt;wgpu_hal::vulkan::Queue as wgpu_hal::Queue&lt;wgpu_hal::vulkan::Api&gt;&gt;::submit (253 samples, 0.17%)</title><rect x="97.1050%" y="485" width="0.1736%" height="15" fill="rgb(240,164,32)" fg:x="141481" fg:w="253"/><text x="97.3550%" y="495.50"></text></g><g><title>wgpu_core::command::CommandBuffer&lt;A&gt;::insert_barriers_from_tracker (16 samples, 0.01%)</title><rect x="97.2862%" y="485" width="0.0110%" height="15" fill="rgb(232,46,7)" fg:x="141745" fg:w="16"/><text x="97.5362%" y="495.50"></text></g><g><title>wgpu_core::device::life::LifetimeTracker&lt;A&gt;::cleanup (21 samples, 0.01%)</title><rect x="97.3047%" y="469" width="0.0144%" height="15" fill="rgb(229,129,53)" fg:x="141772" fg:w="21"/><text x="97.5547%" y="479.50"></text></g><g><title>wgpu_core::device::life::NonReferencedResources&lt;A&gt;::clean (21 samples, 0.01%)</title><rect x="97.3047%" y="453" width="0.0144%" height="15" fill="rgb(234,188,29)" fg:x="141772" fg:w="21"/><text x="97.5547%" y="463.50"></text></g><g><title>wgpu_core::device::life::LifetimeTracker&lt;A&gt;::triage_submissions (34 samples, 0.02%)</title><rect x="97.3191%" y="469" width="0.0233%" height="15" fill="rgb(246,141,4)" fg:x="141793" fg:w="34"/><text x="97.5691%" y="479.50"></text></g><g><title>wgpu_core::device::queue::EncoderInFlight&lt;A&gt;::land (30 samples, 0.02%)</title><rect x="97.3219%" y="453" width="0.0206%" height="15" fill="rgb(229,23,39)" fg:x="141797" fg:w="30"/><text x="97.5719%" y="463.50"></text></g><g><title>wgpu_hal::vulkan::command::&lt;impl wgpu_hal::CommandEncoder&lt;wgpu_hal::vulkan::Api&gt; for wgpu_hal::vulkan::CommandEncoder&gt;::reset_all (30 samples, 0.02%)</title><rect x="97.3219%" y="437" width="0.0206%" height="15" fill="rgb(206,12,3)" fg:x="141797" fg:w="30"/><text x="97.5719%" y="447.50"></text></g><g><title>ash::device::Device::reset_command_pool (30 samples, 0.02%)</title><rect x="97.3219%" y="421" width="0.0206%" height="15" fill="rgb(252,226,20)" fg:x="141797" fg:w="30"/><text x="97.5719%" y="431.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (30 samples, 0.02%)</title><rect x="97.3219%" y="405" width="0.0206%" height="15" fill="rgb(216,123,35)" fg:x="141797" fg:w="30"/><text x="97.5719%" y="415.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (29 samples, 0.02%)</title><rect x="97.3226%" y="389" width="0.0199%" height="15" fill="rgb(212,68,40)" fg:x="141798" fg:w="29"/><text x="97.5726%" y="399.50"></text></g><g><title>wgpu_core::device::life::LifetimeTracker&lt;A&gt;::triage_suspected (24 samples, 0.02%)</title><rect x="97.3425%" y="469" width="0.0165%" height="15" fill="rgb(254,125,32)" fg:x="141827" fg:w="24"/><text x="97.5925%" y="479.50"></text></g><g><title>wgpu_core::device::Device&lt;A&gt;::maintain (83 samples, 0.06%)</title><rect x="97.3047%" y="485" width="0.0570%" height="15" fill="rgb(253,97,22)" fg:x="141772" fg:w="83"/><text x="97.5547%" y="495.50"></text></g><g><title>&lt;T as wgpu::context::DynContext&gt;::queue_submit (405 samples, 0.28%)</title><rect x="97.0981%" y="533" width="0.2780%" height="15" fill="rgb(241,101,14)" fg:x="141471" fg:w="405"/><text x="97.3481%" y="543.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::queue_submit (405 samples, 0.28%)</title><rect x="97.0981%" y="517" width="0.2780%" height="15" fill="rgb(238,103,29)" fg:x="141471" fg:w="405"/><text x="97.3481%" y="527.50"></text></g><g><title>wgpu_core::device::queue::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::queue_submit (404 samples, 0.28%)</title><rect x="97.0988%" y="501" width="0.2773%" height="15" fill="rgb(233,195,47)" fg:x="141472" fg:w="404"/><text x="97.3488%" y="511.50"></text></g><g><title>wgpu::Queue::submit (407 samples, 0.28%)</title><rect x="97.0974%" y="549" width="0.2793%" height="15" fill="rgb(246,218,30)" fg:x="141470" fg:w="407"/><text x="97.3474%" y="559.50"></text></g><g><title>[libGLX_nvidia.so.530.30.02] (17 samples, 0.01%)</title><rect x="97.4166%" y="341" width="0.0117%" height="15" fill="rgb(219,145,47)" fg:x="141935" fg:w="17"/><text x="97.6666%" y="351.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (17 samples, 0.01%)</title><rect x="97.4166%" y="325" width="0.0117%" height="15" fill="rgb(243,12,26)" fg:x="141935" fg:w="17"/><text x="97.6666%" y="335.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (73 samples, 0.05%)</title><rect x="97.5491%" y="229" width="0.0501%" height="15" fill="rgb(214,87,16)" fg:x="142128" fg:w="73"/><text x="97.7991%" y="239.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (43 samples, 0.03%)</title><rect x="97.5696%" y="213" width="0.0295%" height="15" fill="rgb(208,99,42)" fg:x="142158" fg:w="43"/><text x="97.8196%" y="223.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (18 samples, 0.01%)</title><rect x="97.5868%" y="197" width="0.0124%" height="15" fill="rgb(253,99,2)" fg:x="142183" fg:w="18"/><text x="97.8368%" y="207.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (87 samples, 0.06%)</title><rect x="97.5422%" y="245" width="0.0597%" height="15" fill="rgb(220,168,23)" fg:x="142118" fg:w="87"/><text x="97.7922%" y="255.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (178 samples, 0.12%)</title><rect x="97.4811%" y="261" width="0.1222%" height="15" fill="rgb(242,38,24)" fg:x="142029" fg:w="178"/><text x="97.7311%" y="271.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (201 samples, 0.14%)</title><rect x="97.4694%" y="293" width="0.1380%" height="15" fill="rgb(225,182,9)" fg:x="142012" fg:w="201"/><text x="97.7194%" y="303.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (194 samples, 0.13%)</title><rect x="97.4742%" y="277" width="0.1332%" height="15" fill="rgb(243,178,37)" fg:x="142019" fg:w="194"/><text x="97.7242%" y="287.50"></text></g><g><title>__GI___ioctl (1,176 samples, 0.81%)</title><rect x="97.6074%" y="293" width="0.8071%" height="15" fill="rgb(232,139,19)" fg:x="142213" fg:w="1176"/><text x="97.8574%" y="303.50"></text></g><g><title>[unknown] (1,176 samples, 0.81%)</title><rect x="97.6074%" y="277" width="0.8071%" height="15" fill="rgb(225,201,24)" fg:x="142213" fg:w="1176"/><text x="97.8574%" y="287.50"></text></g><g><title>[unknown] (157 samples, 0.11%)</title><rect x="98.3068%" y="261" width="0.1078%" height="15" fill="rgb(221,47,46)" fg:x="143232" fg:w="157"/><text x="98.5568%" y="271.50"></text></g><g><title>[unknown] (42 samples, 0.03%)</title><rect x="98.3857%" y="245" width="0.0288%" height="15" fill="rgb(249,23,13)" fg:x="143347" fg:w="42"/><text x="98.6357%" y="255.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="98.3946%" y="229" width="0.0199%" height="15" fill="rgb(219,9,5)" fg:x="143360" fg:w="29"/><text x="98.6446%" y="239.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (1,388 samples, 0.95%)</title><rect x="97.4626%" y="309" width="0.9526%" height="15" fill="rgb(254,171,16)" fg:x="142002" fg:w="1388"/><text x="97.7126%" y="319.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (1,407 samples, 0.97%)</title><rect x="97.4516%" y="325" width="0.9657%" height="15" fill="rgb(230,171,20)" fg:x="141986" fg:w="1407"/><text x="97.7016%" y="335.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (1,442 samples, 0.99%)</title><rect x="97.4283%" y="341" width="0.9897%" height="15" fill="rgb(210,71,41)" fg:x="141952" fg:w="1442"/><text x="97.6783%" y="351.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (1,489 samples, 1.02%)</title><rect x="97.3967%" y="373" width="1.0220%" height="15" fill="rgb(206,173,20)" fg:x="141906" fg:w="1489"/><text x="97.6467%" y="383.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (1,479 samples, 1.02%)</title><rect x="97.4036%" y="357" width="1.0151%" height="15" fill="rgb(233,88,34)" fg:x="141916" fg:w="1479"/><text x="97.6536%" y="367.50"></text></g><g><title>&lt;wgpu_hal::vulkan::Queue as wgpu_hal::Queue&lt;wgpu_hal::vulkan::Api&gt;&gt;::present (1,519 samples, 1.04%)</title><rect x="97.3836%" y="485" width="1.0426%" height="15" fill="rgb(223,209,46)" fg:x="141887" fg:w="1519"/><text x="97.6336%" y="495.50"></text></g><g><title>ash::extensions::khr::swapchain::Swapchain::queue_present (1,518 samples, 1.04%)</title><rect x="97.3843%" y="469" width="1.0419%" height="15" fill="rgb(250,43,18)" fg:x="141888" fg:w="1518"/><text x="97.6343%" y="479.50"></text></g><g><title>[libGLX_nvidia.so.530.30.02] (1,518 samples, 1.04%)</title><rect x="97.3843%" y="453" width="1.0419%" height="15" fill="rgb(208,13,10)" fg:x="141888" fg:w="1518"/><text x="97.6343%" y="463.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (1,512 samples, 1.04%)</title><rect x="97.3885%" y="437" width="1.0378%" height="15" fill="rgb(212,200,36)" fg:x="141894" fg:w="1512"/><text x="97.6385%" y="447.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (1,510 samples, 1.04%)</title><rect x="97.3898%" y="421" width="1.0364%" height="15" fill="rgb(225,90,30)" fg:x="141896" fg:w="1510"/><text x="97.6398%" y="431.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (1,509 samples, 1.04%)</title><rect x="97.3905%" y="405" width="1.0357%" height="15" fill="rgb(236,182,39)" fg:x="141897" fg:w="1509"/><text x="97.6405%" y="415.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (1,504 samples, 1.03%)</title><rect x="97.3939%" y="389" width="1.0323%" height="15" fill="rgb(212,144,35)" fg:x="141902" fg:w="1504"/><text x="97.6439%" y="399.50"></text></g><g><title>wgpu::SurfaceTexture::present (1,533 samples, 1.05%)</title><rect x="97.3795%" y="549" width="1.0522%" height="15" fill="rgb(228,63,44)" fg:x="141881" fg:w="1533"/><text x="97.6295%" y="559.50"></text></g><g><title>&lt;T as wgpu::context::DynContext&gt;::surface_present (1,533 samples, 1.05%)</title><rect x="97.3795%" y="533" width="1.0522%" height="15" fill="rgb(228,109,6)" fg:x="141881" fg:w="1533"/><text x="97.6295%" y="543.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::surface_present (1,533 samples, 1.05%)</title><rect x="97.3795%" y="517" width="1.0522%" height="15" fill="rgb(238,117,24)" fg:x="141881" fg:w="1533"/><text x="97.6295%" y="527.50"></text></g><g><title>wgpu_core::present::&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::surface_present (1,533 samples, 1.05%)</title><rect x="97.3795%" y="501" width="1.0522%" height="15" fill="rgb(242,26,26)" fg:x="141881" fg:w="1533"/><text x="97.6295%" y="511.50"></text></g><g><title>ggez::graphics::context::GraphicsContext::end_frame (2,032 samples, 1.39%)</title><rect x="97.0391%" y="565" width="1.3947%" height="15" fill="rgb(221,92,48)" fg:x="141385" fg:w="2032"/><text x="97.2891%" y="575.50"></text></g><g><title>ggez::event::run (140,604 samples, 96.50%)</title><rect x="1.9485%" y="693" width="96.5031%" height="15" fill="rgb(209,209,32)" fg:x="2839" fg:w="140604"/><text x="2.1985%" y="703.50">ggez::event::run</text></g><g><title>winit::event_loop::EventLoop&lt;T&gt;::run (140,604 samples, 96.50%)</title><rect x="1.9485%" y="677" width="96.5031%" height="15" fill="rgb(221,70,22)" fg:x="2839" fg:w="140604"/><text x="2.1985%" y="687.50">winit::event_loop::EventLoop&lt;T&gt;::run</text></g><g><title>winit::platform_impl::platform::EventLoop&lt;T&gt;::run (140,604 samples, 96.50%)</title><rect x="1.9485%" y="661" width="96.5031%" height="15" fill="rgb(248,145,5)" fg:x="2839" fg:w="140604"/><text x="2.1985%" y="671.50">winit::platform_impl::platform::EventLoop&lt;T&gt;::run</text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run (140,604 samples, 96.50%)</title><rect x="1.9485%" y="645" width="96.5031%" height="15" fill="rgb(226,116,26)" fg:x="2839" fg:w="140604"/><text x="2.1985%" y="655.50">winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run</text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run_return (140,604 samples, 96.50%)</title><rect x="1.9485%" y="629" width="96.5031%" height="15" fill="rgb(244,5,17)" fg:x="2839" fg:w="140604"/><text x="2.1985%" y="639.50">winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run_return</text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run_return::single_iteration (140,597 samples, 96.50%)</title><rect x="1.9533%" y="613" width="96.4983%" height="15" fill="rgb(252,159,33)" fg:x="2846" fg:w="140597"/><text x="2.2033%" y="623.50">winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run_return::single_iteration</text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run_return::single_iteration (140,563 samples, 96.47%)</title><rect x="1.9767%" y="597" width="96.4749%" height="15" fill="rgb(206,71,0)" fg:x="2880" fg:w="140563"/><text x="2.2267%" y="607.50">winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run_return::single_iteration</text></g><g><title>ggez::event::run::{{closure}} (140,563 samples, 96.47%)</title><rect x="1.9767%" y="581" width="96.4749%" height="15" fill="rgb(233,118,54)" fg:x="2880" fg:w="140563"/><text x="2.2267%" y="591.50">ggez::event::run::{{closure}}</text></g><g><title>neuralang::main (140,695 samples, 96.57%)</title><rect x="1.8868%" y="725" width="96.5655%" height="15" fill="rgb(234,83,48)" fg:x="2749" fg:w="140695"/><text x="2.1368%" y="735.50">neuralang::main</text></g><g><title>neuralang::run (140,695 samples, 96.57%)</title><rect x="1.8868%" y="709" width="96.5655%" height="15" fill="rgb(228,3,54)" fg:x="2749" fg:w="140695"/><text x="2.1368%" y="719.50">neuralang::run</text></g><g><title>std::rt::lang_start_internal (23 samples, 0.02%)</title><rect x="98.4523%" y="725" width="0.0158%" height="15" fill="rgb(226,155,13)" fg:x="143444" fg:w="23"/><text x="98.7023%" y="735.50"></text></g><g><title>std::panic::catch_unwind (23 samples, 0.02%)</title><rect x="98.4523%" y="709" width="0.0158%" height="15" fill="rgb(241,28,37)" fg:x="143444" fg:w="23"/><text x="98.7023%" y="719.50"></text></g><g><title>std::panicking::try (23 samples, 0.02%)</title><rect x="98.4523%" y="693" width="0.0158%" height="15" fill="rgb(233,93,10)" fg:x="143444" fg:w="23"/><text x="98.7023%" y="703.50"></text></g><g><title>std::panicking::try::do_call (23 samples, 0.02%)</title><rect x="98.4523%" y="677" width="0.0158%" height="15" fill="rgb(225,113,19)" fg:x="143444" fg:w="23"/><text x="98.7023%" y="687.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (23 samples, 0.02%)</title><rect x="98.4523%" y="661" width="0.0158%" height="15" fill="rgb(241,2,18)" fg:x="143444" fg:w="23"/><text x="98.7023%" y="671.50"></text></g><g><title>std::panic::catch_unwind (23 samples, 0.02%)</title><rect x="98.4523%" y="645" width="0.0158%" height="15" fill="rgb(228,207,21)" fg:x="143444" fg:w="23"/><text x="98.7023%" y="655.50"></text></g><g><title>std::panicking::try (23 samples, 0.02%)</title><rect x="98.4523%" y="629" width="0.0158%" height="15" fill="rgb(213,211,35)" fg:x="143444" fg:w="23"/><text x="98.7023%" y="639.50"></text></g><g><title>std::panicking::try::do_call (23 samples, 0.02%)</title><rect x="98.4523%" y="613" width="0.0158%" height="15" fill="rgb(209,83,10)" fg:x="143444" fg:w="23"/><text x="98.7023%" y="623.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (23 samples, 0.02%)</title><rect x="98.4523%" y="597" width="0.0158%" height="15" fill="rgb(209,164,1)" fg:x="143444" fg:w="23"/><text x="98.7023%" y="607.50"></text></g><g><title>std::rt::lang_start::{{closure}} (23 samples, 0.02%)</title><rect x="98.4523%" y="581" width="0.0158%" height="15" fill="rgb(213,184,43)" fg:x="143444" fg:w="23"/><text x="98.7023%" y="591.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (23 samples, 0.02%)</title><rect x="98.4523%" y="565" width="0.0158%" height="15" fill="rgb(231,61,34)" fg:x="143444" fg:w="23"/><text x="98.7023%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (23 samples, 0.02%)</title><rect x="98.4523%" y="549" width="0.0158%" height="15" fill="rgb(235,75,3)" fg:x="143444" fg:w="23"/><text x="98.7023%" y="559.50"></text></g><g><title>neuralang::main (23 samples, 0.02%)</title><rect x="98.4523%" y="533" width="0.0158%" height="15" fill="rgb(220,106,47)" fg:x="143444" fg:w="23"/><text x="98.7023%" y="543.50"></text></g><g><title>neuralang::run (23 samples, 0.02%)</title><rect x="98.4523%" y="517" width="0.0158%" height="15" fill="rgb(210,196,33)" fg:x="143444" fg:w="23"/><text x="98.7023%" y="527.50"></text></g><g><title>ggez::event::run (23 samples, 0.02%)</title><rect x="98.4523%" y="501" width="0.0158%" height="15" fill="rgb(229,154,42)" fg:x="143444" fg:w="23"/><text x="98.7023%" y="511.50"></text></g><g><title>winit::event_loop::EventLoop&lt;T&gt;::run (23 samples, 0.02%)</title><rect x="98.4523%" y="485" width="0.0158%" height="15" fill="rgb(228,114,26)" fg:x="143444" fg:w="23"/><text x="98.7023%" y="495.50"></text></g><g><title>winit::platform_impl::platform::EventLoop&lt;T&gt;::run (23 samples, 0.02%)</title><rect x="98.4523%" y="469" width="0.0158%" height="15" fill="rgb(208,144,1)" fg:x="143444" fg:w="23"/><text x="98.7023%" y="479.50"></text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run (23 samples, 0.02%)</title><rect x="98.4523%" y="453" width="0.0158%" height="15" fill="rgb(239,112,37)" fg:x="143444" fg:w="23"/><text x="98.7023%" y="463.50"></text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run_return (23 samples, 0.02%)</title><rect x="98.4523%" y="437" width="0.0158%" height="15" fill="rgb(210,96,50)" fg:x="143444" fg:w="23"/><text x="98.7023%" y="447.50"></text></g><g><title>winit::platform_impl::platform::x11::event_processor::EventProcessor&lt;T&gt;::poll (16 samples, 0.01%)</title><rect x="98.4571%" y="421" width="0.0110%" height="15" fill="rgb(222,178,2)" fg:x="143451" fg:w="16"/><text x="98.7071%" y="431.50"></text></g><g><title>XPending (16 samples, 0.01%)</title><rect x="98.4571%" y="405" width="0.0110%" height="15" fill="rgb(226,74,18)" fg:x="143451" fg:w="16"/><text x="98.7071%" y="415.50"></text></g><g><title>_XEventsQueued (16 samples, 0.01%)</title><rect x="98.4571%" y="389" width="0.0110%" height="15" fill="rgb(225,67,54)" fg:x="143451" fg:w="16"/><text x="98.7071%" y="399.50"></text></g><g><title>[libX11.so.6.4.0] (16 samples, 0.01%)</title><rect x="98.4571%" y="373" width="0.0110%" height="15" fill="rgb(251,92,32)" fg:x="143451" fg:w="16"/><text x="98.7071%" y="383.50"></text></g><g><title>wgpu::Instance::new (22 samples, 0.02%)</title><rect x="98.4708%" y="725" width="0.0151%" height="15" fill="rgb(228,149,22)" fg:x="143471" fg:w="22"/><text x="98.7208%" y="735.50"></text></g><g><title>&lt;wgpu::backend::direct::Context as wgpu::context::Context&gt;::init (22 samples, 0.02%)</title><rect x="98.4708%" y="709" width="0.0151%" height="15" fill="rgb(243,54,13)" fg:x="143471" fg:w="22"/><text x="98.7208%" y="719.50"></text></g><g><title>wgpu_core::hub::Global&lt;G&gt;::new (22 samples, 0.02%)</title><rect x="98.4708%" y="693" width="0.0151%" height="15" fill="rgb(243,180,28)" fg:x="143471" fg:w="22"/><text x="98.7208%" y="703.50"></text></g><g><title>wgpu_core::instance::Instance::new (22 samples, 0.02%)</title><rect x="98.4708%" y="677" width="0.0151%" height="15" fill="rgb(208,167,24)" fg:x="143471" fg:w="22"/><text x="98.7208%" y="687.50"></text></g><g><title>wgpu_core::instance::Instance::new::init (22 samples, 0.02%)</title><rect x="98.4708%" y="661" width="0.0151%" height="15" fill="rgb(245,73,45)" fg:x="143471" fg:w="22"/><text x="98.7208%" y="671.50"></text></g><g><title>wgpu_hal::vulkan::instance::&lt;impl wgpu_hal::Instance&lt;wgpu_hal::vulkan::Api&gt; for wgpu_hal::vulkan::Instance&gt;::init (22 samples, 0.02%)</title><rect x="98.4708%" y="645" width="0.0151%" height="15" fill="rgb(237,203,48)" fg:x="143471" fg:w="22"/><text x="98.7208%" y="655.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (30 samples, 0.02%)</title><rect x="98.5086%" y="437" width="0.0206%" height="15" fill="rgb(211,197,16)" fg:x="143526" fg:w="30"/><text x="98.7586%" y="447.50"></text></g><g><title>__GI___ioctl (15 samples, 0.01%)</title><rect x="98.5189%" y="421" width="0.0103%" height="15" fill="rgb(243,99,51)" fg:x="143541" fg:w="15"/><text x="98.7689%" y="431.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="98.5189%" y="405" width="0.0103%" height="15" fill="rgb(215,123,29)" fg:x="143541" fg:w="15"/><text x="98.7689%" y="415.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (31 samples, 0.02%)</title><rect x="98.5086%" y="453" width="0.0213%" height="15" fill="rgb(239,186,37)" fg:x="143526" fg:w="31"/><text x="98.7586%" y="463.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (33 samples, 0.02%)</title><rect x="98.5086%" y="469" width="0.0226%" height="15" fill="rgb(252,136,39)" fg:x="143526" fg:w="33"/><text x="98.7586%" y="479.50"></text></g><g><title>wgpu_core::instance::Adapter&lt;A&gt;::create_device (42 samples, 0.03%)</title><rect x="98.5072%" y="725" width="0.0288%" height="15" fill="rgb(223,213,32)" fg:x="143524" fg:w="42"/><text x="98.7572%" y="735.50"></text></g><g><title>wgpu_hal::vulkan::adapter::&lt;impl wgpu_hal::Adapter&lt;wgpu_hal::vulkan::Api&gt; for wgpu_hal::vulkan::Adapter&gt;::open (42 samples, 0.03%)</title><rect x="98.5072%" y="709" width="0.0288%" height="15" fill="rgb(233,115,5)" fg:x="143524" fg:w="42"/><text x="98.7572%" y="719.50"></text></g><g><title>ash::instance::Instance::create_device (42 samples, 0.03%)</title><rect x="98.5072%" y="693" width="0.0288%" height="15" fill="rgb(207,226,44)" fg:x="143524" fg:w="42"/><text x="98.7572%" y="703.50"></text></g><g><title>vkCreateDevice (42 samples, 0.03%)</title><rect x="98.5072%" y="677" width="0.0288%" height="15" fill="rgb(208,126,0)" fg:x="143524" fg:w="42"/><text x="98.7572%" y="687.50"></text></g><g><title>[libvulkan.so.1.3.204] (42 samples, 0.03%)</title><rect x="98.5072%" y="661" width="0.0288%" height="15" fill="rgb(244,66,21)" fg:x="143524" fg:w="42"/><text x="98.7572%" y="671.50"></text></g><g><title>[libvulkan.so.1.3.204] (41 samples, 0.03%)</title><rect x="98.5079%" y="645" width="0.0281%" height="15" fill="rgb(222,97,12)" fg:x="143525" fg:w="41"/><text x="98.7579%" y="655.50"></text></g><g><title>[libvulkan.so.1.3.204] (41 samples, 0.03%)</title><rect x="98.5079%" y="629" width="0.0281%" height="15" fill="rgb(219,213,19)" fg:x="143525" fg:w="41"/><text x="98.7579%" y="639.50"></text></g><g><title>[libGLX_nvidia.so.530.30.02] (41 samples, 0.03%)</title><rect x="98.5079%" y="613" width="0.0281%" height="15" fill="rgb(252,169,30)" fg:x="143525" fg:w="41"/><text x="98.7579%" y="623.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (41 samples, 0.03%)</title><rect x="98.5079%" y="597" width="0.0281%" height="15" fill="rgb(206,32,51)" fg:x="143525" fg:w="41"/><text x="98.7579%" y="607.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (41 samples, 0.03%)</title><rect x="98.5079%" y="581" width="0.0281%" height="15" fill="rgb(250,172,42)" fg:x="143525" fg:w="41"/><text x="98.7579%" y="591.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (41 samples, 0.03%)</title><rect x="98.5079%" y="565" width="0.0281%" height="15" fill="rgb(209,34,43)" fg:x="143525" fg:w="41"/><text x="98.7579%" y="575.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (41 samples, 0.03%)</title><rect x="98.5079%" y="549" width="0.0281%" height="15" fill="rgb(223,11,35)" fg:x="143525" fg:w="41"/><text x="98.7579%" y="559.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (41 samples, 0.03%)</title><rect x="98.5079%" y="533" width="0.0281%" height="15" fill="rgb(251,219,26)" fg:x="143525" fg:w="41"/><text x="98.7579%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (41 samples, 0.03%)</title><rect x="98.5079%" y="517" width="0.0281%" height="15" fill="rgb(231,119,3)" fg:x="143525" fg:w="41"/><text x="98.7579%" y="527.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (41 samples, 0.03%)</title><rect x="98.5079%" y="501" width="0.0281%" height="15" fill="rgb(216,97,11)" fg:x="143525" fg:w="41"/><text x="98.7579%" y="511.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (41 samples, 0.03%)</title><rect x="98.5079%" y="485" width="0.0281%" height="15" fill="rgb(223,59,9)" fg:x="143525" fg:w="41"/><text x="98.7579%" y="495.50"></text></g><g><title>[unknown] (142,006 samples, 97.47%)</title><rect x="1.0988%" y="741" width="97.4653%" height="15" fill="rgb(233,93,31)" fg:x="1601" fg:w="142006"/><text x="1.3488%" y="751.50">[unknown]</text></g><g><title>[libnvidia-glcore.so.530.30.02] (19 samples, 0.01%)</title><rect x="98.5971%" y="645" width="0.0130%" height="15" fill="rgb(239,81,33)" fg:x="143655" fg:w="19"/><text x="98.8471%" y="655.50"></text></g><g><title>__GI___clock_gettime (18 samples, 0.01%)</title><rect x="98.6101%" y="645" width="0.0124%" height="15" fill="rgb(213,120,34)" fg:x="143674" fg:w="18"/><text x="98.8601%" y="655.50"></text></g><g><title>[unknown] (80 samples, 0.05%)</title><rect x="98.6239%" y="565" width="0.0549%" height="15" fill="rgb(243,49,53)" fg:x="143694" fg:w="80"/><text x="98.8739%" y="575.50"></text></g><g><title>[unknown] (75 samples, 0.05%)</title><rect x="98.6273%" y="549" width="0.0515%" height="15" fill="rgb(247,216,33)" fg:x="143699" fg:w="75"/><text x="98.8773%" y="559.50"></text></g><g><title>[unknown] (73 samples, 0.05%)</title><rect x="98.6287%" y="533" width="0.0501%" height="15" fill="rgb(226,26,14)" fg:x="143701" fg:w="73"/><text x="98.8787%" y="543.50"></text></g><g><title>[unknown] (70 samples, 0.05%)</title><rect x="98.6307%" y="517" width="0.0480%" height="15" fill="rgb(215,49,53)" fg:x="143704" fg:w="70"/><text x="98.8807%" y="527.50"></text></g><g><title>[unknown] (68 samples, 0.05%)</title><rect x="98.6321%" y="501" width="0.0467%" height="15" fill="rgb(245,162,40)" fg:x="143706" fg:w="68"/><text x="98.8821%" y="511.50"></text></g><g><title>[unknown] (65 samples, 0.04%)</title><rect x="98.6342%" y="485" width="0.0446%" height="15" fill="rgb(229,68,17)" fg:x="143709" fg:w="65"/><text x="98.8842%" y="495.50"></text></g><g><title>[unknown] (53 samples, 0.04%)</title><rect x="98.6424%" y="469" width="0.0364%" height="15" fill="rgb(213,182,10)" fg:x="143721" fg:w="53"/><text x="98.8924%" y="479.50"></text></g><g><title>[unknown] (50 samples, 0.03%)</title><rect x="98.6445%" y="453" width="0.0343%" height="15" fill="rgb(245,125,30)" fg:x="143724" fg:w="50"/><text x="98.8945%" y="463.50"></text></g><g><title>[unknown] (41 samples, 0.03%)</title><rect x="98.6506%" y="437" width="0.0281%" height="15" fill="rgb(232,202,2)" fg:x="143733" fg:w="41"/><text x="98.9006%" y="447.50"></text></g><g><title>[unknown] (39 samples, 0.03%)</title><rect x="98.6520%" y="421" width="0.0268%" height="15" fill="rgb(237,140,51)" fg:x="143735" fg:w="39"/><text x="98.9020%" y="431.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="98.6561%" y="405" width="0.0226%" height="15" fill="rgb(236,157,25)" fg:x="143741" fg:w="33"/><text x="98.9061%" y="415.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="98.6616%" y="389" width="0.0172%" height="15" fill="rgb(219,209,0)" fg:x="143749" fg:w="25"/><text x="98.9116%" y="399.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="98.6644%" y="373" width="0.0144%" height="15" fill="rgb(240,116,54)" fg:x="143753" fg:w="21"/><text x="98.9144%" y="383.50"></text></g><g><title>__GI___futex_abstimed_wait_cancelable64 (82 samples, 0.06%)</title><rect x="98.6232%" y="613" width="0.0563%" height="15" fill="rgb(216,10,36)" fg:x="143693" fg:w="82"/><text x="98.8732%" y="623.50"></text></g><g><title>__futex_abstimed_wait_common (82 samples, 0.06%)</title><rect x="98.6232%" y="597" width="0.0563%" height="15" fill="rgb(222,72,44)" fg:x="143693" fg:w="82"/><text x="98.8732%" y="607.50"></text></g><g><title>__futex_abstimed_wait_common64 (82 samples, 0.06%)</title><rect x="98.6232%" y="581" width="0.0563%" height="15" fill="rgb(232,159,9)" fg:x="143693" fg:w="82"/><text x="98.8732%" y="591.50"></text></g><g><title>___pthread_cond_timedwait64 (84 samples, 0.06%)</title><rect x="98.6225%" y="645" width="0.0577%" height="15" fill="rgb(210,39,32)" fg:x="143692" fg:w="84"/><text x="98.8725%" y="655.50"></text></g><g><title>__pthread_cond_wait_common (83 samples, 0.06%)</title><rect x="98.6232%" y="629" width="0.0570%" height="15" fill="rgb(216,194,45)" fg:x="143693" fg:w="83"/><text x="98.8732%" y="639.50"></text></g><g><title>___pthread_mutex_unlock (17 samples, 0.01%)</title><rect x="98.6802%" y="645" width="0.0117%" height="15" fill="rgb(218,18,35)" fg:x="143776" fg:w="17"/><text x="98.9302%" y="655.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (17 samples, 0.01%)</title><rect x="98.6802%" y="629" width="0.0117%" height="15" fill="rgb(207,83,51)" fg:x="143776" fg:w="17"/><text x="98.9302%" y="639.50"></text></g><g><title>lll_mutex_unlock_optimized (16 samples, 0.01%)</title><rect x="98.6808%" y="613" width="0.0110%" height="15" fill="rgb(225,63,43)" fg:x="143777" fg:w="16"/><text x="98.9308%" y="623.50"></text></g><g><title>__GI___lll_lock_wake (16 samples, 0.01%)</title><rect x="98.6808%" y="597" width="0.0110%" height="15" fill="rgb(207,57,36)" fg:x="143777" fg:w="16"/><text x="98.9308%" y="607.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="98.6808%" y="581" width="0.0110%" height="15" fill="rgb(216,99,33)" fg:x="143777" fg:w="16"/><text x="98.9308%" y="591.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="98.6808%" y="565" width="0.0110%" height="15" fill="rgb(225,42,16)" fg:x="143777" fg:w="16"/><text x="98.9308%" y="575.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="98.6808%" y="549" width="0.0110%" height="15" fill="rgb(220,201,45)" fg:x="143777" fg:w="16"/><text x="98.9308%" y="559.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (158 samples, 0.11%)</title><rect x="98.5848%" y="661" width="0.1084%" height="15" fill="rgb(225,33,4)" fg:x="143637" fg:w="158"/><text x="98.8348%" y="671.50"></text></g><g><title>[unknown] (80 samples, 0.05%)</title><rect x="98.6980%" y="645" width="0.0549%" height="15" fill="rgb(224,33,50)" fg:x="143802" fg:w="80"/><text x="98.9480%" y="655.50"></text></g><g><title>[unknown] (77 samples, 0.05%)</title><rect x="98.7001%" y="629" width="0.0528%" height="15" fill="rgb(246,198,51)" fg:x="143805" fg:w="77"/><text x="98.9501%" y="639.50"></text></g><g><title>[unknown] (74 samples, 0.05%)</title><rect x="98.7021%" y="613" width="0.0508%" height="15" fill="rgb(205,22,4)" fg:x="143808" fg:w="74"/><text x="98.9521%" y="623.50"></text></g><g><title>[unknown] (67 samples, 0.05%)</title><rect x="98.7069%" y="597" width="0.0460%" height="15" fill="rgb(206,3,8)" fg:x="143815" fg:w="67"/><text x="98.9569%" y="607.50"></text></g><g><title>[unknown] (64 samples, 0.04%)</title><rect x="98.7090%" y="581" width="0.0439%" height="15" fill="rgb(251,23,15)" fg:x="143818" fg:w="64"/><text x="98.9590%" y="591.50"></text></g><g><title>[unknown] (57 samples, 0.04%)</title><rect x="98.7138%" y="565" width="0.0391%" height="15" fill="rgb(252,88,28)" fg:x="143825" fg:w="57"/><text x="98.9638%" y="575.50"></text></g><g><title>[unknown] (53 samples, 0.04%)</title><rect x="98.7165%" y="549" width="0.0364%" height="15" fill="rgb(212,127,14)" fg:x="143829" fg:w="53"/><text x="98.9665%" y="559.50"></text></g><g><title>[unknown] (48 samples, 0.03%)</title><rect x="98.7200%" y="533" width="0.0329%" height="15" fill="rgb(247,145,37)" fg:x="143834" fg:w="48"/><text x="98.9700%" y="543.50"></text></g><g><title>[unknown] (36 samples, 0.02%)</title><rect x="98.7282%" y="517" width="0.0247%" height="15" fill="rgb(209,117,53)" fg:x="143846" fg:w="36"/><text x="98.9782%" y="527.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="98.7357%" y="501" width="0.0172%" height="15" fill="rgb(212,90,42)" fg:x="143857" fg:w="25"/><text x="98.9857%" y="511.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="98.7385%" y="485" width="0.0144%" height="15" fill="rgb(218,164,37)" fg:x="143861" fg:w="21"/><text x="98.9885%" y="495.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="98.7426%" y="469" width="0.0103%" height="15" fill="rgb(246,65,34)" fg:x="143867" fg:w="15"/><text x="98.9926%" y="479.50"></text></g><g><title>__GI___close (88 samples, 0.06%)</title><rect x="98.6932%" y="661" width="0.0604%" height="15" fill="rgb(231,100,33)" fg:x="143795" fg:w="88"/><text x="98.9432%" y="671.50"></text></g><g><title>[unknown] (686 samples, 0.47%)</title><rect x="98.7536%" y="629" width="0.4708%" height="15" fill="rgb(228,126,14)" fg:x="143883" fg:w="686"/><text x="99.0036%" y="639.50"></text></g><g><title>[unknown] (678 samples, 0.47%)</title><rect x="98.7591%" y="613" width="0.4653%" height="15" fill="rgb(215,173,21)" fg:x="143891" fg:w="678"/><text x="99.0091%" y="623.50"></text></g><g><title>[unknown] (674 samples, 0.46%)</title><rect x="98.7618%" y="597" width="0.4626%" height="15" fill="rgb(210,6,40)" fg:x="143895" fg:w="674"/><text x="99.0118%" y="607.50"></text></g><g><title>[unknown] (670 samples, 0.46%)</title><rect x="98.7646%" y="581" width="0.4599%" height="15" fill="rgb(212,48,18)" fg:x="143899" fg:w="670"/><text x="99.0146%" y="591.50"></text></g><g><title>[unknown] (669 samples, 0.46%)</title><rect x="98.7653%" y="565" width="0.4592%" height="15" fill="rgb(230,214,11)" fg:x="143900" fg:w="669"/><text x="99.0153%" y="575.50"></text></g><g><title>[unknown] (660 samples, 0.45%)</title><rect x="98.7714%" y="549" width="0.4530%" height="15" fill="rgb(254,105,39)" fg:x="143909" fg:w="660"/><text x="99.0214%" y="559.50"></text></g><g><title>[unknown] (653 samples, 0.45%)</title><rect x="98.7762%" y="533" width="0.4482%" height="15" fill="rgb(245,158,5)" fg:x="143916" fg:w="653"/><text x="99.0262%" y="543.50"></text></g><g><title>[unknown] (647 samples, 0.44%)</title><rect x="98.7804%" y="517" width="0.4441%" height="15" fill="rgb(249,208,11)" fg:x="143922" fg:w="647"/><text x="99.0304%" y="527.50"></text></g><g><title>[unknown] (636 samples, 0.44%)</title><rect x="98.7879%" y="501" width="0.4365%" height="15" fill="rgb(210,39,28)" fg:x="143933" fg:w="636"/><text x="99.0379%" y="511.50"></text></g><g><title>[unknown] (507 samples, 0.35%)</title><rect x="98.8765%" y="485" width="0.3480%" height="15" fill="rgb(211,56,53)" fg:x="144062" fg:w="507"/><text x="99.1265%" y="495.50"></text></g><g><title>[unknown] (231 samples, 0.16%)</title><rect x="99.0659%" y="469" width="0.1585%" height="15" fill="rgb(226,201,30)" fg:x="144338" fg:w="231"/><text x="99.3159%" y="479.50"></text></g><g><title>[unknown] (140 samples, 0.10%)</title><rect x="99.1283%" y="453" width="0.0961%" height="15" fill="rgb(239,101,34)" fg:x="144429" fg:w="140"/><text x="99.3783%" y="463.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="99.2045%" y="437" width="0.0199%" height="15" fill="rgb(226,209,5)" fg:x="144540" fg:w="29"/><text x="99.4545%" y="447.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="99.2107%" y="421" width="0.0137%" height="15" fill="rgb(250,105,47)" fg:x="144549" fg:w="20"/><text x="99.4607%" y="431.50"></text></g><g><title>__GI___libc_read (687 samples, 0.47%)</title><rect x="98.7536%" y="661" width="0.4715%" height="15" fill="rgb(230,72,3)" fg:x="143883" fg:w="687"/><text x="99.0036%" y="671.50"></text></g><g><title>__GI___libc_read (687 samples, 0.47%)</title><rect x="98.7536%" y="645" width="0.4715%" height="15" fill="rgb(232,218,39)" fg:x="143883" fg:w="687"/><text x="99.0036%" y="655.50"></text></g><g><title>[unknown] (188 samples, 0.13%)</title><rect x="99.2299%" y="629" width="0.1290%" height="15" fill="rgb(248,166,6)" fg:x="144577" fg:w="188"/><text x="99.4799%" y="639.50"></text></g><g><title>[unknown] (174 samples, 0.12%)</title><rect x="99.2395%" y="613" width="0.1194%" height="15" fill="rgb(247,89,20)" fg:x="144591" fg:w="174"/><text x="99.4895%" y="623.50"></text></g><g><title>[unknown] (167 samples, 0.11%)</title><rect x="99.2443%" y="597" width="0.1146%" height="15" fill="rgb(248,130,54)" fg:x="144598" fg:w="167"/><text x="99.4943%" y="607.50"></text></g><g><title>[unknown] (150 samples, 0.10%)</title><rect x="99.2560%" y="581" width="0.1030%" height="15" fill="rgb(234,196,4)" fg:x="144615" fg:w="150"/><text x="99.5060%" y="591.50"></text></g><g><title>[unknown] (145 samples, 0.10%)</title><rect x="99.2594%" y="565" width="0.0995%" height="15" fill="rgb(250,143,31)" fg:x="144620" fg:w="145"/><text x="99.5094%" y="575.50"></text></g><g><title>[unknown] (126 samples, 0.09%)</title><rect x="99.2725%" y="549" width="0.0865%" height="15" fill="rgb(211,110,34)" fg:x="144639" fg:w="126"/><text x="99.5225%" y="559.50"></text></g><g><title>[unknown] (111 samples, 0.08%)</title><rect x="99.2828%" y="533" width="0.0762%" height="15" fill="rgb(215,124,48)" fg:x="144654" fg:w="111"/><text x="99.5328%" y="543.50"></text></g><g><title>[unknown] (109 samples, 0.07%)</title><rect x="99.2841%" y="517" width="0.0748%" height="15" fill="rgb(216,46,13)" fg:x="144656" fg:w="109"/><text x="99.5341%" y="527.50"></text></g><g><title>[unknown] (90 samples, 0.06%)</title><rect x="99.2972%" y="501" width="0.0618%" height="15" fill="rgb(205,184,25)" fg:x="144675" fg:w="90"/><text x="99.5472%" y="511.50"></text></g><g><title>[unknown] (78 samples, 0.05%)</title><rect x="99.3054%" y="485" width="0.0535%" height="15" fill="rgb(228,1,10)" fg:x="144687" fg:w="78"/><text x="99.5554%" y="495.50"></text></g><g><title>[unknown] (52 samples, 0.04%)</title><rect x="99.3233%" y="469" width="0.0357%" height="15" fill="rgb(213,116,27)" fg:x="144713" fg:w="52"/><text x="99.5733%" y="479.50"></text></g><g><title>[unknown] (42 samples, 0.03%)</title><rect x="99.3301%" y="453" width="0.0288%" height="15" fill="rgb(241,95,50)" fg:x="144723" fg:w="42"/><text x="99.5801%" y="463.50"></text></g><g><title>[unknown] (31 samples, 0.02%)</title><rect x="99.3377%" y="437" width="0.0213%" height="15" fill="rgb(238,48,32)" fg:x="144734" fg:w="31"/><text x="99.5877%" y="447.50"></text></g><g><title>__GI___nanosleep (198 samples, 0.14%)</title><rect x="99.2251%" y="661" width="0.1359%" height="15" fill="rgb(235,113,49)" fg:x="144570" fg:w="198"/><text x="99.4751%" y="671.50"></text></g><g><title>__GI___clock_nanosleep (196 samples, 0.13%)</title><rect x="99.2265%" y="645" width="0.1345%" height="15" fill="rgb(205,127,43)" fg:x="144572" fg:w="196"/><text x="99.4765%" y="655.50"></text></g><g><title>[unknown] (439 samples, 0.30%)</title><rect x="99.3631%" y="645" width="0.3013%" height="15" fill="rgb(250,162,2)" fg:x="144771" fg:w="439"/><text x="99.6131%" y="655.50"></text></g><g><title>[unknown] (425 samples, 0.29%)</title><rect x="99.3727%" y="629" width="0.2917%" height="15" fill="rgb(220,13,41)" fg:x="144785" fg:w="425"/><text x="99.6227%" y="639.50"></text></g><g><title>[unknown] (423 samples, 0.29%)</title><rect x="99.3741%" y="613" width="0.2903%" height="15" fill="rgb(249,221,25)" fg:x="144787" fg:w="423"/><text x="99.6241%" y="623.50"></text></g><g><title>[unknown] (416 samples, 0.29%)</title><rect x="99.3789%" y="597" width="0.2855%" height="15" fill="rgb(215,208,19)" fg:x="144794" fg:w="416"/><text x="99.6289%" y="607.50"></text></g><g><title>[unknown] (404 samples, 0.28%)</title><rect x="99.3871%" y="581" width="0.2773%" height="15" fill="rgb(236,175,2)" fg:x="144806" fg:w="404"/><text x="99.6371%" y="591.50"></text></g><g><title>[unknown] (395 samples, 0.27%)</title><rect x="99.3933%" y="565" width="0.2711%" height="15" fill="rgb(241,52,2)" fg:x="144815" fg:w="395"/><text x="99.6433%" y="575.50"></text></g><g><title>[unknown] (377 samples, 0.26%)</title><rect x="99.4056%" y="549" width="0.2588%" height="15" fill="rgb(248,140,14)" fg:x="144833" fg:w="377"/><text x="99.6556%" y="559.50"></text></g><g><title>[unknown] (329 samples, 0.23%)</title><rect x="99.4386%" y="533" width="0.2258%" height="15" fill="rgb(253,22,42)" fg:x="144881" fg:w="329"/><text x="99.6886%" y="543.50"></text></g><g><title>[unknown] (282 samples, 0.19%)</title><rect x="99.4708%" y="517" width="0.1935%" height="15" fill="rgb(234,61,47)" fg:x="144928" fg:w="282"/><text x="99.7208%" y="527.50"></text></g><g><title>[unknown] (199 samples, 0.14%)</title><rect x="99.5278%" y="501" width="0.1366%" height="15" fill="rgb(208,226,15)" fg:x="145011" fg:w="199"/><text x="99.7778%" y="511.50"></text></g><g><title>[unknown] (118 samples, 0.08%)</title><rect x="99.5834%" y="485" width="0.0810%" height="15" fill="rgb(217,221,4)" fg:x="145092" fg:w="118"/><text x="99.8334%" y="495.50"></text></g><g><title>[unknown] (89 samples, 0.06%)</title><rect x="99.6033%" y="469" width="0.0611%" height="15" fill="rgb(212,174,34)" fg:x="145121" fg:w="89"/><text x="99.8533%" y="479.50"></text></g><g><title>[unknown] (83 samples, 0.06%)</title><rect x="99.6074%" y="453" width="0.0570%" height="15" fill="rgb(253,83,4)" fg:x="145127" fg:w="83"/><text x="99.8574%" y="463.50"></text></g><g><title>[unknown] (75 samples, 0.05%)</title><rect x="99.6129%" y="437" width="0.0515%" height="15" fill="rgb(250,195,49)" fg:x="145135" fg:w="75"/><text x="99.8629%" y="447.50"></text></g><g><title>[unknown] (44 samples, 0.03%)</title><rect x="99.6342%" y="421" width="0.0302%" height="15" fill="rgb(241,192,25)" fg:x="145166" fg:w="44"/><text x="99.8842%" y="431.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="99.6493%" y="405" width="0.0151%" height="15" fill="rgb(208,124,10)" fg:x="145188" fg:w="22"/><text x="99.8993%" y="415.50"></text></g><g><title>__libc_open64 (447 samples, 0.31%)</title><rect x="99.3610%" y="661" width="0.3068%" height="15" fill="rgb(222,33,0)" fg:x="144768" fg:w="447"/><text x="99.6110%" y="671.50"></text></g><g><title>_IO_strfile_read (27 samples, 0.02%)</title><rect x="99.6719%" y="645" width="0.0185%" height="15" fill="rgb(234,209,28)" fg:x="145221" fg:w="27"/><text x="99.9219%" y="655.50"></text></g><g><title>_IO_str_init_static_internal (19 samples, 0.01%)</title><rect x="99.6774%" y="629" width="0.0130%" height="15" fill="rgb(224,11,23)" fg:x="145229" fg:w="19"/><text x="99.9274%" y="639.50"></text></g><g><title>__GI_____strtol_l_internal (16 samples, 0.01%)</title><rect x="99.7412%" y="629" width="0.0110%" height="15" fill="rgb(232,99,1)" fg:x="145322" fg:w="16"/><text x="99.9912%" y="639.50"></text></g><g><title>__sscanf (133 samples, 0.09%)</title><rect x="99.6678%" y="661" width="0.0913%" height="15" fill="rgb(237,95,45)" fg:x="145215" fg:w="133"/><text x="99.9178%" y="671.50"></text></g><g><title>__vfscanf_internal (100 samples, 0.07%)</title><rect x="99.6905%" y="645" width="0.0686%" height="15" fill="rgb(208,109,11)" fg:x="145248" fg:w="100"/><text x="99.9405%" y="655.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (1,768 samples, 1.21%)</title><rect x="98.5642%" y="709" width="1.2135%" height="15" fill="rgb(216,190,48)" fg:x="143607" fg:w="1768"/><text x="98.8142%" y="719.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (1,768 samples, 1.21%)</title><rect x="98.5642%" y="693" width="1.2135%" height="15" fill="rgb(251,171,36)" fg:x="143607" fg:w="1768"/><text x="98.8142%" y="703.50"></text></g><g><title>[libnvidia-glcore.so.530.30.02] (1,754 samples, 1.20%)</title><rect x="98.5738%" y="677" width="1.2039%" height="15" fill="rgb(230,62,22)" fg:x="143621" fg:w="1754"/><text x="98.8238%" y="687.50"></text></g><g><title>[unknown] (30 samples, 0.02%)</title><rect x="99.7893%" y="437" width="0.0206%" height="15" fill="rgb(225,114,35)" fg:x="145392" fg:w="30"/><text x="100.0393%" y="447.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="99.7927%" y="421" width="0.0172%" height="15" fill="rgb(215,118,42)" fg:x="145397" fg:w="25"/><text x="100.0427%" y="431.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="99.7927%" y="405" width="0.0172%" height="15" fill="rgb(243,119,21)" fg:x="145397" fg:w="25"/><text x="100.0427%" y="415.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="99.7941%" y="389" width="0.0158%" height="15" fill="rgb(252,177,53)" fg:x="145399" fg:w="23"/><text x="100.0441%" y="399.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="99.7948%" y="373" width="0.0151%" height="15" fill="rgb(237,209,29)" fg:x="145400" fg:w="22"/><text x="100.0448%" y="383.50"></text></g><g><title>[unknown] (21 samples, 0.01%)</title><rect x="99.7955%" y="357" width="0.0144%" height="15" fill="rgb(212,65,23)" fg:x="145401" fg:w="21"/><text x="100.0455%" y="367.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="99.7975%" y="341" width="0.0124%" height="15" fill="rgb(230,222,46)" fg:x="145404" fg:w="18"/><text x="100.0475%" y="351.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="99.7975%" y="325" width="0.0124%" height="15" fill="rgb(215,135,32)" fg:x="145404" fg:w="18"/><text x="100.0475%" y="335.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="99.7996%" y="309" width="0.0103%" height="15" fill="rgb(246,101,22)" fg:x="145407" fg:w="15"/><text x="100.0496%" y="319.50"></text></g><g><title>std::thread::sleep (32 samples, 0.02%)</title><rect x="99.7886%" y="501" width="0.0220%" height="15" fill="rgb(206,107,13)" fg:x="145391" fg:w="32"/><text x="100.0386%" y="511.50"></text></g><g><title>std::sys::unix::thread::Thread::sleep (32 samples, 0.02%)</title><rect x="99.7886%" y="485" width="0.0220%" height="15" fill="rgb(250,100,44)" fg:x="145391" fg:w="32"/><text x="100.0386%" y="495.50"></text></g><g><title>__GI___nanosleep (31 samples, 0.02%)</title><rect x="99.7893%" y="469" width="0.0213%" height="15" fill="rgb(231,147,38)" fg:x="145392" fg:w="31"/><text x="100.0393%" y="479.50"></text></g><g><title>__GI___clock_nanosleep (31 samples, 0.02%)</title><rect x="99.7893%" y="453" width="0.0213%" height="15" fill="rgb(229,8,40)" fg:x="145392" fg:w="31"/><text x="100.0393%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (46 samples, 0.03%)</title><rect x="99.7797%" y="693" width="0.0316%" height="15" fill="rgb(221,135,30)" fg:x="145378" fg:w="46"/><text x="100.0297%" y="703.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (46 samples, 0.03%)</title><rect x="99.7797%" y="677" width="0.0316%" height="15" fill="rgb(249,193,18)" fg:x="145378" fg:w="46"/><text x="100.0297%" y="687.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (46 samples, 0.03%)</title><rect x="99.7797%" y="661" width="0.0316%" height="15" fill="rgb(209,133,39)" fg:x="145378" fg:w="46"/><text x="100.0297%" y="671.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (46 samples, 0.03%)</title><rect x="99.7797%" y="645" width="0.0316%" height="15" fill="rgb(232,100,14)" fg:x="145378" fg:w="46"/><text x="100.0297%" y="655.50"></text></g><g><title>std::panic::catch_unwind (46 samples, 0.03%)</title><rect x="99.7797%" y="629" width="0.0316%" height="15" fill="rgb(224,185,1)" fg:x="145378" fg:w="46"/><text x="100.0297%" y="639.50"></text></g><g><title>std::panicking::try (46 samples, 0.03%)</title><rect x="99.7797%" y="613" width="0.0316%" height="15" fill="rgb(223,139,8)" fg:x="145378" fg:w="46"/><text x="100.0297%" y="623.50"></text></g><g><title>std::panicking::try::do_call (46 samples, 0.03%)</title><rect x="99.7797%" y="597" width="0.0316%" height="15" fill="rgb(232,213,38)" fg:x="145378" fg:w="46"/><text x="100.0297%" y="607.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (46 samples, 0.03%)</title><rect x="99.7797%" y="581" width="0.0316%" height="15" fill="rgb(207,94,22)" fg:x="145378" fg:w="46"/><text x="100.0297%" y="591.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (46 samples, 0.03%)</title><rect x="99.7797%" y="565" width="0.0316%" height="15" fill="rgb(219,183,54)" fg:x="145378" fg:w="46"/><text x="100.0297%" y="575.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (46 samples, 0.03%)</title><rect x="99.7797%" y="549" width="0.0316%" height="15" fill="rgb(216,185,54)" fg:x="145378" fg:w="46"/><text x="100.0297%" y="559.50"></text></g><g><title>gilrs::ff::server::init::{{closure}} (34 samples, 0.02%)</title><rect x="99.7879%" y="533" width="0.0233%" height="15" fill="rgb(254,217,39)" fg:x="145390" fg:w="34"/><text x="100.0379%" y="543.50"></text></g><g><title>gilrs::ff::server::run (34 samples, 0.02%)</title><rect x="99.7879%" y="517" width="0.0233%" height="15" fill="rgb(240,178,23)" fg:x="145390" fg:w="34"/><text x="100.0379%" y="527.50"></text></g><g><title>__clone3 (1,819 samples, 1.25%)</title><rect x="98.5642%" y="741" width="1.2485%" height="15" fill="rgb(218,11,47)" fg:x="143607" fg:w="1819"/><text x="98.8142%" y="751.50"></text></g><g><title>start_thread (1,819 samples, 1.25%)</title><rect x="98.5642%" y="725" width="1.2485%" height="15" fill="rgb(218,51,51)" fg:x="143607" fg:w="1819"/><text x="98.8142%" y="735.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (48 samples, 0.03%)</title><rect x="99.7797%" y="709" width="0.0329%" height="15" fill="rgb(238,126,27)" fg:x="145378" fg:w="48"/><text x="100.0297%" y="719.50"></text></g><g><title>neuralang (145,103 samples, 99.59%)</title><rect x="0.2375%" y="757" width="99.5909%" height="15" fill="rgb(249,202,22)" fg:x="346" fg:w="145103"/><text x="0.4875%" y="767.50">neuralang</text></g><g><title>__GI___libc_write (24 samples, 0.02%)</title><rect x="99.8579%" y="501" width="0.0165%" height="15" fill="rgb(254,195,49)" fg:x="145492" fg:w="24"/><text x="100.1079%" y="511.50"></text></g><g><title>__GI___libc_write (24 samples, 0.02%)</title><rect x="99.8579%" y="485" width="0.0165%" height="15" fill="rgb(208,123,14)" fg:x="145492" fg:w="24"/><text x="100.1079%" y="495.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="99.8579%" y="469" width="0.0165%" height="15" fill="rgb(224,200,8)" fg:x="145492" fg:w="24"/><text x="100.1079%" y="479.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="99.8593%" y="453" width="0.0151%" height="15" fill="rgb(217,61,36)" fg:x="145494" fg:w="22"/><text x="100.1093%" y="463.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="99.8593%" y="437" width="0.0151%" height="15" fill="rgb(206,35,45)" fg:x="145494" fg:w="22"/><text x="100.1093%" y="447.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="99.8607%" y="421" width="0.0137%" height="15" fill="rgb(217,65,33)" fg:x="145496" fg:w="20"/><text x="100.1107%" y="431.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="99.8607%" y="405" width="0.0137%" height="15" fill="rgb(222,158,48)" fg:x="145496" fg:w="20"/><text x="100.1107%" y="415.50"></text></g><g><title>[unknown] (18 samples, 0.01%)</title><rect x="99.8620%" y="389" width="0.0124%" height="15" fill="rgb(254,2,54)" fg:x="145498" fg:w="18"/><text x="100.1120%" y="399.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="99.8627%" y="373" width="0.0117%" height="15" fill="rgb(250,143,38)" fg:x="145499" fg:w="17"/><text x="100.1127%" y="383.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="99.8634%" y="357" width="0.0110%" height="15" fill="rgb(248,25,0)" fg:x="145500" fg:w="16"/><text x="100.1134%" y="367.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (35 samples, 0.02%)</title><rect x="99.8511%" y="517" width="0.0240%" height="15" fill="rgb(206,152,27)" fg:x="145482" fg:w="35"/><text x="100.1011%" y="527.50"></text></g><g><title>[libpulse.so.0.24.1] (38 samples, 0.03%)</title><rect x="99.8497%" y="533" width="0.0261%" height="15" fill="rgb(240,77,30)" fg:x="145480" fg:w="38"/><text x="100.0997%" y="543.50"></text></g><g><title>[libpulse.so.0.24.1] (44 samples, 0.03%)</title><rect x="99.8469%" y="565" width="0.0302%" height="15" fill="rgb(231,5,3)" fg:x="145476" fg:w="44"/><text x="100.0969%" y="575.50"></text></g><g><title>pa_pdispatch_run (41 samples, 0.03%)</title><rect x="99.8490%" y="549" width="0.0281%" height="15" fill="rgb(207,226,32)" fg:x="145479" fg:w="41"/><text x="100.0990%" y="559.50"></text></g><g><title>[libpulsecommon-15.99.so] (62 samples, 0.04%)</title><rect x="99.8456%" y="581" width="0.0426%" height="15" fill="rgb(222,207,47)" fg:x="145474" fg:w="62"/><text x="100.0956%" y="591.50"></text></g><g><title>[libpulsecommon-15.99.so] (64 samples, 0.04%)</title><rect x="99.8449%" y="597" width="0.0439%" height="15" fill="rgb(229,115,45)" fg:x="145473" fg:w="64"/><text x="100.0949%" y="607.50"></text></g><g><title>[libpulsecommon-15.99.so] (83 samples, 0.06%)</title><rect x="99.8428%" y="613" width="0.0570%" height="15" fill="rgb(224,191,6)" fg:x="145470" fg:w="83"/><text x="100.0928%" y="623.50"></text></g><g><title>[libpulsecommon-15.99.so] (91 samples, 0.06%)</title><rect x="99.8428%" y="629" width="0.0625%" height="15" fill="rgb(230,227,24)" fg:x="145470" fg:w="91"/><text x="100.0928%" y="639.50"></text></g><g><title>pa_mainloop_dispatch (107 samples, 0.07%)</title><rect x="99.8387%" y="645" width="0.0734%" height="15" fill="rgb(228,80,19)" fg:x="145464" fg:w="107"/><text x="100.0887%" y="655.50"></text></g><g><title>__GI___poll (88 samples, 0.06%)</title><rect x="99.9163%" y="613" width="0.0604%" height="15" fill="rgb(247,229,0)" fg:x="145577" fg:w="88"/><text x="100.1663%" y="623.50"></text></g><g><title>[unknown] (87 samples, 0.06%)</title><rect x="99.9170%" y="597" width="0.0597%" height="15" fill="rgb(237,194,15)" fg:x="145578" fg:w="87"/><text x="100.1670%" y="607.50"></text></g><g><title>[unknown] (81 samples, 0.06%)</title><rect x="99.9211%" y="581" width="0.0556%" height="15" fill="rgb(219,203,20)" fg:x="145584" fg:w="81"/><text x="100.1711%" y="591.50"></text></g><g><title>[unknown] (80 samples, 0.05%)</title><rect x="99.9218%" y="565" width="0.0549%" height="15" fill="rgb(234,128,8)" fg:x="145585" fg:w="80"/><text x="100.1718%" y="575.50"></text></g><g><title>[unknown] (76 samples, 0.05%)</title><rect x="99.9245%" y="549" width="0.0522%" height="15" fill="rgb(248,202,8)" fg:x="145589" fg:w="76"/><text x="100.1745%" y="559.50"></text></g><g><title>[unknown] (74 samples, 0.05%)</title><rect x="99.9259%" y="533" width="0.0508%" height="15" fill="rgb(206,104,37)" fg:x="145591" fg:w="74"/><text x="100.1759%" y="543.50"></text></g><g><title>[unknown] (70 samples, 0.05%)</title><rect x="99.9286%" y="517" width="0.0480%" height="15" fill="rgb(223,8,27)" fg:x="145595" fg:w="70"/><text x="100.1786%" y="527.50"></text></g><g><title>[unknown] (64 samples, 0.04%)</title><rect x="99.9327%" y="501" width="0.0439%" height="15" fill="rgb(216,217,28)" fg:x="145601" fg:w="64"/><text x="100.1827%" y="511.50"></text></g><g><title>[unknown] (55 samples, 0.04%)</title><rect x="99.9389%" y="485" width="0.0377%" height="15" fill="rgb(249,199,1)" fg:x="145610" fg:w="55"/><text x="100.1889%" y="495.50"></text></g><g><title>[unknown] (52 samples, 0.04%)</title><rect x="99.9410%" y="469" width="0.0357%" height="15" fill="rgb(240,85,17)" fg:x="145613" fg:w="52"/><text x="100.1910%" y="479.50"></text></g><g><title>[unknown] (47 samples, 0.03%)</title><rect x="99.9444%" y="453" width="0.0323%" height="15" fill="rgb(206,108,45)" fg:x="145618" fg:w="47"/><text x="100.1944%" y="463.50"></text></g><g><title>[unknown] (45 samples, 0.03%)</title><rect x="99.9458%" y="437" width="0.0309%" height="15" fill="rgb(245,210,41)" fg:x="145620" fg:w="45"/><text x="100.1958%" y="447.50"></text></g><g><title>[unknown] (39 samples, 0.03%)</title><rect x="99.9499%" y="421" width="0.0268%" height="15" fill="rgb(206,13,37)" fg:x="145626" fg:w="39"/><text x="100.1999%" y="431.50"></text></g><g><title>[unknown] (39 samples, 0.03%)</title><rect x="99.9499%" y="405" width="0.0268%" height="15" fill="rgb(250,61,18)" fg:x="145626" fg:w="39"/><text x="100.1999%" y="415.50"></text></g><g><title>[unknown] (38 samples, 0.03%)</title><rect x="99.9506%" y="389" width="0.0261%" height="15" fill="rgb(235,172,48)" fg:x="145627" fg:w="38"/><text x="100.2006%" y="399.50"></text></g><g><title>pa_mainloop_poll (103 samples, 0.07%)</title><rect x="99.9121%" y="645" width="0.0707%" height="15" fill="rgb(249,201,17)" fg:x="145571" fg:w="103"/><text x="100.1621%" y="655.50"></text></g><g><title>[libpulse.so.0.24.1] (103 samples, 0.07%)</title><rect x="99.9121%" y="629" width="0.0707%" height="15" fill="rgb(219,208,6)" fg:x="145571" fg:w="103"/><text x="100.1621%" y="639.50"></text></g><g><title>threaded-ml (238 samples, 0.16%)</title><rect x="99.8318%" y="757" width="0.1634%" height="15" fill="rgb(248,31,23)" fg:x="145454" fg:w="238"/><text x="100.0818%" y="767.50"></text></g><g><title>__clone3 (228 samples, 0.16%)</title><rect x="99.8387%" y="741" width="0.1565%" height="15" fill="rgb(245,15,42)" fg:x="145464" fg:w="228"/><text x="100.0887%" y="751.50"></text></g><g><title>start_thread (228 samples, 0.16%)</title><rect x="99.8387%" y="725" width="0.1565%" height="15" fill="rgb(222,217,39)" fg:x="145464" fg:w="228"/><text x="100.0887%" y="735.50"></text></g><g><title>[libpulsecommon-15.99.so] (228 samples, 0.16%)</title><rect x="99.8387%" y="709" width="0.1565%" height="15" fill="rgb(210,219,27)" fg:x="145464" fg:w="228"/><text x="100.0887%" y="719.50"></text></g><g><title>[libpulse.so.0.24.1] (228 samples, 0.16%)</title><rect x="99.8387%" y="693" width="0.1565%" height="15" fill="rgb(252,166,36)" fg:x="145464" fg:w="228"/><text x="100.0887%" y="703.50"></text></g><g><title>pa_mainloop_run (228 samples, 0.16%)</title><rect x="99.8387%" y="677" width="0.1565%" height="15" fill="rgb(245,132,34)" fg:x="145464" fg:w="228"/><text x="100.0887%" y="687.50"></text></g><g><title>pa_mainloop_iterate (228 samples, 0.16%)</title><rect x="99.8387%" y="661" width="0.1565%" height="15" fill="rgb(236,54,3)" fg:x="145464" fg:w="228"/><text x="100.0887%" y="671.50"></text></g><g><title>pa_mainloop_prepare (18 samples, 0.01%)</title><rect x="99.9828%" y="645" width="0.0124%" height="15" fill="rgb(241,173,43)" fg:x="145674" fg:w="18"/><text x="100.2328%" y="655.50"></text></g><g><title>all (145,699 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(215,190,9)" fg:x="0" fg:w="145699"/><text x="0.2500%" y="783.50"></text></g></svg></svg>