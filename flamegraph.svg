<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="741.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="741.00"> </text><svg id="frames" x="10" width="1180" total_samples="22577"><g><title>__ieee754_fmod (44 samples, 0.19%)</title><rect x="0.0221%" y="661" width="0.1949%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="44"/><text x="0.2721%" y="671.50"></text></g><g><title>__sincos (305 samples, 1.35%)</title><rect x="0.2170%" y="661" width="1.3509%" height="15" fill="rgb(217,0,24)" fg:x="49" fg:w="305"/><text x="0.4670%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (5 samples, 0.02%)</title><rect x="1.5724%" y="661" width="0.0221%" height="15" fill="rgb(221,193,54)" fg:x="355" fg:w="5"/><text x="1.8224%" y="671.50"></text></g><g><title>neuralang::World::move_balls (58 samples, 0.26%)</title><rect x="1.5945%" y="613" width="0.2569%" height="15" fill="rgb(248,212,6)" fg:x="360" fg:w="58"/><text x="1.8445%" y="623.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (58 samples, 0.26%)</title><rect x="1.5945%" y="597" width="0.2569%" height="15" fill="rgb(208,68,35)" fg:x="360" fg:w="58"/><text x="1.8445%" y="607.50"></text></g><g><title>neuralang::World::move_balls::{{closure}} (58 samples, 0.26%)</title><rect x="1.5945%" y="581" width="0.2569%" height="15" fill="rgb(232,128,0)" fg:x="360" fg:w="58"/><text x="1.8445%" y="591.50"></text></g><g><title>neuralang::dir_from_theta (58 samples, 0.26%)</title><rect x="1.5945%" y="565" width="0.2569%" height="15" fill="rgb(207,160,47)" fg:x="360" fg:w="58"/><text x="1.8445%" y="575.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::cos (58 samples, 0.26%)</title><rect x="1.5945%" y="549" width="0.2569%" height="15" fill="rgb(228,23,34)" fg:x="360" fg:w="58"/><text x="1.8445%" y="559.50"></text></g><g><title>[unknown] (452 samples, 2.00%)</title><rect x="0.0000%" y="677" width="2.0020%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="452"/><text x="0.2500%" y="687.50">[..</text></g><g><title>neuralang::main (92 samples, 0.41%)</title><rect x="1.5945%" y="661" width="0.4075%" height="15" fill="rgb(220,122,19)" fg:x="360" fg:w="92"/><text x="1.8445%" y="671.50"></text></g><g><title>neuralang::run (92 samples, 0.41%)</title><rect x="1.5945%" y="645" width="0.4075%" height="15" fill="rgb(250,228,42)" fg:x="360" fg:w="92"/><text x="1.8445%" y="655.50"></text></g><g><title>neuralang::World::step (92 samples, 0.41%)</title><rect x="1.5945%" y="629" width="0.4075%" height="15" fill="rgb(240,193,28)" fg:x="360" fg:w="92"/><text x="1.8445%" y="639.50"></text></g><g><title>neuralang::World::update_cells (34 samples, 0.15%)</title><rect x="1.8514%" y="613" width="0.1506%" height="15" fill="rgb(216,20,37)" fg:x="418" fg:w="34"/><text x="2.1014%" y="623.50"></text></g><g><title>neuralang::pos_to_cell (28 samples, 0.12%)</title><rect x="1.8780%" y="597" width="0.1240%" height="15" fill="rgb(206,188,39)" fg:x="424" fg:w="28"/><text x="2.1280%" y="607.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (781 samples, 3.46%)</title><rect x="16.7959%" y="357" width="3.4593%" height="15" fill="rgb(217,207,13)" fg:x="3792" fg:w="781"/><text x="17.0459%" y="367.50">&lt;&amp;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (781 samples, 3.46%)</title><rect x="16.7959%" y="341" width="3.4593%" height="15" fill="rgb(231,73,38)" fg:x="3792" fg:w="781"/><text x="17.0459%" y="351.50">&lt;al..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (263 samples, 1.16%)</title><rect x="20.2551%" y="325" width="1.1649%" height="15" fill="rgb(225,20,46)" fg:x="4573" fg:w="263"/><text x="20.5051%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (310 samples, 1.37%)</title><rect x="20.2551%" y="357" width="1.3731%" height="15" fill="rgb(210,31,41)" fg:x="4573" fg:w="310"/><text x="20.5051%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (310 samples, 1.37%)</title><rect x="20.2551%" y="341" width="1.3731%" height="15" fill="rgb(221,200,47)" fg:x="4573" fg:w="310"/><text x="20.5051%" y="351.50"></text></g><g><title>neuralang::main (47 samples, 0.21%)</title><rect x="21.4200%" y="325" width="0.2082%" height="15" fill="rgb(226,26,5)" fg:x="4836" fg:w="47"/><text x="21.6700%" y="335.50"></text></g><g><title>&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::next (174 samples, 0.77%)</title><rect x="21.6282%" y="341" width="0.7707%" height="15" fill="rgb(249,33,26)" fg:x="4883" fg:w="174"/><text x="21.8782%" y="351.50"></text></g><g><title>core::ops::index_range::IndexRange::next_unchecked (136 samples, 0.60%)</title><rect x="21.7965%" y="325" width="0.6024%" height="15" fill="rgb(235,183,28)" fg:x="4921" fg:w="136"/><text x="22.0465%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (27 samples, 0.12%)</title><rect x="22.3989%" y="277" width="0.1196%" height="15" fill="rgb(221,5,38)" fg:x="5057" fg:w="27"/><text x="22.6489%" y="287.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (222 samples, 0.98%)</title><rect x="21.6282%" y="357" width="0.9833%" height="15" fill="rgb(247,18,42)" fg:x="4883" fg:w="222"/><text x="21.8782%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (48 samples, 0.21%)</title><rect x="22.3989%" y="341" width="0.2126%" height="15" fill="rgb(241,131,45)" fg:x="5057" fg:w="48"/><text x="22.6489%" y="351.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (48 samples, 0.21%)</title><rect x="22.3989%" y="325" width="0.2126%" height="15" fill="rgb(249,31,29)" fg:x="5057" fg:w="48"/><text x="22.6489%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (48 samples, 0.21%)</title><rect x="22.3989%" y="309" width="0.2126%" height="15" fill="rgb(225,111,53)" fg:x="5057" fg:w="48"/><text x="22.6489%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (48 samples, 0.21%)</title><rect x="22.3989%" y="293" width="0.2126%" height="15" fill="rgb(238,160,17)" fg:x="5057" fg:w="48"/><text x="22.6489%" y="303.50"></text></g><g><title>neuralang::main (21 samples, 0.09%)</title><rect x="22.5185%" y="277" width="0.0930%" height="15" fill="rgb(214,148,48)" fg:x="5084" fg:w="21"/><text x="22.7685%" y="287.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="24.7287%" y="341" width="0.0266%" height="15" fill="rgb(232,36,49)" fg:x="5583" fg:w="6"/><text x="24.9787%" y="351.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="24.7287%" y="325" width="0.0266%" height="15" fill="rgb(209,103,24)" fg:x="5583" fg:w="6"/><text x="24.9787%" y="335.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="24.7287%" y="309" width="0.0266%" height="15" fill="rgb(229,88,8)" fg:x="5583" fg:w="6"/><text x="24.9787%" y="319.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="24.7287%" y="293" width="0.0266%" height="15" fill="rgb(213,181,19)" fg:x="5583" fg:w="6"/><text x="24.9787%" y="303.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="24.7287%" y="277" width="0.0266%" height="15" fill="rgb(254,191,54)" fg:x="5583" fg:w="6"/><text x="24.9787%" y="287.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="24.7287%" y="261" width="0.0266%" height="15" fill="rgb(241,83,37)" fg:x="5583" fg:w="6"/><text x="24.9787%" y="271.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="24.7287%" y="245" width="0.0266%" height="15" fill="rgb(233,36,39)" fg:x="5583" fg:w="6"/><text x="24.9787%" y="255.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="24.7287%" y="229" width="0.0266%" height="15" fill="rgb(226,3,54)" fg:x="5583" fg:w="6"/><text x="24.9787%" y="239.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="24.7287%" y="213" width="0.0266%" height="15" fill="rgb(245,192,40)" fg:x="5583" fg:w="6"/><text x="24.9787%" y="223.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="24.7287%" y="197" width="0.0266%" height="15" fill="rgb(238,167,29)" fg:x="5583" fg:w="6"/><text x="24.9787%" y="207.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="24.7287%" y="181" width="0.0266%" height="15" fill="rgb(232,182,51)" fg:x="5583" fg:w="6"/><text x="24.9787%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="24.7331%" y="165" width="0.0221%" height="15" fill="rgb(231,60,39)" fg:x="5584" fg:w="5"/><text x="24.9831%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="24.7331%" y="149" width="0.0221%" height="15" fill="rgb(208,69,12)" fg:x="5584" fg:w="5"/><text x="24.9831%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (515 samples, 2.28%)</title><rect x="22.6115%" y="357" width="2.2811%" height="15" fill="rgb(235,93,37)" fg:x="5105" fg:w="515"/><text x="22.8615%" y="367.50">&lt;..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (31 samples, 0.14%)</title><rect x="24.7553%" y="341" width="0.1373%" height="15" fill="rgb(213,116,39)" fg:x="5589" fg:w="31"/><text x="25.0053%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (31 samples, 0.14%)</title><rect x="24.7553%" y="325" width="0.1373%" height="15" fill="rgb(222,207,29)" fg:x="5589" fg:w="31"/><text x="25.0053%" y="335.50"></text></g><g><title>neuralang::main (29 samples, 0.13%)</title><rect x="24.7641%" y="309" width="0.1284%" height="15" fill="rgb(206,96,30)" fg:x="5591" fg:w="29"/><text x="25.0141%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (69 samples, 0.31%)</title><rect x="24.9014%" y="357" width="0.3056%" height="15" fill="rgb(218,138,4)" fg:x="5622" fg:w="69"/><text x="25.1514%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (69 samples, 0.31%)</title><rect x="24.9014%" y="341" width="0.3056%" height="15" fill="rgb(250,191,14)" fg:x="5622" fg:w="69"/><text x="25.1514%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::as_ref (68 samples, 0.30%)</title><rect x="25.2071%" y="357" width="0.3012%" height="15" fill="rgb(239,60,40)" fg:x="5691" fg:w="68"/><text x="25.4571%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (17 samples, 0.08%)</title><rect x="25.5083%" y="357" width="0.0753%" height="15" fill="rgb(206,27,48)" fg:x="5759" fg:w="17"/><text x="25.7583%" y="367.50"></text></g><g><title>neuralang::add_2d (98 samples, 0.43%)</title><rect x="25.5836%" y="357" width="0.4341%" height="15" fill="rgb(225,35,8)" fg:x="5776" fg:w="98"/><text x="25.8336%" y="367.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powi (96 samples, 0.43%)</title><rect x="31.2885%" y="325" width="0.4252%" height="15" fill="rgb(250,213,24)" fg:x="7064" fg:w="96"/><text x="31.5385%" y="335.50"></text></g><g><title>neuralang::balls_collide (1,781 samples, 7.89%)</title><rect x="26.0176%" y="357" width="7.8886%" height="15" fill="rgb(247,123,22)" fg:x="5874" fg:w="1781"/><text x="26.2676%" y="367.50">neuralang::..</text></g><g><title>neuralang::dist_2d (910 samples, 4.03%)</title><rect x="29.8755%" y="341" width="4.0307%" height="15" fill="rgb(231,138,38)" fg:x="6745" fg:w="910"/><text x="30.1255%" y="351.50">neur..</text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (495 samples, 2.19%)</title><rect x="31.7137%" y="325" width="2.1925%" height="15" fill="rgb(231,145,46)" fg:x="7160" fg:w="495"/><text x="31.9637%" y="335.50">s..</text></g><g><title>neuralang::main (217 samples, 0.96%)</title><rect x="33.9062%" y="357" width="0.9612%" height="15" fill="rgb(251,118,11)" fg:x="7655" fg:w="217"/><text x="34.1562%" y="367.50"></text></g><g><title>neuralang::oob (20 samples, 0.09%)</title><rect x="34.8673%" y="357" width="0.0886%" height="15" fill="rgb(217,147,25)" fg:x="7872" fg:w="20"/><text x="35.1173%" y="367.50"></text></g><g><title>neuralang::scale_2d (24 samples, 0.11%)</title><rect x="34.9559%" y="357" width="0.1063%" height="15" fill="rgb(247,81,37)" fg:x="7892" fg:w="24"/><text x="35.2059%" y="367.50"></text></g><g><title>neuralang::two_to_one (45 samples, 0.20%)</title><rect x="35.0622%" y="357" width="0.1993%" height="15" fill="rgb(209,12,38)" fg:x="7916" fg:w="45"/><text x="35.3122%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;V&gt; as splitmut::SplitMut&lt;usize,V&gt;&gt;::get1_mut (140 samples, 0.62%)</title><rect x="35.6292%" y="341" width="0.6201%" height="15" fill="rgb(227,1,9)" fg:x="8044" fg:w="140"/><text x="35.8792%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (140 samples, 0.62%)</title><rect x="35.6292%" y="325" width="0.6201%" height="15" fill="rgb(248,47,43)" fg:x="8044" fg:w="140"/><text x="35.8792%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (140 samples, 0.62%)</title><rect x="35.6292%" y="309" width="0.6201%" height="15" fill="rgb(221,10,30)" fg:x="8044" fg:w="140"/><text x="35.8792%" y="319.50"></text></g><g><title>splitmut::check_r (27 samples, 0.12%)</title><rect x="36.2537%" y="341" width="0.1196%" height="15" fill="rgb(210,229,1)" fg:x="8185" fg:w="27"/><text x="36.5037%" y="351.50"></text></g><g><title>splitmut::from_r (13 samples, 0.06%)</title><rect x="36.3733%" y="341" width="0.0576%" height="15" fill="rgb(222,148,37)" fg:x="8212" fg:w="13"/><text x="36.6233%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (13 samples, 0.06%)</title><rect x="36.3733%" y="325" width="0.0576%" height="15" fill="rgb(234,67,33)" fg:x="8212" fg:w="13"/><text x="36.6233%" y="335.50"></text></g><g><title>neuralang::World::check_collisions (7,785 samples, 34.48%)</title><rect x="2.0065%" y="373" width="34.4820%" height="15" fill="rgb(247,98,35)" fg:x="453" fg:w="7785"/><text x="2.2565%" y="383.50">neuralang::World::check_collisions</text></g><g><title>splitmut::SplitMut::get2_mut (277 samples, 1.23%)</title><rect x="35.2615%" y="357" width="1.2269%" height="15" fill="rgb(247,138,52)" fg:x="7961" fg:w="277"/><text x="35.5115%" y="367.50"></text></g><g><title>splitmut::to_r (13 samples, 0.06%)</title><rect x="36.4309%" y="341" width="0.0576%" height="15" fill="rgb(213,79,30)" fg:x="8225" fg:w="13"/><text x="36.6809%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (13 samples, 0.06%)</title><rect x="36.4309%" y="325" width="0.0576%" height="15" fill="rgb(246,177,23)" fg:x="8225" fg:w="13"/><text x="36.6809%" y="335.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 0.27%)</title><rect x="36.4885%" y="341" width="0.2746%" height="15" fill="rgb(230,62,27)" fg:x="8238" fg:w="62"/><text x="36.7385%" y="351.50"></text></g><g><title>neuralang::add_2d (165 samples, 0.73%)</title><rect x="37.0023%" y="325" width="0.7308%" height="15" fill="rgb(216,154,8)" fg:x="8354" fg:w="165"/><text x="37.2523%" y="335.50"></text></g><g><title>neuralang::main (8 samples, 0.04%)</title><rect x="37.7331%" y="309" width="0.0354%" height="15" fill="rgb(244,35,45)" fg:x="8519" fg:w="8"/><text x="37.9831%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="40.4394%" y="277" width="0.0133%" height="15" fill="rgb(251,115,12)" fg:x="9130" fg:w="3"/><text x="40.6894%" y="287.50"></text></g><g><title>do_cos (458 samples, 2.03%)</title><rect x="40.4527%" y="277" width="2.0286%" height="15" fill="rgb(240,54,50)" fg:x="9133" fg:w="458"/><text x="40.7027%" y="287.50">d..</text></g><g><title>do_sin (4,023 samples, 17.82%)</title><rect x="42.4813%" y="277" width="17.8190%" height="15" fill="rgb(233,84,52)" fg:x="9591" fg:w="4023"/><text x="42.7313%" y="287.50">do_sin</text></g><g><title>[unknown] (12 samples, 0.05%)</title><rect x="60.2472%" y="261" width="0.0532%" height="15" fill="rgb(207,117,47)" fg:x="13602" fg:w="12"/><text x="60.4972%" y="271.50"></text></g><g><title>[unknown] (11 samples, 0.05%)</title><rect x="60.2516%" y="245" width="0.0487%" height="15" fill="rgb(249,43,39)" fg:x="13603" fg:w="11"/><text x="60.5016%" y="255.50"></text></g><g><title>[unknown] (11 samples, 0.05%)</title><rect x="60.2516%" y="229" width="0.0487%" height="15" fill="rgb(209,38,44)" fg:x="13603" fg:w="11"/><text x="60.5016%" y="239.50"></text></g><g><title>[unknown] (11 samples, 0.05%)</title><rect x="60.2516%" y="213" width="0.0487%" height="15" fill="rgb(236,212,23)" fg:x="13603" fg:w="11"/><text x="60.5016%" y="223.50"></text></g><g><title>[unknown] (11 samples, 0.05%)</title><rect x="60.2516%" y="197" width="0.0487%" height="15" fill="rgb(242,79,21)" fg:x="13603" fg:w="11"/><text x="60.5016%" y="207.50"></text></g><g><title>[unknown] (11 samples, 0.05%)</title><rect x="60.2516%" y="181" width="0.0487%" height="15" fill="rgb(211,96,35)" fg:x="13603" fg:w="11"/><text x="60.5016%" y="191.50"></text></g><g><title>[unknown] (11 samples, 0.05%)</title><rect x="60.2516%" y="165" width="0.0487%" height="15" fill="rgb(253,215,40)" fg:x="13603" fg:w="11"/><text x="60.5016%" y="175.50"></text></g><g><title>[unknown] (10 samples, 0.04%)</title><rect x="60.2560%" y="149" width="0.0443%" height="15" fill="rgb(211,81,21)" fg:x="13604" fg:w="10"/><text x="60.5060%" y="159.50"></text></g><g><title>[unknown] (9 samples, 0.04%)</title><rect x="60.2604%" y="133" width="0.0399%" height="15" fill="rgb(208,190,38)" fg:x="13605" fg:w="9"/><text x="60.5104%" y="143.50"></text></g><g><title>[unknown] (9 samples, 0.04%)</title><rect x="60.2604%" y="117" width="0.0399%" height="15" fill="rgb(235,213,38)" fg:x="13605" fg:w="9"/><text x="60.5104%" y="127.50"></text></g><g><title>[unknown] (8 samples, 0.04%)</title><rect x="60.2649%" y="101" width="0.0354%" height="15" fill="rgb(237,122,38)" fg:x="13606" fg:w="8"/><text x="60.5149%" y="111.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="60.2693%" y="85" width="0.0310%" height="15" fill="rgb(244,218,35)" fg:x="13607" fg:w="7"/><text x="60.5193%" y="95.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="60.2737%" y="69" width="0.0266%" height="15" fill="rgb(240,68,47)" fg:x="13608" fg:w="6"/><text x="60.5237%" y="79.50"></text></g><g><title>libc_feholdsetround_sse_ctx (135 samples, 0.60%)</title><rect x="60.3003%" y="277" width="0.5980%" height="15" fill="rgb(210,16,53)" fg:x="13614" fg:w="135"/><text x="60.5503%" y="287.50"></text></g><g><title>libc_feresetround_sse_ctx (59 samples, 0.26%)</title><rect x="60.8983%" y="277" width="0.2613%" height="15" fill="rgb(235,124,12)" fg:x="13749" fg:w="59"/><text x="61.1483%" y="287.50"></text></g><g><title>neuralang::dir_from_theta (6,082 samples, 26.94%)</title><rect x="37.7331%" y="325" width="26.9389%" height="15" fill="rgb(224,169,11)" fg:x="8519" fg:w="6082"/><text x="37.9831%" y="335.50">neuralang::dir_from_theta</text></g><g><title>std::f64::&lt;impl f64&gt;::cos (6,074 samples, 26.90%)</title><rect x="37.7685%" y="309" width="26.9035%" height="15" fill="rgb(250,166,2)" fg:x="8527" fg:w="6074"/><text x="38.0185%" y="319.50">std::f64::&lt;impl f64&gt;::cos</text></g><g><title>__sincos (6,061 samples, 26.85%)</title><rect x="37.8261%" y="293" width="26.8459%" height="15" fill="rgb(242,216,29)" fg:x="8540" fg:w="6061"/><text x="38.0761%" y="303.50">__sincos</text></g><g><title>reduce_sincos (793 samples, 3.51%)</title><rect x="61.1596%" y="277" width="3.5124%" height="15" fill="rgb(230,116,27)" fg:x="13808" fg:w="793"/><text x="61.4096%" y="287.50">red..</text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="64.6587%" y="261" width="0.0133%" height="15" fill="rgb(228,99,48)" fg:x="14598" fg:w="3"/><text x="64.9087%" y="271.50"></text></g><g><title>neuralang::main (126 samples, 0.56%)</title><rect x="64.6720%" y="325" width="0.5581%" height="15" fill="rgb(253,11,6)" fg:x="14601" fg:w="126"/><text x="64.9220%" y="335.50"></text></g><g><title>neuralang::oob (821 samples, 3.64%)</title><rect x="65.2301%" y="325" width="3.6364%" height="15" fill="rgb(247,143,39)" fg:x="14727" fg:w="821"/><text x="65.4801%" y="335.50">neur..</text></g><g><title>neuralang::lef_border_trespass (554 samples, 2.45%)</title><rect x="66.4127%" y="309" width="2.4538%" height="15" fill="rgb(236,97,10)" fg:x="14994" fg:w="554"/><text x="66.6627%" y="319.50">ne..</text></g><g><title>neuralang::scale_2d (232 samples, 1.03%)</title><rect x="68.8665%" y="325" width="1.0276%" height="15" fill="rgb(233,208,19)" fg:x="15548" fg:w="232"/><text x="69.1165%" y="335.50"></text></g><g><title>neuralang::World::move_balls::{{closure}} (7,488 samples, 33.17%)</title><rect x="36.7631%" y="341" width="33.1665%" height="15" fill="rgb(216,164,2)" fg:x="8300" fg:w="7488"/><text x="37.0131%" y="351.50">neuralang::World::move_balls::{{closure}}</text></g><g><title>rand::rng::Rng::sample (8 samples, 0.04%)</title><rect x="69.8941%" y="325" width="0.0354%" height="15" fill="rgb(220,129,5)" fg:x="15780" fg:w="8"/><text x="70.1441%" y="335.50"></text></g><g><title>&lt;rand::distributions::uniform::Uniform&lt;X&gt; as rand::distributions::distribution::Distribution&lt;X&gt;&gt;::sample (8 samples, 0.04%)</title><rect x="69.8941%" y="309" width="0.0354%" height="15" fill="rgb(242,17,10)" fg:x="15780" fg:w="8"/><text x="70.1441%" y="319.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformFloat&lt;f64&gt; as rand::distributions::uniform::UniformSampler&gt;::sample (8 samples, 0.04%)</title><rect x="69.8941%" y="293" width="0.0354%" height="15" fill="rgb(242,107,0)" fg:x="15780" fg:w="8"/><text x="70.1441%" y="303.50"></text></g><g><title>rand::rng::Rng::gen (6 samples, 0.03%)</title><rect x="69.9030%" y="277" width="0.0266%" height="15" fill="rgb(251,28,31)" fg:x="15782" fg:w="6"/><text x="70.1530%" y="287.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u64&gt; for rand::distributions::Standard&gt;::sample (6 samples, 0.03%)</title><rect x="69.9030%" y="261" width="0.0266%" height="15" fill="rgb(233,223,10)" fg:x="15782" fg:w="6"/><text x="70.1530%" y="271.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (6 samples, 0.03%)</title><rect x="69.9030%" y="245" width="0.0266%" height="15" fill="rgb(215,21,27)" fg:x="15782" fg:w="6"/><text x="70.1530%" y="255.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (6 samples, 0.03%)</title><rect x="69.9030%" y="229" width="0.0266%" height="15" fill="rgb(232,23,21)" fg:x="15782" fg:w="6"/><text x="70.1530%" y="239.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (6 samples, 0.03%)</title><rect x="69.9030%" y="213" width="0.0266%" height="15" fill="rgb(244,5,23)" fg:x="15782" fg:w="6"/><text x="70.1530%" y="223.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (6 samples, 0.03%)</title><rect x="69.9030%" y="197" width="0.0266%" height="15" fill="rgb(226,81,46)" fg:x="15782" fg:w="6"/><text x="70.1530%" y="207.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (6 samples, 0.03%)</title><rect x="69.9030%" y="181" width="0.0266%" height="15" fill="rgb(247,70,30)" fg:x="15782" fg:w="6"/><text x="70.1530%" y="191.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (6 samples, 0.03%)</title><rect x="69.9030%" y="165" width="0.0266%" height="15" fill="rgb(212,68,19)" fg:x="15782" fg:w="6"/><text x="70.1530%" y="175.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (6 samples, 0.03%)</title><rect x="69.9030%" y="149" width="0.0266%" height="15" fill="rgb(240,187,13)" fg:x="15782" fg:w="6"/><text x="70.1530%" y="159.50"></text></g><g><title>rand_chacha::guts::refill_wide (4 samples, 0.02%)</title><rect x="69.9119%" y="133" width="0.0177%" height="15" fill="rgb(223,113,26)" fg:x="15784" fg:w="4"/><text x="70.1619%" y="143.50"></text></g><g><title>std_detect::detect::arch::x86::__is_feature_detected::avx2 (4 samples, 0.02%)</title><rect x="69.9119%" y="117" width="0.0177%" height="15" fill="rgb(206,192,2)" fg:x="15784" fg:w="4"/><text x="70.1619%" y="127.50"></text></g><g><title>std_detect::detect::check_for (4 samples, 0.02%)</title><rect x="69.9119%" y="101" width="0.0177%" height="15" fill="rgb(241,108,4)" fg:x="15784" fg:w="4"/><text x="70.1619%" y="111.50"></text></g><g><title>std_detect::detect::cache::test (4 samples, 0.02%)</title><rect x="69.9119%" y="85" width="0.0177%" height="15" fill="rgb(247,173,49)" fg:x="15784" fg:w="4"/><text x="70.1619%" y="95.50"></text></g><g><title>std_detect::detect::cache::Cache::test (4 samples, 0.02%)</title><rect x="69.9119%" y="69" width="0.0177%" height="15" fill="rgb(224,114,35)" fg:x="15784" fg:w="4"/><text x="70.1619%" y="79.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (4 samples, 0.02%)</title><rect x="69.9119%" y="53" width="0.0177%" height="15" fill="rgb(245,159,27)" fg:x="15784" fg:w="4"/><text x="70.1619%" y="63.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.02%)</title><rect x="69.9119%" y="37" width="0.0177%" height="15" fill="rgb(245,172,44)" fg:x="15784" fg:w="4"/><text x="70.1619%" y="47.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (7,552 samples, 33.45%)</title><rect x="36.4885%" y="357" width="33.4500%" height="15" fill="rgb(236,23,11)" fg:x="8238" fg:w="7552"/><text x="36.7385%" y="367.50">&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::..</text></g><g><title>neuralang::World::move_balls (7,555 samples, 33.46%)</title><rect x="36.4885%" y="373" width="33.4633%" height="15" fill="rgb(205,117,38)" fg:x="8238" fg:w="7555"/><text x="36.7385%" y="383.50">neuralang::World::move_balls</text></g><g><title>rand::rngs::thread::thread_rng (3 samples, 0.01%)</title><rect x="69.9384%" y="357" width="0.0133%" height="15" fill="rgb(237,72,25)" fg:x="15790" fg:w="3"/><text x="70.1884%" y="367.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.01%)</title><rect x="69.9384%" y="341" width="0.0133%" height="15" fill="rgb(244,70,9)" fg:x="15790" fg:w="3"/><text x="70.1884%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.01%)</title><rect x="69.9384%" y="325" width="0.0133%" height="15" fill="rgb(217,125,39)" fg:x="15790" fg:w="3"/><text x="70.1884%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (23 samples, 0.10%)</title><rect x="70.7756%" y="357" width="0.1019%" height="15" fill="rgb(235,36,10)" fg:x="15979" fg:w="23"/><text x="71.0256%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (23 samples, 0.10%)</title><rect x="70.7756%" y="341" width="0.1019%" height="15" fill="rgb(251,123,47)" fg:x="15979" fg:w="23"/><text x="71.0256%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (23 samples, 0.10%)</title><rect x="70.7756%" y="325" width="0.1019%" height="15" fill="rgb(221,13,13)" fg:x="15979" fg:w="23"/><text x="71.0256%" y="335.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.06%)</title><rect x="70.8774%" y="357" width="0.0620%" height="15" fill="rgb(238,131,9)" fg:x="16002" fg:w="14"/><text x="71.1274%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (11 samples, 0.05%)</title><rect x="71.5241%" y="341" width="0.0487%" height="15" fill="rgb(211,50,8)" fg:x="16148" fg:w="11"/><text x="71.7741%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (11 samples, 0.05%)</title><rect x="71.5241%" y="325" width="0.0487%" height="15" fill="rgb(245,182,24)" fg:x="16148" fg:w="11"/><text x="71.7741%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (156 samples, 0.69%)</title><rect x="70.9395%" y="357" width="0.6910%" height="15" fill="rgb(242,14,37)" fg:x="16016" fg:w="156"/><text x="71.1895%" y="367.50"></text></g><g><title>core::ptr::write (13 samples, 0.06%)</title><rect x="71.5728%" y="341" width="0.0576%" height="15" fill="rgb(246,228,12)" fg:x="16159" fg:w="13"/><text x="71.8228%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (670 samples, 2.97%)</title><rect x="71.6304%" y="325" width="2.9676%" height="15" fill="rgb(213,55,15)" fg:x="16172" fg:w="670"/><text x="71.8804%" y="335.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (61 samples, 0.27%)</title><rect x="74.5980%" y="325" width="0.2702%" height="15" fill="rgb(209,9,3)" fg:x="16842" fg:w="61"/><text x="74.8480%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="77.8048%" y="309" width="0.0133%" height="15" fill="rgb(230,59,30)" fg:x="17566" fg:w="3"/><text x="78.0548%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="77.8048%" y="293" width="0.0133%" height="15" fill="rgb(209,121,21)" fg:x="17566" fg:w="3"/><text x="78.0548%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="77.8048%" y="277" width="0.0133%" height="15" fill="rgb(220,109,13)" fg:x="17566" fg:w="3"/><text x="78.0548%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="77.8048%" y="261" width="0.0133%" height="15" fill="rgb(232,18,1)" fg:x="17566" fg:w="3"/><text x="78.0548%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (13 samples, 0.06%)</title><rect x="77.8181%" y="309" width="0.0576%" height="15" fill="rgb(215,41,42)" fg:x="17569" fg:w="13"/><text x="78.0681%" y="319.50"></text></g><g><title>neuralang::World::update_cells::{{closure}} (13 samples, 0.06%)</title><rect x="77.8181%" y="293" width="0.0576%" height="15" fill="rgb(224,123,36)" fg:x="17569" fg:w="13"/><text x="78.0681%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (13 samples, 0.06%)</title><rect x="77.8181%" y="277" width="0.0576%" height="15" fill="rgb(240,125,3)" fg:x="17569" fg:w="13"/><text x="78.0681%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::ne (13 samples, 0.06%)</title><rect x="77.8181%" y="261" width="0.0576%" height="15" fill="rgb(205,98,50)" fg:x="17569" fg:w="13"/><text x="78.0681%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (680 samples, 3.01%)</title><rect x="74.8682%" y="325" width="3.0119%" height="15" fill="rgb(205,185,37)" fg:x="16903" fg:w="680"/><text x="75.1182%" y="335.50">all..</text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="77.8801%" y="277" width="0.0133%" height="15" fill="rgb(238,207,15)" fg:x="17583" fg:w="3"/><text x="78.1301%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="77.8801%" y="261" width="0.0133%" height="15" fill="rgb(213,199,42)" fg:x="17583" fg:w="3"/><text x="78.1301%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="77.8801%" y="245" width="0.0133%" height="15" fill="rgb(235,201,11)" fg:x="17583" fg:w="3"/><text x="78.1301%" y="255.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="77.8801%" y="229" width="0.0133%" height="15" fill="rgb(207,46,11)" fg:x="17583" fg:w="3"/><text x="78.1301%" y="239.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="77.8801%" y="213" width="0.0133%" height="15" fill="rgb(241,35,35)" fg:x="17583" fg:w="3"/><text x="78.1301%" y="223.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="77.8801%" y="197" width="0.0133%" height="15" fill="rgb(243,32,47)" fg:x="17583" fg:w="3"/><text x="78.1301%" y="207.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="77.8801%" y="181" width="0.0133%" height="15" fill="rgb(247,202,23)" fg:x="17583" fg:w="3"/><text x="78.1301%" y="191.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="77.8801%" y="165" width="0.0133%" height="15" fill="rgb(219,102,11)" fg:x="17583" fg:w="3"/><text x="78.1301%" y="175.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="77.8801%" y="149" width="0.0133%" height="15" fill="rgb(243,110,44)" fg:x="17583" fg:w="3"/><text x="78.1301%" y="159.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="77.8801%" y="133" width="0.0133%" height="15" fill="rgb(222,74,54)" fg:x="17583" fg:w="3"/><text x="78.1301%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1,415 samples, 6.27%)</title><rect x="71.6304%" y="357" width="6.2674%" height="15" fill="rgb(216,99,12)" fg:x="16172" fg:w="1415"/><text x="71.8804%" y="367.50">alloc::v..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (1,415 samples, 6.27%)</title><rect x="71.6304%" y="341" width="6.2674%" height="15" fill="rgb(226,22,26)" fg:x="16172" fg:w="1415"/><text x="71.8804%" y="351.50">alloc::v..</text></g><g><title>core::mem::drop (4 samples, 0.02%)</title><rect x="77.8801%" y="325" width="0.0177%" height="15" fill="rgb(217,163,10)" fg:x="17583" fg:w="4"/><text x="78.1301%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;T,A&gt;::retain_mut::BackshiftOnDrop&lt;usize,alloc::alloc::Global&gt;&gt; (4 samples, 0.02%)</title><rect x="77.8801%" y="309" width="0.0177%" height="15" fill="rgb(213,25,53)" fg:x="17583" fg:w="4"/><text x="78.1301%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt;::retain_mut::BackshiftOnDrop&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="77.8801%" y="293" width="0.0177%" height="15" fill="rgb(252,105,26)" fg:x="17583" fg:w="4"/><text x="78.1301%" y="303.50"></text></g><g><title>neuralang::add_2d (11 samples, 0.05%)</title><rect x="77.8979%" y="357" width="0.0487%" height="15" fill="rgb(220,39,43)" fg:x="17587" fg:w="11"/><text x="78.1479%" y="367.50"></text></g><g><title>neuralang::main (246 samples, 1.09%)</title><rect x="77.9466%" y="357" width="1.0896%" height="15" fill="rgb(229,68,48)" fg:x="17598" fg:w="246"/><text x="78.1966%" y="367.50"></text></g><g><title>neuralang::oob (40 samples, 0.18%)</title><rect x="79.0362%" y="357" width="0.1772%" height="15" fill="rgb(252,8,32)" fg:x="17844" fg:w="40"/><text x="79.2862%" y="367.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="81.7558%" y="341" width="0.0310%" height="15" fill="rgb(223,20,43)" fg:x="18458" fg:w="7"/><text x="82.0058%" y="351.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="81.7558%" y="325" width="0.0310%" height="15" fill="rgb(229,81,49)" fg:x="18458" fg:w="7"/><text x="82.0058%" y="335.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="81.7558%" y="309" width="0.0310%" height="15" fill="rgb(236,28,36)" fg:x="18458" fg:w="7"/><text x="82.0058%" y="319.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="81.7558%" y="293" width="0.0310%" height="15" fill="rgb(249,185,26)" fg:x="18458" fg:w="7"/><text x="82.0058%" y="303.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="81.7558%" y="277" width="0.0310%" height="15" fill="rgb(249,174,33)" fg:x="18458" fg:w="7"/><text x="82.0058%" y="287.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="81.7558%" y="261" width="0.0310%" height="15" fill="rgb(233,201,37)" fg:x="18458" fg:w="7"/><text x="82.0058%" y="271.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="81.7558%" y="245" width="0.0310%" height="15" fill="rgb(221,78,26)" fg:x="18458" fg:w="7"/><text x="82.0058%" y="255.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="81.7558%" y="229" width="0.0310%" height="15" fill="rgb(250,127,30)" fg:x="18458" fg:w="7"/><text x="82.0058%" y="239.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="81.7558%" y="213" width="0.0310%" height="15" fill="rgb(230,49,44)" fg:x="18458" fg:w="7"/><text x="82.0058%" y="223.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="81.7558%" y="197" width="0.0310%" height="15" fill="rgb(229,67,23)" fg:x="18458" fg:w="7"/><text x="82.0058%" y="207.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="81.7558%" y="181" width="0.0310%" height="15" fill="rgb(249,83,47)" fg:x="18458" fg:w="7"/><text x="82.0058%" y="191.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="81.7558%" y="165" width="0.0310%" height="15" fill="rgb(215,43,3)" fg:x="18458" fg:w="7"/><text x="82.0058%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="81.7602%" y="149" width="0.0266%" height="15" fill="rgb(238,154,13)" fg:x="18459" fg:w="6"/><text x="82.0102%" y="159.50"></text></g><g><title>__fmod (279 samples, 1.24%)</title><rect x="81.7868%" y="341" width="1.2358%" height="15" fill="rgb(219,56,2)" fg:x="18465" fg:w="279"/><text x="82.0368%" y="351.50"></text></g><g><title>neuralang::pos_to_cell (3,906 samples, 17.30%)</title><rect x="79.2134%" y="357" width="17.3008%" height="15" fill="rgb(233,0,4)" fg:x="17884" fg:w="3906"/><text x="79.4634%" y="367.50">neuralang::pos_to_cell</text></g><g><title>__ieee754_fmod (3,046 samples, 13.49%)</title><rect x="83.0225%" y="341" width="13.4916%" height="15" fill="rgb(235,30,7)" fg:x="18744" fg:w="3046"/><text x="83.2725%" y="351.50">__ieee754_fmod</text></g><g><title>[unknown] (10 samples, 0.04%)</title><rect x="96.4699%" y="325" width="0.0443%" height="15" fill="rgb(250,79,13)" fg:x="21780" fg:w="10"/><text x="96.7199%" y="335.50"></text></g><g><title>[unknown] (10 samples, 0.04%)</title><rect x="96.4699%" y="309" width="0.0443%" height="15" fill="rgb(211,146,34)" fg:x="21780" fg:w="10"/><text x="96.7199%" y="319.50"></text></g><g><title>[unknown] (10 samples, 0.04%)</title><rect x="96.4699%" y="293" width="0.0443%" height="15" fill="rgb(228,22,38)" fg:x="21780" fg:w="10"/><text x="96.7199%" y="303.50"></text></g><g><title>[unknown] (10 samples, 0.04%)</title><rect x="96.4699%" y="277" width="0.0443%" height="15" fill="rgb(235,168,5)" fg:x="21780" fg:w="10"/><text x="96.7199%" y="287.50"></text></g><g><title>[unknown] (10 samples, 0.04%)</title><rect x="96.4699%" y="261" width="0.0443%" height="15" fill="rgb(221,155,16)" fg:x="21780" fg:w="10"/><text x="96.7199%" y="271.50"></text></g><g><title>[unknown] (10 samples, 0.04%)</title><rect x="96.4699%" y="245" width="0.0443%" height="15" fill="rgb(215,215,53)" fg:x="21780" fg:w="10"/><text x="96.7199%" y="255.50"></text></g><g><title>[unknown] (10 samples, 0.04%)</title><rect x="96.4699%" y="229" width="0.0443%" height="15" fill="rgb(223,4,10)" fg:x="21780" fg:w="10"/><text x="96.7199%" y="239.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="96.4831%" y="213" width="0.0310%" height="15" fill="rgb(234,103,6)" fg:x="21783" fg:w="7"/><text x="96.7331%" y="223.50"></text></g><g><title>[unknown] (7 samples, 0.03%)</title><rect x="96.4831%" y="197" width="0.0310%" height="15" fill="rgb(227,97,0)" fg:x="21783" fg:w="7"/><text x="96.7331%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="96.4920%" y="181" width="0.0221%" height="15" fill="rgb(234,150,53)" fg:x="21785" fg:w="5"/><text x="96.7420%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="96.4920%" y="165" width="0.0221%" height="15" fill="rgb(228,201,54)" fg:x="21785" fg:w="5"/><text x="96.7420%" y="175.50"></text></g><g><title>neuralang::World::update_cells (6,018 samples, 26.66%)</title><rect x="69.9517%" y="373" width="26.6554%" height="15" fill="rgb(222,22,37)" fg:x="15793" fg:w="6018"/><text x="70.2017%" y="383.50">neuralang::World::update_cells</text></g><g><title>neuralang::same_index (21 samples, 0.09%)</title><rect x="96.5142%" y="357" width="0.0930%" height="15" fill="rgb(237,53,32)" fg:x="21790" fg:w="21"/><text x="96.7642%" y="367.50"></text></g><g><title>neuralang::World::step (22,117 samples, 97.96%)</title><rect x="2.0065%" y="389" width="97.9625%" height="15" fill="rgb(233,25,53)" fg:x="453" fg:w="22117"/><text x="2.2565%" y="399.50">neuralang::World::step</text></g><g><title>neuralang::main (759 samples, 3.36%)</title><rect x="96.6072%" y="373" width="3.3618%" height="15" fill="rgb(210,40,34)" fg:x="21811" fg:w="759"/><text x="96.8572%" y="383.50">neu..</text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="99.9557%" y="357" width="0.0133%" height="15" fill="rgb(241,220,44)" fg:x="22567" fg:w="3"/><text x="100.2057%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="99.9557%" y="341" width="0.0133%" height="15" fill="rgb(235,28,35)" fg:x="22567" fg:w="3"/><text x="100.2057%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="99.9557%" y="325" width="0.0133%" height="15" fill="rgb(210,56,17)" fg:x="22567" fg:w="3"/><text x="100.2057%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="99.9557%" y="309" width="0.0133%" height="15" fill="rgb(224,130,29)" fg:x="22567" fg:w="3"/><text x="100.2057%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="99.9557%" y="293" width="0.0133%" height="15" fill="rgb(235,212,8)" fg:x="22567" fg:w="3"/><text x="100.2057%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="99.9557%" y="277" width="0.0133%" height="15" fill="rgb(223,33,50)" fg:x="22567" fg:w="3"/><text x="100.2057%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="99.9557%" y="261" width="0.0133%" height="15" fill="rgb(219,149,13)" fg:x="22567" fg:w="3"/><text x="100.2057%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="99.9557%" y="245" width="0.0133%" height="15" fill="rgb(250,156,29)" fg:x="22567" fg:w="3"/><text x="100.2057%" y="255.50"></text></g><g><title>__libc_start_main_impl (22,119 samples, 97.97%)</title><rect x="2.0020%" y="661" width="97.9714%" height="15" fill="rgb(216,193,19)" fg:x="452" fg:w="22119"/><text x="2.2520%" y="671.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (22,119 samples, 97.97%)</title><rect x="2.0020%" y="645" width="97.9714%" height="15" fill="rgb(216,135,14)" fg:x="452" fg:w="22119"/><text x="2.2520%" y="655.50">__libc_start_call_main</text></g><g><title>main (22,119 samples, 97.97%)</title><rect x="2.0020%" y="629" width="97.9714%" height="15" fill="rgb(241,47,5)" fg:x="452" fg:w="22119"/><text x="2.2520%" y="639.50">main</text></g><g><title>std::rt::lang_start_internal (22,119 samples, 97.97%)</title><rect x="2.0020%" y="613" width="97.9714%" height="15" fill="rgb(233,42,35)" fg:x="452" fg:w="22119"/><text x="2.2520%" y="623.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (22,119 samples, 97.97%)</title><rect x="2.0020%" y="597" width="97.9714%" height="15" fill="rgb(231,13,6)" fg:x="452" fg:w="22119"/><text x="2.2520%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (22,119 samples, 97.97%)</title><rect x="2.0020%" y="581" width="97.9714%" height="15" fill="rgb(207,181,40)" fg:x="452" fg:w="22119"/><text x="2.2520%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (22,119 samples, 97.97%)</title><rect x="2.0020%" y="565" width="97.9714%" height="15" fill="rgb(254,173,49)" fg:x="452" fg:w="22119"/><text x="2.2520%" y="575.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (22,119 samples, 97.97%)</title><rect x="2.0020%" y="549" width="97.9714%" height="15" fill="rgb(221,1,38)" fg:x="452" fg:w="22119"/><text x="2.2520%" y="559.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (22,119 samples, 97.97%)</title><rect x="2.0020%" y="533" width="97.9714%" height="15" fill="rgb(206,124,46)" fg:x="452" fg:w="22119"/><text x="2.2520%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (22,119 samples, 97.97%)</title><rect x="2.0020%" y="517" width="97.9714%" height="15" fill="rgb(249,21,11)" fg:x="452" fg:w="22119"/><text x="2.2520%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (22,119 samples, 97.97%)</title><rect x="2.0020%" y="501" width="97.9714%" height="15" fill="rgb(222,201,40)" fg:x="452" fg:w="22119"/><text x="2.2520%" y="511.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (22,119 samples, 97.97%)</title><rect x="2.0020%" y="485" width="97.9714%" height="15" fill="rgb(235,61,29)" fg:x="452" fg:w="22119"/><text x="2.2520%" y="495.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (22,119 samples, 97.97%)</title><rect x="2.0020%" y="469" width="97.9714%" height="15" fill="rgb(219,207,3)" fg:x="452" fg:w="22119"/><text x="2.2520%" y="479.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (22,119 samples, 97.97%)</title><rect x="2.0020%" y="453" width="97.9714%" height="15" fill="rgb(222,56,46)" fg:x="452" fg:w="22119"/><text x="2.2520%" y="463.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (22,119 samples, 97.97%)</title><rect x="2.0020%" y="437" width="97.9714%" height="15" fill="rgb(239,76,54)" fg:x="452" fg:w="22119"/><text x="2.2520%" y="447.50">core::ops::function::FnOnce::call_once</text></g><g><title>neuralang::main (22,119 samples, 97.97%)</title><rect x="2.0020%" y="421" width="97.9714%" height="15" fill="rgb(231,124,27)" fg:x="452" fg:w="22119"/><text x="2.2520%" y="431.50">neuralang::main</text></g><g><title>neuralang::run (22,119 samples, 97.97%)</title><rect x="2.0020%" y="405" width="97.9714%" height="15" fill="rgb(249,195,6)" fg:x="452" fg:w="22119"/><text x="2.2520%" y="415.50">neuralang::run</text></g><g><title>neuralang (22,572 samples, 99.98%)</title><rect x="0.0000%" y="693" width="99.9779%" height="15" fill="rgb(237,174,47)" fg:x="0" fg:w="22572"/><text x="0.2500%" y="703.50">neuralang</text></g><g><title>_start (22,120 samples, 97.98%)</title><rect x="2.0020%" y="677" width="97.9758%" height="15" fill="rgb(206,201,31)" fg:x="452" fg:w="22120"/><text x="2.2520%" y="687.50">_start</text></g><g><title>all (22,577 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(231,57,52)" fg:x="0" fg:w="22577"/><text x="0.2500%" y="719.50"></text></g><g><title>perf-exec (5 samples, 0.02%)</title><rect x="99.9779%" y="693" width="0.0221%" height="15" fill="rgb(248,177,22)" fg:x="22572" fg:w="5"/><text x="100.2279%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9779%" y="677" width="0.0221%" height="15" fill="rgb(215,211,37)" fg:x="22572" fg:w="5"/><text x="100.2279%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9779%" y="661" width="0.0221%" height="15" fill="rgb(241,128,51)" fg:x="22572" fg:w="5"/><text x="100.2279%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9779%" y="645" width="0.0221%" height="15" fill="rgb(227,165,31)" fg:x="22572" fg:w="5"/><text x="100.2279%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9779%" y="629" width="0.0221%" height="15" fill="rgb(228,167,24)" fg:x="22572" fg:w="5"/><text x="100.2279%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9779%" y="613" width="0.0221%" height="15" fill="rgb(228,143,12)" fg:x="22572" fg:w="5"/><text x="100.2279%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9779%" y="597" width="0.0221%" height="15" fill="rgb(249,149,8)" fg:x="22572" fg:w="5"/><text x="100.2279%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9779%" y="581" width="0.0221%" height="15" fill="rgb(243,35,44)" fg:x="22572" fg:w="5"/><text x="100.2279%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9779%" y="565" width="0.0221%" height="15" fill="rgb(246,89,9)" fg:x="22572" fg:w="5"/><text x="100.2279%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9779%" y="549" width="0.0221%" height="15" fill="rgb(233,213,13)" fg:x="22572" fg:w="5"/><text x="100.2279%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9779%" y="533" width="0.0221%" height="15" fill="rgb(233,141,41)" fg:x="22572" fg:w="5"/><text x="100.2279%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9779%" y="517" width="0.0221%" height="15" fill="rgb(239,167,4)" fg:x="22572" fg:w="5"/><text x="100.2279%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9779%" y="501" width="0.0221%" height="15" fill="rgb(209,217,16)" fg:x="22572" fg:w="5"/><text x="100.2279%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9779%" y="485" width="0.0221%" height="15" fill="rgb(219,88,35)" fg:x="22572" fg:w="5"/><text x="100.2279%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9779%" y="469" width="0.0221%" height="15" fill="rgb(220,193,23)" fg:x="22572" fg:w="5"/><text x="100.2279%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9779%" y="453" width="0.0221%" height="15" fill="rgb(230,90,52)" fg:x="22572" fg:w="5"/><text x="100.2279%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9779%" y="437" width="0.0221%" height="15" fill="rgb(252,106,19)" fg:x="22572" fg:w="5"/><text x="100.2279%" y="447.50"></text></g></svg></svg>