<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="821.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="821.00"> </text><svg id="frames" x="10" width="1180" total_samples="79115"><g><title>[[heap]] (93 samples, 0.12%)</title><rect x="0.0000%" y="757" width="0.1176%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="93"/><text x="0.2500%" y="767.50"></text></g><g><title>__sincos (93 samples, 0.12%)</title><rect x="0.0000%" y="741" width="0.1176%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="93"/><text x="0.2500%" y="751.50"></text></g><g><title>__ieee754_fmod (77 samples, 0.10%)</title><rect x="0.1378%" y="741" width="0.0973%" height="15" fill="rgb(221,193,54)" fg:x="109" fg:w="77"/><text x="0.3878%" y="751.50"></text></g><g><title>__sincos (559 samples, 0.71%)</title><rect x="0.2351%" y="741" width="0.7066%" height="15" fill="rgb(248,212,6)" fg:x="186" fg:w="559"/><text x="0.4851%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (17 samples, 0.02%)</title><rect x="0.9417%" y="741" width="0.0215%" height="15" fill="rgb(208,68,35)" fg:x="745" fg:w="17"/><text x="1.1917%" y="751.50"></text></g><g><title>neuralang::World::move_balls (100 samples, 0.13%)</title><rect x="0.9632%" y="693" width="0.1264%" height="15" fill="rgb(232,128,0)" fg:x="762" fg:w="100"/><text x="1.2132%" y="703.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (100 samples, 0.13%)</title><rect x="0.9632%" y="677" width="0.1264%" height="15" fill="rgb(207,160,47)" fg:x="762" fg:w="100"/><text x="1.2132%" y="687.50"></text></g><g><title>neuralang::World::move_balls::{{closure}} (100 samples, 0.13%)</title><rect x="0.9632%" y="661" width="0.1264%" height="15" fill="rgb(228,23,34)" fg:x="762" fg:w="100"/><text x="1.2132%" y="671.50"></text></g><g><title>neuralang::dir_from_theta (100 samples, 0.13%)</title><rect x="0.9632%" y="645" width="0.1264%" height="15" fill="rgb(218,30,26)" fg:x="762" fg:w="100"/><text x="1.2132%" y="655.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::cos (100 samples, 0.13%)</title><rect x="0.9632%" y="629" width="0.1264%" height="15" fill="rgb(220,122,19)" fg:x="762" fg:w="100"/><text x="1.2132%" y="639.50"></text></g><g><title>neuralang::main (180 samples, 0.23%)</title><rect x="0.9632%" y="741" width="0.2275%" height="15" fill="rgb(250,228,42)" fg:x="762" fg:w="180"/><text x="1.2132%" y="751.50"></text></g><g><title>neuralang::run (180 samples, 0.23%)</title><rect x="0.9632%" y="725" width="0.2275%" height="15" fill="rgb(240,193,28)" fg:x="762" fg:w="180"/><text x="1.2132%" y="735.50"></text></g><g><title>neuralang::World::step (180 samples, 0.23%)</title><rect x="0.9632%" y="709" width="0.2275%" height="15" fill="rgb(216,20,37)" fg:x="762" fg:w="180"/><text x="1.2132%" y="719.50"></text></g><g><title>neuralang::World::update_cells (80 samples, 0.10%)</title><rect x="1.0896%" y="693" width="0.1011%" height="15" fill="rgb(206,188,39)" fg:x="862" fg:w="80"/><text x="1.3396%" y="703.50"></text></g><g><title>neuralang::pos_to_cell (78 samples, 0.10%)</title><rect x="1.0921%" y="677" width="0.0986%" height="15" fill="rgb(217,207,13)" fg:x="864" fg:w="78"/><text x="1.3421%" y="687.50"></text></g><g><title>[unknown] (849 samples, 1.07%)</title><rect x="0.1213%" y="757" width="1.0731%" height="15" fill="rgb(231,73,38)" fg:x="96" fg:w="849"/><text x="0.3713%" y="767.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (21,036 samples, 26.59%)</title><rect x="8.6823%" y="437" width="26.5891%" height="15" fill="rgb(225,20,46)" fg:x="6869" fg:w="21036"/><text x="8.9323%" y="447.50">&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::trait..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (21,036 samples, 26.59%)</title><rect x="8.6823%" y="421" width="26.5891%" height="15" fill="rgb(210,31,41)" fg:x="6869" fg:w="21036"/><text x="8.9323%" y="431.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::..</text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="35.2613%" y="405" width="0.0101%" height="15" fill="rgb(221,200,47)" fg:x="27897" fg:w="8"/><text x="35.5113%" y="415.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="35.2613%" y="389" width="0.0101%" height="15" fill="rgb(226,26,5)" fg:x="27897" fg:w="8"/><text x="35.5113%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,567 samples, 4.51%)</title><rect x="35.2714%" y="405" width="4.5086%" height="15" fill="rgb(249,33,26)" fg:x="27905" fg:w="3567"/><text x="35.5214%" y="415.50">&lt;usiz..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3,621 samples, 4.58%)</title><rect x="35.2714%" y="437" width="4.5769%" height="15" fill="rgb(235,183,28)" fg:x="27905" fg:w="3621"/><text x="35.5214%" y="447.50">&lt;allo..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,621 samples, 4.58%)</title><rect x="35.2714%" y="421" width="4.5769%" height="15" fill="rgb(221,5,38)" fg:x="27905" fg:w="3621"/><text x="35.5214%" y="431.50">core:..</text></g><g><title>neuralang::main (54 samples, 0.07%)</title><rect x="39.7801%" y="405" width="0.0683%" height="15" fill="rgb(247,18,42)" fg:x="31472" fg:w="54"/><text x="40.0301%" y="415.50"></text></g><g><title>&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::next (488 samples, 0.62%)</title><rect x="39.8483%" y="421" width="0.6168%" height="15" fill="rgb(241,131,45)" fg:x="31526" fg:w="488"/><text x="40.0983%" y="431.50"></text></g><g><title>core::ops::index_range::IndexRange::next_unchecked (318 samples, 0.40%)</title><rect x="40.0632%" y="405" width="0.4019%" height="15" fill="rgb(249,31,29)" fg:x="31696" fg:w="318"/><text x="40.3132%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (134 samples, 0.17%)</title><rect x="40.4651%" y="357" width="0.1694%" height="15" fill="rgb(225,111,53)" fg:x="32014" fg:w="134"/><text x="40.7151%" y="367.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (674 samples, 0.85%)</title><rect x="39.8483%" y="437" width="0.8519%" height="15" fill="rgb(238,160,17)" fg:x="31526" fg:w="674"/><text x="40.0983%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (186 samples, 0.24%)</title><rect x="40.4651%" y="421" width="0.2351%" height="15" fill="rgb(214,148,48)" fg:x="32014" fg:w="186"/><text x="40.7151%" y="431.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (186 samples, 0.24%)</title><rect x="40.4651%" y="405" width="0.2351%" height="15" fill="rgb(232,36,49)" fg:x="32014" fg:w="186"/><text x="40.7151%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (186 samples, 0.24%)</title><rect x="40.4651%" y="389" width="0.2351%" height="15" fill="rgb(209,103,24)" fg:x="32014" fg:w="186"/><text x="40.7151%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (186 samples, 0.24%)</title><rect x="40.4651%" y="373" width="0.2351%" height="15" fill="rgb(229,88,8)" fg:x="32014" fg:w="186"/><text x="40.7151%" y="383.50"></text></g><g><title>neuralang::main (52 samples, 0.07%)</title><rect x="40.6345%" y="357" width="0.0657%" height="15" fill="rgb(213,181,19)" fg:x="32148" fg:w="52"/><text x="40.8845%" y="367.50"></text></g><g><title>[unknown] (91 samples, 0.12%)</title><rect x="45.3429%" y="421" width="0.1150%" height="15" fill="rgb(254,191,54)" fg:x="35873" fg:w="91"/><text x="45.5929%" y="431.50"></text></g><g><title>[unknown] (78 samples, 0.10%)</title><rect x="45.3593%" y="405" width="0.0986%" height="15" fill="rgb(241,83,37)" fg:x="35886" fg:w="78"/><text x="45.6093%" y="415.50"></text></g><g><title>[unknown] (77 samples, 0.10%)</title><rect x="45.3606%" y="389" width="0.0973%" height="15" fill="rgb(233,36,39)" fg:x="35887" fg:w="77"/><text x="45.6106%" y="399.50"></text></g><g><title>[unknown] (77 samples, 0.10%)</title><rect x="45.3606%" y="373" width="0.0973%" height="15" fill="rgb(226,3,54)" fg:x="35887" fg:w="77"/><text x="45.6106%" y="383.50"></text></g><g><title>[unknown] (72 samples, 0.09%)</title><rect x="45.3669%" y="357" width="0.0910%" height="15" fill="rgb(245,192,40)" fg:x="35892" fg:w="72"/><text x="45.6169%" y="367.50"></text></g><g><title>[unknown] (68 samples, 0.09%)</title><rect x="45.3719%" y="341" width="0.0860%" height="15" fill="rgb(238,167,29)" fg:x="35896" fg:w="68"/><text x="45.6219%" y="351.50"></text></g><g><title>[unknown] (58 samples, 0.07%)</title><rect x="45.3846%" y="325" width="0.0733%" height="15" fill="rgb(232,182,51)" fg:x="35906" fg:w="58"/><text x="45.6346%" y="335.50"></text></g><g><title>[unknown] (50 samples, 0.06%)</title><rect x="45.3947%" y="309" width="0.0632%" height="15" fill="rgb(231,60,39)" fg:x="35914" fg:w="50"/><text x="45.6447%" y="319.50"></text></g><g><title>[unknown] (47 samples, 0.06%)</title><rect x="45.3985%" y="293" width="0.0594%" height="15" fill="rgb(208,69,12)" fg:x="35917" fg:w="47"/><text x="45.6485%" y="303.50"></text></g><g><title>[unknown] (44 samples, 0.06%)</title><rect x="45.4023%" y="277" width="0.0556%" height="15" fill="rgb(235,93,37)" fg:x="35920" fg:w="44"/><text x="45.6523%" y="287.50"></text></g><g><title>[unknown] (35 samples, 0.04%)</title><rect x="45.4136%" y="261" width="0.0442%" height="15" fill="rgb(213,116,39)" fg:x="35929" fg:w="35"/><text x="45.6636%" y="271.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="45.4313%" y="245" width="0.0265%" height="15" fill="rgb(222,207,29)" fg:x="35943" fg:w="21"/><text x="45.6813%" y="255.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="45.4364%" y="229" width="0.0215%" height="15" fill="rgb(206,96,30)" fg:x="35947" fg:w="17"/><text x="45.6864%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,841 samples, 4.85%)</title><rect x="40.7002%" y="437" width="4.8550%" height="15" fill="rgb(218,138,4)" fg:x="32200" fg:w="3841"/><text x="40.9502%" y="447.50">&lt;core:..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (77 samples, 0.10%)</title><rect x="45.4579%" y="421" width="0.0973%" height="15" fill="rgb(250,191,14)" fg:x="35964" fg:w="77"/><text x="45.7079%" y="431.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (77 samples, 0.10%)</title><rect x="45.4579%" y="405" width="0.0973%" height="15" fill="rgb(239,60,40)" fg:x="35964" fg:w="77"/><text x="45.7079%" y="415.50"></text></g><g><title>neuralang::main (74 samples, 0.09%)</title><rect x="45.4617%" y="389" width="0.0935%" height="15" fill="rgb(206,27,48)" fg:x="35967" fg:w="74"/><text x="45.7117%" y="399.50"></text></g><g><title>[unknown] (36 samples, 0.05%)</title><rect x="45.5552%" y="437" width="0.0455%" height="15" fill="rgb(225,35,8)" fg:x="36041" fg:w="36"/><text x="45.8052%" y="447.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="45.5615%" y="421" width="0.0392%" height="15" fill="rgb(250,213,24)" fg:x="36046" fg:w="31"/><text x="45.8115%" y="431.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="45.5615%" y="405" width="0.0392%" height="15" fill="rgb(247,123,22)" fg:x="36046" fg:w="31"/><text x="45.8115%" y="415.50"></text></g><g><title>[unknown] (31 samples, 0.04%)</title><rect x="45.5615%" y="389" width="0.0392%" height="15" fill="rgb(231,138,38)" fg:x="36046" fg:w="31"/><text x="45.8115%" y="399.50"></text></g><g><title>[unknown] (29 samples, 0.04%)</title><rect x="45.5641%" y="373" width="0.0367%" height="15" fill="rgb(231,145,46)" fg:x="36048" fg:w="29"/><text x="45.8141%" y="383.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="45.5653%" y="357" width="0.0354%" height="15" fill="rgb(251,118,11)" fg:x="36049" fg:w="28"/><text x="45.8153%" y="367.50"></text></g><g><title>[unknown] (27 samples, 0.03%)</title><rect x="45.5666%" y="341" width="0.0341%" height="15" fill="rgb(217,147,25)" fg:x="36050" fg:w="27"/><text x="45.8166%" y="351.50"></text></g><g><title>[unknown] (24 samples, 0.03%)</title><rect x="45.5704%" y="325" width="0.0303%" height="15" fill="rgb(247,81,37)" fg:x="36053" fg:w="24"/><text x="45.8204%" y="335.50"></text></g><g><title>[unknown] (24 samples, 0.03%)</title><rect x="45.5704%" y="309" width="0.0303%" height="15" fill="rgb(209,12,38)" fg:x="36053" fg:w="24"/><text x="45.8204%" y="319.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="45.5729%" y="293" width="0.0278%" height="15" fill="rgb(227,1,9)" fg:x="36055" fg:w="22"/><text x="45.8229%" y="303.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="45.5817%" y="277" width="0.0190%" height="15" fill="rgb(248,47,43)" fg:x="36062" fg:w="15"/><text x="45.8317%" y="287.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="45.5881%" y="261" width="0.0126%" height="15" fill="rgb(221,10,30)" fg:x="36067" fg:w="10"/><text x="45.8381%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (10 samples, 0.01%)</title><rect x="45.6690%" y="389" width="0.0126%" height="15" fill="rgb(210,229,1)" fg:x="36131" fg:w="10"/><text x="45.9190%" y="399.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (178 samples, 0.22%)</title><rect x="45.6690%" y="405" width="0.2250%" height="15" fill="rgb(222,148,37)" fg:x="36131" fg:w="178"/><text x="45.9190%" y="415.50"></text></g><g><title>neuralang::main (168 samples, 0.21%)</title><rect x="45.6816%" y="389" width="0.2123%" height="15" fill="rgb(234,67,33)" fg:x="36141" fg:w="168"/><text x="45.9316%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,534 samples, 1.94%)</title><rect x="45.6007%" y="437" width="1.9389%" height="15" fill="rgb(247,98,35)" fg:x="36077" fg:w="1534"/><text x="45.8507%" y="447.50">c..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,534 samples, 1.94%)</title><rect x="45.6007%" y="421" width="1.9389%" height="15" fill="rgb(247,138,52)" fg:x="36077" fg:w="1534"/><text x="45.8507%" y="431.50">&lt;..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,302 samples, 1.65%)</title><rect x="45.8940%" y="405" width="1.6457%" height="15" fill="rgb(213,79,30)" fg:x="36309" fg:w="1302"/><text x="46.1440%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (45 samples, 0.06%)</title><rect x="47.5397%" y="437" width="0.0569%" height="15" fill="rgb(246,177,23)" fg:x="37611" fg:w="45"/><text x="47.7897%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (11 samples, 0.01%)</title><rect x="47.5965%" y="437" width="0.0139%" height="15" fill="rgb(230,62,27)" fg:x="37656" fg:w="11"/><text x="47.8465%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (184 samples, 0.23%)</title><rect x="47.6180%" y="437" width="0.2326%" height="15" fill="rgb(216,154,8)" fg:x="37673" fg:w="184"/><text x="47.8680%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (184 samples, 0.23%)</title><rect x="47.6180%" y="421" width="0.2326%" height="15" fill="rgb(244,35,45)" fg:x="37673" fg:w="184"/><text x="47.8680%" y="431.50"></text></g><g><title>neuralang::balls_collide (99 samples, 0.13%)</title><rect x="47.8519%" y="437" width="0.1251%" height="15" fill="rgb(251,115,12)" fg:x="37858" fg:w="99"/><text x="48.1019%" y="447.50"></text></g><g><title>neuralang::dist_2d (71 samples, 0.09%)</title><rect x="47.8873%" y="421" width="0.0897%" height="15" fill="rgb(240,54,50)" fg:x="37886" fg:w="71"/><text x="48.1373%" y="431.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (42 samples, 0.05%)</title><rect x="47.9239%" y="405" width="0.0531%" height="15" fill="rgb(233,84,52)" fg:x="37915" fg:w="42"/><text x="48.1739%" y="415.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powi (15 samples, 0.02%)</title><rect x="48.1325%" y="405" width="0.0190%" height="15" fill="rgb(207,117,47)" fg:x="38080" fg:w="15"/><text x="48.3825%" y="415.50"></text></g><g><title>neuralang::food_collide (273 samples, 0.35%)</title><rect x="47.9770%" y="437" width="0.3451%" height="15" fill="rgb(249,43,39)" fg:x="37957" fg:w="273"/><text x="48.2270%" y="447.50"></text></g><g><title>neuralang::dist_2d (238 samples, 0.30%)</title><rect x="48.0212%" y="421" width="0.3008%" height="15" fill="rgb(209,38,44)" fg:x="37992" fg:w="238"/><text x="48.2712%" y="431.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (135 samples, 0.17%)</title><rect x="48.1514%" y="405" width="0.1706%" height="15" fill="rgb(236,212,23)" fg:x="38095" fg:w="135"/><text x="48.4014%" y="415.50"></text></g><g><title>neuralang::main (801 samples, 1.01%)</title><rect x="48.3221%" y="437" width="1.0125%" height="15" fill="rgb(242,79,21)" fg:x="38230" fg:w="801"/><text x="48.5721%" y="447.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="52.3251%" y="405" width="0.0101%" height="15" fill="rgb(211,96,35)" fg:x="41397" fg:w="8"/><text x="52.5751%" y="415.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="52.3251%" y="389" width="0.0101%" height="15" fill="rgb(253,215,40)" fg:x="41397" fg:w="8"/><text x="52.5751%" y="399.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powi (164 samples, 0.21%)</title><rect x="52.3352%" y="405" width="0.2073%" height="15" fill="rgb(211,81,21)" fg:x="41405" fg:w="164"/><text x="52.5852%" y="415.50"></text></g><g><title>neuralang::obstruct_collide (3,265 samples, 4.13%)</title><rect x="49.3345%" y="437" width="4.1269%" height="15" fill="rgb(208,190,38)" fg:x="39031" fg:w="3265"/><text x="49.5845%" y="447.50">neur..</text></g><g><title>neuralang::dist_2d (1,320 samples, 1.67%)</title><rect x="51.7930%" y="421" width="1.6685%" height="15" fill="rgb(235,213,38)" fg:x="40976" fg:w="1320"/><text x="52.0430%" y="431.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (727 samples, 0.92%)</title><rect x="52.5425%" y="405" width="0.9189%" height="15" fill="rgb(237,122,38)" fg:x="41569" fg:w="727"/><text x="52.7925%" y="415.50"></text></g><g><title>neuralang::scale_2d (36 samples, 0.05%)</title><rect x="53.4614%" y="437" width="0.0455%" height="15" fill="rgb(244,218,35)" fg:x="42296" fg:w="36"/><text x="53.7114%" y="447.50"></text></g><g><title>neuralang::two_to_one (628 samples, 0.79%)</title><rect x="53.5069%" y="437" width="0.7938%" height="15" fill="rgb(240,68,47)" fg:x="42332" fg:w="628"/><text x="53.7569%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;V&gt; as splitmut::SplitMut&lt;usize,V&gt;&gt;::get1_mut (19 samples, 0.02%)</title><rect x="54.3235%" y="421" width="0.0240%" height="15" fill="rgb(210,16,53)" fg:x="42978" fg:w="19"/><text x="54.5735%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (19 samples, 0.02%)</title><rect x="54.3235%" y="405" width="0.0240%" height="15" fill="rgb(235,124,12)" fg:x="42978" fg:w="19"/><text x="54.5735%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (19 samples, 0.02%)</title><rect x="54.3235%" y="389" width="0.0240%" height="15" fill="rgb(224,169,11)" fg:x="42978" fg:w="19"/><text x="54.5735%" y="399.50"></text></g><g><title>neuralang::World::check_collisions (42,053 samples, 53.15%)</title><rect x="1.2008%" y="453" width="53.1543%" height="15" fill="rgb(250,166,2)" fg:x="950" fg:w="42053"/><text x="1.4508%" y="463.50">neuralang::World::check_collisions</text></g><g><title>splitmut::SplitMut::get2_mut (43 samples, 0.05%)</title><rect x="54.3007%" y="437" width="0.0544%" height="15" fill="rgb(242,216,29)" fg:x="42960" fg:w="43"/><text x="54.5507%" y="447.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (120 samples, 0.15%)</title><rect x="54.3551%" y="421" width="0.1517%" height="15" fill="rgb(230,116,27)" fg:x="43003" fg:w="120"/><text x="54.6051%" y="431.50"></text></g><g><title>neuralang::add_2d (376 samples, 0.48%)</title><rect x="54.5598%" y="405" width="0.4753%" height="15" fill="rgb(228,99,48)" fg:x="43165" fg:w="376"/><text x="54.8098%" y="415.50"></text></g><g><title>neuralang::main (16 samples, 0.02%)</title><rect x="55.0351%" y="389" width="0.0202%" height="15" fill="rgb(253,11,6)" fg:x="43541" fg:w="16"/><text x="55.2851%" y="399.50"></text></g><g><title>do_cos (962 samples, 1.22%)</title><rect x="56.5898%" y="357" width="1.2160%" height="15" fill="rgb(247,143,39)" fg:x="44771" fg:w="962"/><text x="56.8398%" y="367.50"></text></g><g><title>do_sin (8,646 samples, 10.93%)</title><rect x="57.8057%" y="357" width="10.9284%" height="15" fill="rgb(236,97,10)" fg:x="45733" fg:w="8646"/><text x="58.0557%" y="367.50">do_sin</text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="68.7063%" y="341" width="0.0278%" height="15" fill="rgb(233,208,19)" fg:x="54357" fg:w="22"/><text x="68.9563%" y="351.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="68.7088%" y="325" width="0.0253%" height="15" fill="rgb(216,164,2)" fg:x="54359" fg:w="20"/><text x="68.9588%" y="335.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="68.7088%" y="309" width="0.0253%" height="15" fill="rgb(220,129,5)" fg:x="54359" fg:w="20"/><text x="68.9588%" y="319.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="68.7101%" y="293" width="0.0240%" height="15" fill="rgb(242,17,10)" fg:x="54360" fg:w="19"/><text x="68.9601%" y="303.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="68.7114%" y="277" width="0.0228%" height="15" fill="rgb(242,107,0)" fg:x="54361" fg:w="18"/><text x="68.9614%" y="287.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="68.7126%" y="261" width="0.0215%" height="15" fill="rgb(251,28,31)" fg:x="54362" fg:w="17"/><text x="68.9626%" y="271.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="68.7152%" y="245" width="0.0190%" height="15" fill="rgb(233,223,10)" fg:x="54364" fg:w="15"/><text x="68.9652%" y="255.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="68.7164%" y="229" width="0.0177%" height="15" fill="rgb(215,21,27)" fg:x="54365" fg:w="14"/><text x="68.9664%" y="239.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="68.7177%" y="213" width="0.0164%" height="15" fill="rgb(232,23,21)" fg:x="54366" fg:w="13"/><text x="68.9677%" y="223.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="68.7190%" y="197" width="0.0152%" height="15" fill="rgb(244,5,23)" fg:x="54367" fg:w="12"/><text x="68.9690%" y="207.50"></text></g><g><title>libc_feholdsetround_sse_ctx (288 samples, 0.36%)</title><rect x="68.7341%" y="357" width="0.3640%" height="15" fill="rgb(226,81,46)" fg:x="54379" fg:w="288"/><text x="68.9841%" y="367.50"></text></g><g><title>libc_feresetround_sse_ctx (148 samples, 0.19%)</title><rect x="69.0981%" y="357" width="0.1871%" height="15" fill="rgb(247,70,30)" fg:x="54667" fg:w="148"/><text x="69.3481%" y="367.50"></text></g><g><title>neuralang::dir_from_theta (13,450 samples, 17.00%)</title><rect x="55.0351%" y="405" width="17.0006%" height="15" fill="rgb(212,68,19)" fg:x="43541" fg:w="13450"/><text x="55.2851%" y="415.50">neuralang::dir_from_theta</text></g><g><title>std::f64::&lt;impl f64&gt;::cos (13,434 samples, 16.98%)</title><rect x="55.0553%" y="389" width="16.9803%" height="15" fill="rgb(240,187,13)" fg:x="43557" fg:w="13434"/><text x="55.3053%" y="399.50">std::f64::&lt;impl f64&gt;::cos</text></g><g><title>__sincos (13,385 samples, 16.92%)</title><rect x="55.1172%" y="373" width="16.9184%" height="15" fill="rgb(223,113,26)" fg:x="43606" fg:w="13385"/><text x="55.3672%" y="383.50">__sincos</text></g><g><title>reduce_sincos (2,176 samples, 2.75%)</title><rect x="69.2852%" y="357" width="2.7504%" height="15" fill="rgb(206,192,2)" fg:x="54815" fg:w="2176"/><text x="69.5352%" y="367.50">re..</text></g><g><title>neuralang::main (312 samples, 0.39%)</title><rect x="72.0356%" y="405" width="0.3944%" height="15" fill="rgb(241,108,4)" fg:x="56991" fg:w="312"/><text x="72.2856%" y="415.50"></text></g><g><title>neuralang::oob (1,599 samples, 2.02%)</title><rect x="72.4300%" y="405" width="2.0211%" height="15" fill="rgb(247,173,49)" fg:x="57303" fg:w="1599"/><text x="72.6800%" y="415.50">n..</text></g><g><title>neuralang::lef_border_trespass (1,081 samples, 1.37%)</title><rect x="73.0848%" y="389" width="1.3664%" height="15" fill="rgb(224,114,35)" fg:x="57821" fg:w="1081"/><text x="73.3348%" y="399.50"></text></g><g><title>neuralang::scale_2d (463 samples, 0.59%)</title><rect x="74.4511%" y="405" width="0.5852%" height="15" fill="rgb(245,159,27)" fg:x="58902" fg:w="463"/><text x="74.7011%" y="415.50"></text></g><g><title>neuralang::World::move_balls::{{closure}} (16,252 samples, 20.54%)</title><rect x="54.5067%" y="421" width="20.5422%" height="15" fill="rgb(245,172,44)" fg:x="43123" fg:w="16252"/><text x="54.7567%" y="431.50">neuralang::World::move_balls::{{..</text></g><g><title>rand::rng::Rng::sample (10 samples, 0.01%)</title><rect x="75.0363%" y="405" width="0.0126%" height="15" fill="rgb(236,23,11)" fg:x="59365" fg:w="10"/><text x="75.2863%" y="415.50"></text></g><g><title>&lt;rand::distributions::uniform::Uniform&lt;X&gt; as rand::distributions::distribution::Distribution&lt;X&gt;&gt;::sample (10 samples, 0.01%)</title><rect x="75.0363%" y="389" width="0.0126%" height="15" fill="rgb(205,117,38)" fg:x="59365" fg:w="10"/><text x="75.2863%" y="399.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformFloat&lt;f64&gt; as rand::distributions::uniform::UniformSampler&gt;::sample (10 samples, 0.01%)</title><rect x="75.0363%" y="373" width="0.0126%" height="15" fill="rgb(237,72,25)" fg:x="59365" fg:w="10"/><text x="75.2863%" y="383.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (16,381 samples, 20.71%)</title><rect x="54.3551%" y="437" width="20.7053%" height="15" fill="rgb(244,70,9)" fg:x="43003" fg:w="16381"/><text x="54.6051%" y="447.50">&lt;core::slice::iter::IterMut&lt;T&gt; as..</text></g><g><title>neuralang::main (9 samples, 0.01%)</title><rect x="75.0490%" y="421" width="0.0114%" height="15" fill="rgb(217,125,39)" fg:x="59375" fg:w="9"/><text x="75.2990%" y="431.50"></text></g><g><title>neuralang::World::move_balls (16,393 samples, 20.72%)</title><rect x="54.3551%" y="453" width="20.7205%" height="15" fill="rgb(235,36,10)" fg:x="43003" fg:w="16393"/><text x="54.6051%" y="463.50">neuralang::World::move_balls</text></g><g><title>rand::rngs::thread::thread_rng (11 samples, 0.01%)</title><rect x="75.0616%" y="437" width="0.0139%" height="15" fill="rgb(251,123,47)" fg:x="59385" fg:w="11"/><text x="75.3116%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (11 samples, 0.01%)</title><rect x="75.0616%" y="421" width="0.0139%" height="15" fill="rgb(221,13,13)" fg:x="59385" fg:w="11"/><text x="75.3116%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11 samples, 0.01%)</title><rect x="75.0616%" y="405" width="0.0139%" height="15" fill="rgb(238,131,9)" fg:x="59385" fg:w="11"/><text x="75.3116%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (55 samples, 0.07%)</title><rect x="75.4358%" y="437" width="0.0695%" height="15" fill="rgb(211,50,8)" fg:x="59681" fg:w="55"/><text x="75.6858%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (55 samples, 0.07%)</title><rect x="75.4358%" y="421" width="0.0695%" height="15" fill="rgb(245,182,24)" fg:x="59681" fg:w="55"/><text x="75.6858%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (55 samples, 0.07%)</title><rect x="75.4358%" y="405" width="0.0695%" height="15" fill="rgb(242,14,37)" fg:x="59681" fg:w="55"/><text x="75.6858%" y="415.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.05%)</title><rect x="75.5053%" y="437" width="0.0518%" height="15" fill="rgb(246,228,12)" fg:x="59736" fg:w="41"/><text x="75.7553%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.01%)</title><rect x="75.6228%" y="421" width="0.0114%" height="15" fill="rgb(213,55,15)" fg:x="59829" fg:w="9"/><text x="75.8728%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.01%)</title><rect x="75.6228%" y="405" width="0.0114%" height="15" fill="rgb(209,9,3)" fg:x="59829" fg:w="9"/><text x="75.8728%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.01%)</title><rect x="75.6228%" y="389" width="0.0114%" height="15" fill="rgb(230,59,30)" fg:x="59829" fg:w="9"/><text x="75.8728%" y="399.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.01%)</title><rect x="75.6228%" y="373" width="0.0114%" height="15" fill="rgb(209,121,21)" fg:x="59829" fg:w="9"/><text x="75.8728%" y="383.50"></text></g><g><title>_int_malloc (9 samples, 0.01%)</title><rect x="75.6228%" y="357" width="0.0114%" height="15" fill="rgb(220,109,13)" fg:x="59829" fg:w="9"/><text x="75.8728%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (83 samples, 0.10%)</title><rect x="75.5571%" y="437" width="0.1049%" height="15" fill="rgb(232,18,1)" fg:x="59777" fg:w="83"/><text x="75.8071%" y="447.50"></text></g><g><title>core::ptr::write (21 samples, 0.03%)</title><rect x="75.6355%" y="421" width="0.0265%" height="15" fill="rgb(215,41,42)" fg:x="59839" fg:w="21"/><text x="75.8855%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (375 samples, 0.47%)</title><rect x="75.6620%" y="405" width="0.4740%" height="15" fill="rgb(224,123,36)" fg:x="59860" fg:w="375"/><text x="75.9120%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (44 samples, 0.06%)</title><rect x="76.1360%" y="405" width="0.0556%" height="15" fill="rgb(240,125,3)" fg:x="60235" fg:w="44"/><text x="76.3860%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (523 samples, 0.66%)</title><rect x="76.1916%" y="405" width="0.6611%" height="15" fill="rgb(205,98,50)" fg:x="60279" fg:w="523"/><text x="76.4416%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (943 samples, 1.19%)</title><rect x="75.6620%" y="437" width="1.1919%" height="15" fill="rgb(205,185,37)" fg:x="59860" fg:w="943"/><text x="75.9120%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (943 samples, 1.19%)</title><rect x="75.6620%" y="421" width="1.1919%" height="15" fill="rgb(238,207,15)" fg:x="59860" fg:w="943"/><text x="75.9120%" y="431.50"></text></g><g><title>neuralang::add_2d (21 samples, 0.03%)</title><rect x="76.8539%" y="437" width="0.0265%" height="15" fill="rgb(213,199,42)" fg:x="60803" fg:w="21"/><text x="77.1039%" y="447.50"></text></g><g><title>neuralang::main (511 samples, 0.65%)</title><rect x="76.8805%" y="437" width="0.6459%" height="15" fill="rgb(235,201,11)" fg:x="60824" fg:w="511"/><text x="77.1305%" y="447.50"></text></g><g><title>neuralang::oob (70 samples, 0.09%)</title><rect x="77.5264%" y="437" width="0.0885%" height="15" fill="rgb(207,46,11)" fg:x="61335" fg:w="70"/><text x="77.7764%" y="447.50"></text></g><g><title>__fmod (748 samples, 0.95%)</title><rect x="79.2985%" y="421" width="0.9455%" height="15" fill="rgb(241,35,35)" fg:x="62737" fg:w="748"/><text x="79.5485%" y="431.50"></text></g><g><title>neuralang::pos_to_cell (9,245 samples, 11.69%)</title><rect x="77.6149%" y="437" width="11.6855%" height="15" fill="rgb(243,32,47)" fg:x="61405" fg:w="9245"/><text x="77.8649%" y="447.50">neuralang::pos_to..</text></g><g><title>__ieee754_fmod (7,165 samples, 9.06%)</title><rect x="80.2439%" y="421" width="9.0564%" height="15" fill="rgb(247,202,23)" fg:x="63485" fg:w="7165"/><text x="80.4939%" y="431.50">__ieee754_fmod</text></g><g><title>[unknown] (27 samples, 0.03%)</title><rect x="89.2663%" y="405" width="0.0341%" height="15" fill="rgb(219,102,11)" fg:x="70623" fg:w="27"/><text x="89.5163%" y="415.50"></text></g><g><title>[unknown] (25 samples, 0.03%)</title><rect x="89.2688%" y="389" width="0.0316%" height="15" fill="rgb(243,110,44)" fg:x="70625" fg:w="25"/><text x="89.5188%" y="399.50"></text></g><g><title>[unknown] (25 samples, 0.03%)</title><rect x="89.2688%" y="373" width="0.0316%" height="15" fill="rgb(222,74,54)" fg:x="70625" fg:w="25"/><text x="89.5188%" y="383.50"></text></g><g><title>[unknown] (25 samples, 0.03%)</title><rect x="89.2688%" y="357" width="0.0316%" height="15" fill="rgb(216,99,12)" fg:x="70625" fg:w="25"/><text x="89.5188%" y="367.50"></text></g><g><title>[unknown] (23 samples, 0.03%)</title><rect x="89.2713%" y="341" width="0.0291%" height="15" fill="rgb(226,22,26)" fg:x="70627" fg:w="23"/><text x="89.5213%" y="351.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="89.2738%" y="325" width="0.0265%" height="15" fill="rgb(217,163,10)" fg:x="70629" fg:w="21"/><text x="89.5238%" y="335.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="89.2751%" y="309" width="0.0253%" height="15" fill="rgb(213,25,53)" fg:x="70630" fg:w="20"/><text x="89.5251%" y="319.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="89.2764%" y="293" width="0.0240%" height="15" fill="rgb(252,105,26)" fg:x="70631" fg:w="19"/><text x="89.5264%" y="303.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="89.2802%" y="277" width="0.0202%" height="15" fill="rgb(220,39,43)" fg:x="70634" fg:w="16"/><text x="89.5302%" y="287.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="89.2814%" y="261" width="0.0190%" height="15" fill="rgb(229,68,48)" fg:x="70635" fg:w="15"/><text x="89.5314%" y="271.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="89.2903%" y="245" width="0.0101%" height="15" fill="rgb(252,8,32)" fg:x="70642" fg:w="8"/><text x="89.5403%" y="255.50"></text></g><g><title>neuralang::same_index (78 samples, 0.10%)</title><rect x="89.3004%" y="437" width="0.0986%" height="15" fill="rgb(223,20,43)" fg:x="70650" fg:w="78"/><text x="89.5504%" y="447.50"></text></g><g><title>neuralang::World::update_cells (11,335 samples, 14.33%)</title><rect x="75.0755%" y="453" width="14.3272%" height="15" fill="rgb(229,81,49)" fg:x="59396" fg:w="11335"/><text x="75.3255%" y="463.50">neuralang::World::upda..</text></g><g><title>neuralang::World::step (78,140 samples, 98.77%)</title><rect x="1.1970%" y="469" width="98.7676%" height="15" fill="rgb(236,28,36)" fg:x="947" fg:w="78140"/><text x="1.4470%" y="479.50">neuralang::World::step</text></g><g><title>neuralang::main (8,356 samples, 10.56%)</title><rect x="89.4028%" y="453" width="10.5618%" height="15" fill="rgb(249,185,26)" fg:x="70731" fg:w="8356"/><text x="89.6528%" y="463.50">neuralang::main</text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="99.9381%" y="437" width="0.0265%" height="15" fill="rgb(249,174,33)" fg:x="79066" fg:w="21"/><text x="100.1881%" y="447.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="99.9444%" y="421" width="0.0202%" height="15" fill="rgb(233,201,37)" fg:x="79071" fg:w="16"/><text x="100.1944%" y="431.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="99.9444%" y="405" width="0.0202%" height="15" fill="rgb(221,78,26)" fg:x="79071" fg:w="16"/><text x="100.1944%" y="415.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="99.9456%" y="389" width="0.0190%" height="15" fill="rgb(250,127,30)" fg:x="79072" fg:w="15"/><text x="100.1956%" y="399.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="99.9469%" y="373" width="0.0177%" height="15" fill="rgb(230,49,44)" fg:x="79073" fg:w="14"/><text x="100.1969%" y="383.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="99.9469%" y="357" width="0.0177%" height="15" fill="rgb(229,67,23)" fg:x="79073" fg:w="14"/><text x="100.1969%" y="367.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="99.9469%" y="341" width="0.0177%" height="15" fill="rgb(249,83,47)" fg:x="79073" fg:w="14"/><text x="100.1969%" y="351.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="99.9469%" y="325" width="0.0177%" height="15" fill="rgb(215,43,3)" fg:x="79073" fg:w="14"/><text x="100.1969%" y="335.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="99.9482%" y="309" width="0.0164%" height="15" fill="rgb(238,154,13)" fg:x="79074" fg:w="13"/><text x="100.1982%" y="319.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="99.9494%" y="293" width="0.0152%" height="15" fill="rgb(219,56,2)" fg:x="79075" fg:w="12"/><text x="100.1994%" y="303.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (15 samples, 0.02%)</title><rect x="99.9659%" y="373" width="0.0190%" height="15" fill="rgb(233,0,4)" fg:x="79088" fg:w="15"/><text x="100.2159%" y="383.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (15 samples, 0.02%)</title><rect x="99.9659%" y="357" width="0.0190%" height="15" fill="rgb(235,30,7)" fg:x="79088" fg:w="15"/><text x="100.2159%" y="367.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (15 samples, 0.02%)</title><rect x="99.9659%" y="341" width="0.0190%" height="15" fill="rgb(250,79,13)" fg:x="79088" fg:w="15"/><text x="100.2159%" y="351.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (15 samples, 0.02%)</title><rect x="99.9659%" y="325" width="0.0190%" height="15" fill="rgb(211,146,34)" fg:x="79088" fg:w="15"/><text x="100.2159%" y="335.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (14 samples, 0.02%)</title><rect x="99.9671%" y="309" width="0.0177%" height="15" fill="rgb(228,22,38)" fg:x="79089" fg:w="14"/><text x="100.2171%" y="319.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (14 samples, 0.02%)</title><rect x="99.9671%" y="293" width="0.0177%" height="15" fill="rgb(235,168,5)" fg:x="79089" fg:w="14"/><text x="100.2171%" y="303.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (14 samples, 0.02%)</title><rect x="99.9671%" y="277" width="0.0177%" height="15" fill="rgb(221,155,16)" fg:x="79089" fg:w="14"/><text x="100.2171%" y="287.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (14 samples, 0.02%)</title><rect x="99.9671%" y="261" width="0.0177%" height="15" fill="rgb(215,215,53)" fg:x="79089" fg:w="14"/><text x="100.2171%" y="271.50"></text></g><g><title>__GI___libc_write (14 samples, 0.02%)</title><rect x="99.9671%" y="245" width="0.0177%" height="15" fill="rgb(223,4,10)" fg:x="79089" fg:w="14"/><text x="100.2171%" y="255.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="99.9671%" y="229" width="0.0177%" height="15" fill="rgb(234,103,6)" fg:x="79089" fg:w="14"/><text x="100.2171%" y="239.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="99.9671%" y="213" width="0.0177%" height="15" fill="rgb(227,97,0)" fg:x="79089" fg:w="14"/><text x="100.2171%" y="223.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="99.9671%" y="197" width="0.0177%" height="15" fill="rgb(234,150,53)" fg:x="79089" fg:w="14"/><text x="100.2171%" y="207.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="99.9671%" y="181" width="0.0177%" height="15" fill="rgb(228,201,54)" fg:x="79089" fg:w="14"/><text x="100.2171%" y="191.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="99.9671%" y="165" width="0.0177%" height="15" fill="rgb(222,22,37)" fg:x="79089" fg:w="14"/><text x="100.2171%" y="175.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="99.9671%" y="149" width="0.0177%" height="15" fill="rgb(237,53,32)" fg:x="79089" fg:w="14"/><text x="100.2171%" y="159.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="99.9671%" y="133" width="0.0177%" height="15" fill="rgb(233,25,53)" fg:x="79089" fg:w="14"/><text x="100.2171%" y="143.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="99.9684%" y="117" width="0.0164%" height="15" fill="rgb(210,40,34)" fg:x="79090" fg:w="13"/><text x="100.2184%" y="127.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="99.9697%" y="101" width="0.0152%" height="15" fill="rgb(241,220,44)" fg:x="79091" fg:w="12"/><text x="100.2197%" y="111.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="99.9697%" y="85" width="0.0152%" height="15" fill="rgb(235,28,35)" fg:x="79091" fg:w="12"/><text x="100.2197%" y="95.50"></text></g><g><title>[unknown] (11 samples, 0.01%)</title><rect x="99.9709%" y="69" width="0.0139%" height="15" fill="rgb(210,56,17)" fg:x="79092" fg:w="11"/><text x="100.2209%" y="79.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="99.9722%" y="53" width="0.0126%" height="15" fill="rgb(224,130,29)" fg:x="79093" fg:w="10"/><text x="100.2222%" y="63.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="99.9722%" y="37" width="0.0126%" height="15" fill="rgb(235,212,8)" fg:x="79093" fg:w="10"/><text x="100.2222%" y="47.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (19 samples, 0.02%)</title><rect x="99.9646%" y="437" width="0.0240%" height="15" fill="rgb(223,33,50)" fg:x="79087" fg:w="19"/><text x="100.2146%" y="447.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (19 samples, 0.02%)</title><rect x="99.9646%" y="421" width="0.0240%" height="15" fill="rgb(219,149,13)" fg:x="79087" fg:w="19"/><text x="100.2146%" y="431.50"></text></g><g><title>std::io::Write::write_fmt (19 samples, 0.02%)</title><rect x="99.9646%" y="405" width="0.0240%" height="15" fill="rgb(250,156,29)" fg:x="79087" fg:w="19"/><text x="100.2146%" y="415.50"></text></g><g><title>core::fmt::write (19 samples, 0.02%)</title><rect x="99.9646%" y="389" width="0.0240%" height="15" fill="rgb(216,193,19)" fg:x="79087" fg:w="19"/><text x="100.2146%" y="399.50"></text></g><g><title>__libc_start_main_impl (78,164 samples, 98.80%)</title><rect x="1.1945%" y="741" width="98.7980%" height="15" fill="rgb(216,135,14)" fg:x="945" fg:w="78164"/><text x="1.4445%" y="751.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (78,164 samples, 98.80%)</title><rect x="1.1945%" y="725" width="98.7980%" height="15" fill="rgb(241,47,5)" fg:x="945" fg:w="78164"/><text x="1.4445%" y="735.50">__libc_start_call_main</text></g><g><title>main (78,164 samples, 98.80%)</title><rect x="1.1945%" y="709" width="98.7980%" height="15" fill="rgb(233,42,35)" fg:x="945" fg:w="78164"/><text x="1.4445%" y="719.50">main</text></g><g><title>std::rt::lang_start_internal (78,164 samples, 98.80%)</title><rect x="1.1945%" y="693" width="98.7980%" height="15" fill="rgb(231,13,6)" fg:x="945" fg:w="78164"/><text x="1.4445%" y="703.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (78,164 samples, 98.80%)</title><rect x="1.1945%" y="677" width="98.7980%" height="15" fill="rgb(207,181,40)" fg:x="945" fg:w="78164"/><text x="1.4445%" y="687.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (78,164 samples, 98.80%)</title><rect x="1.1945%" y="661" width="98.7980%" height="15" fill="rgb(254,173,49)" fg:x="945" fg:w="78164"/><text x="1.4445%" y="671.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (78,164 samples, 98.80%)</title><rect x="1.1945%" y="645" width="98.7980%" height="15" fill="rgb(221,1,38)" fg:x="945" fg:w="78164"/><text x="1.4445%" y="655.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (78,164 samples, 98.80%)</title><rect x="1.1945%" y="629" width="98.7980%" height="15" fill="rgb(206,124,46)" fg:x="945" fg:w="78164"/><text x="1.4445%" y="639.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (78,164 samples, 98.80%)</title><rect x="1.1945%" y="613" width="98.7980%" height="15" fill="rgb(249,21,11)" fg:x="945" fg:w="78164"/><text x="1.4445%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (78,164 samples, 98.80%)</title><rect x="1.1945%" y="597" width="98.7980%" height="15" fill="rgb(222,201,40)" fg:x="945" fg:w="78164"/><text x="1.4445%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (78,164 samples, 98.80%)</title><rect x="1.1945%" y="581" width="98.7980%" height="15" fill="rgb(235,61,29)" fg:x="945" fg:w="78164"/><text x="1.4445%" y="591.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (78,164 samples, 98.80%)</title><rect x="1.1945%" y="565" width="98.7980%" height="15" fill="rgb(219,207,3)" fg:x="945" fg:w="78164"/><text x="1.4445%" y="575.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (78,164 samples, 98.80%)</title><rect x="1.1945%" y="549" width="98.7980%" height="15" fill="rgb(222,56,46)" fg:x="945" fg:w="78164"/><text x="1.4445%" y="559.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (78,164 samples, 98.80%)</title><rect x="1.1945%" y="533" width="98.7980%" height="15" fill="rgb(239,76,54)" fg:x="945" fg:w="78164"/><text x="1.4445%" y="543.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (78,164 samples, 98.80%)</title><rect x="1.1945%" y="517" width="98.7980%" height="15" fill="rgb(231,124,27)" fg:x="945" fg:w="78164"/><text x="1.4445%" y="527.50">core::ops::function::FnOnce::call_once</text></g><g><title>neuralang::main (78,164 samples, 98.80%)</title><rect x="1.1945%" y="501" width="98.7980%" height="15" fill="rgb(249,195,6)" fg:x="945" fg:w="78164"/><text x="1.4445%" y="511.50">neuralang::main</text></g><g><title>neuralang::run (78,164 samples, 98.80%)</title><rect x="1.1945%" y="485" width="98.7980%" height="15" fill="rgb(237,174,47)" fg:x="945" fg:w="78164"/><text x="1.4445%" y="495.50">neuralang::run</text></g><g><title>std::io::stdio::_print (22 samples, 0.03%)</title><rect x="99.9646%" y="469" width="0.0278%" height="15" fill="rgb(206,201,31)" fg:x="79087" fg:w="22"/><text x="100.2146%" y="479.50"></text></g><g><title>std::io::stdio::print_to (22 samples, 0.03%)</title><rect x="99.9646%" y="453" width="0.0278%" height="15" fill="rgb(231,57,52)" fg:x="79087" fg:w="22"/><text x="100.2146%" y="463.50"></text></g><g><title>neuralang (79,110 samples, 99.99%)</title><rect x="0.0000%" y="773" width="99.9937%" height="15" fill="rgb(248,177,22)" fg:x="0" fg:w="79110"/><text x="0.2500%" y="783.50">neuralang</text></g><g><title>_start (78,165 samples, 98.80%)</title><rect x="1.1945%" y="757" width="98.7992%" height="15" fill="rgb(215,211,37)" fg:x="945" fg:w="78165"/><text x="1.4445%" y="767.50">_start</text></g><g><title>all (79,115 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(241,128,51)" fg:x="0" fg:w="79115"/><text x="0.2500%" y="799.50"></text></g></svg></svg>