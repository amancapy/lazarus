<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="805.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="5625"><g><title>[[stack]] (7 samples, 0.12%)</title><rect x="0.0000%" y="741" width="0.1244%" height="15" fill="rgb(208,199,53)" fg:x="0" fg:w="7"/><text x="0.2500%" y="751.50"></text></g><g><title>&lt;rand::distributions::uniform::Uniform&lt;X&gt; as rand::distributions::distribution::Distribution&lt;X&gt;&gt;::sample (7 samples, 0.12%)</title><rect x="0.0000%" y="725" width="0.1244%" height="15" fill="rgb(237,106,43)" fg:x="0" fg:w="7"/><text x="0.2500%" y="735.50"></text></g><g><title>&lt;rand::distributions::uniform::Uniform&lt;X&gt; as rand::distributions::distribution::Distribution&lt;X&gt;&gt;::sample (3 samples, 0.05%)</title><rect x="0.1422%" y="725" width="0.0533%" height="15" fill="rgb(237,106,43)" fg:x="8" fg:w="3"/><text x="0.3922%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1956%" y="725" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="11" fg:w="1"/><text x="0.4456%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1956%" y="709" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="11" fg:w="1"/><text x="0.4456%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1956%" y="693" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="11" fg:w="1"/><text x="0.4456%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1956%" y="677" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="11" fg:w="1"/><text x="0.4456%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1956%" y="661" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="11" fg:w="1"/><text x="0.4456%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1956%" y="645" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="11" fg:w="1"/><text x="0.4456%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1956%" y="629" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="11" fg:w="1"/><text x="0.4456%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1956%" y="613" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="11" fg:w="1"/><text x="0.4456%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1956%" y="597" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="11" fg:w="1"/><text x="0.4456%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1956%" y="581" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="11" fg:w="1"/><text x="0.4456%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1956%" y="565" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="11" fg:w="1"/><text x="0.4456%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1956%" y="549" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="11" fg:w="1"/><text x="0.4456%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1956%" y="533" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="11" fg:w="1"/><text x="0.4456%" y="543.50"></text></g><g><title>__ieee754_fmod (5 samples, 0.09%)</title><rect x="0.2133%" y="725" width="0.0889%" height="15" fill="rgb(233,205,32)" fg:x="12" fg:w="5"/><text x="0.4633%" y="735.50"></text></g><g><title>neuralang::World::move_balls (1 samples, 0.02%)</title><rect x="0.3022%" y="693" width="0.0178%" height="15" fill="rgb(220,185,12)" fg:x="17" fg:w="1"/><text x="0.5522%" y="703.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (1 samples, 0.02%)</title><rect x="0.3022%" y="677" width="0.0178%" height="15" fill="rgb(250,66,38)" fg:x="17" fg:w="1"/><text x="0.5522%" y="687.50"></text></g><g><title>neuralang::World::move_balls::{{closure}} (1 samples, 0.02%)</title><rect x="0.3022%" y="661" width="0.0178%" height="15" fill="rgb(245,138,39)" fg:x="17" fg:w="1"/><text x="0.5522%" y="671.50"></text></g><g><title>rand::rng::Rng::sample (1 samples, 0.02%)</title><rect x="0.3022%" y="645" width="0.0178%" height="15" fill="rgb(223,149,19)" fg:x="17" fg:w="1"/><text x="0.5522%" y="655.50"></text></g><g><title>neuralang::main (10 samples, 0.18%)</title><rect x="0.3022%" y="725" width="0.1778%" height="15" fill="rgb(238,97,6)" fg:x="17" fg:w="10"/><text x="0.5522%" y="735.50"></text></g><g><title>neuralang::World::step (10 samples, 0.18%)</title><rect x="0.3022%" y="709" width="0.1778%" height="15" fill="rgb(223,116,28)" fg:x="17" fg:w="10"/><text x="0.5522%" y="719.50"></text></g><g><title>neuralang::World::update_cells (9 samples, 0.16%)</title><rect x="0.3200%" y="693" width="0.1600%" height="15" fill="rgb(210,128,41)" fg:x="18" fg:w="9"/><text x="0.5700%" y="703.50"></text></g><g><title>neuralang::pos_to_cell (6 samples, 0.11%)</title><rect x="0.3733%" y="677" width="0.1067%" height="15" fill="rgb(240,128,4)" fg:x="21" fg:w="6"/><text x="0.6233%" y="687.50"></text></g><g><title>[unknown] (21 samples, 0.37%)</title><rect x="0.1244%" y="741" width="0.3733%" height="15" fill="rgb(227,28,50)" fg:x="7" fg:w="21"/><text x="0.3744%" y="751.50"></text></g><g><title>rand::rngs::adapter::reseeding::fork::get_fork_counter (1 samples, 0.02%)</title><rect x="0.4800%" y="725" width="0.0178%" height="15" fill="rgb(214,114,52)" fg:x="27" fg:w="1"/><text x="0.7300%" y="735.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (23 samples, 0.41%)</title><rect x="14.5956%" y="437" width="0.4089%" height="15" fill="rgb(241,174,43)" fg:x="821" fg:w="23"/><text x="14.8456%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (23 samples, 0.41%)</title><rect x="14.5956%" y="421" width="0.4089%" height="15" fill="rgb(238,123,24)" fg:x="821" fg:w="23"/><text x="14.8456%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (12 samples, 0.21%)</title><rect x="15.0044%" y="405" width="0.2133%" height="15" fill="rgb(254,116,45)" fg:x="844" fg:w="12"/><text x="15.2544%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (21 samples, 0.37%)</title><rect x="15.0044%" y="437" width="0.3733%" height="15" fill="rgb(215,149,39)" fg:x="844" fg:w="21"/><text x="15.2544%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (21 samples, 0.37%)</title><rect x="15.0044%" y="421" width="0.3733%" height="15" fill="rgb(250,51,46)" fg:x="844" fg:w="21"/><text x="15.2544%" y="431.50"></text></g><g><title>neuralang::main (9 samples, 0.16%)</title><rect x="15.2178%" y="405" width="0.1600%" height="15" fill="rgb(238,97,6)" fg:x="856" fg:w="9"/><text x="15.4678%" y="415.50"></text></g><g><title>&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.23%)</title><rect x="15.3778%" y="421" width="0.2311%" height="15" fill="rgb(239,168,18)" fg:x="865" fg:w="13"/><text x="15.6278%" y="431.50"></text></g><g><title>core::ops::index_range::IndexRange::next_unchecked (13 samples, 0.23%)</title><rect x="15.3778%" y="405" width="0.2311%" height="15" fill="rgb(241,57,25)" fg:x="865" fg:w="13"/><text x="15.6278%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.04%)</title><rect x="15.6089%" y="357" width="0.0356%" height="15" fill="rgb(236,102,29)" fg:x="878" fg:w="2"/><text x="15.8589%" y="367.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.41%)</title><rect x="15.3778%" y="437" width="0.4089%" height="15" fill="rgb(225,49,30)" fg:x="865" fg:w="23"/><text x="15.6278%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (10 samples, 0.18%)</title><rect x="15.6089%" y="421" width="0.1778%" height="15" fill="rgb(254,35,30)" fg:x="878" fg:w="10"/><text x="15.8589%" y="431.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (10 samples, 0.18%)</title><rect x="15.6089%" y="405" width="0.1778%" height="15" fill="rgb(234,60,27)" fg:x="878" fg:w="10"/><text x="15.8589%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (10 samples, 0.18%)</title><rect x="15.6089%" y="389" width="0.1778%" height="15" fill="rgb(231,175,33)" fg:x="878" fg:w="10"/><text x="15.8589%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (10 samples, 0.18%)</title><rect x="15.6089%" y="373" width="0.1778%" height="15" fill="rgb(233,50,28)" fg:x="878" fg:w="10"/><text x="15.8589%" y="383.50"></text></g><g><title>neuralang::main (8 samples, 0.14%)</title><rect x="15.6444%" y="357" width="0.1422%" height="15" fill="rgb(238,97,6)" fg:x="880" fg:w="8"/><text x="15.8944%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.04%)</title><rect x="16.6044%" y="389" width="0.0356%" height="15" fill="rgb(236,102,29)" fg:x="934" fg:w="2"/><text x="16.8544%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 0.87%)</title><rect x="15.7867%" y="437" width="0.8711%" height="15" fill="rgb(236,210,2)" fg:x="888" fg:w="49"/><text x="16.0367%" y="447.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (3 samples, 0.05%)</title><rect x="16.6044%" y="421" width="0.0533%" height="15" fill="rgb(228,141,2)" fg:x="934" fg:w="3"/><text x="16.8544%" y="431.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (3 samples, 0.05%)</title><rect x="16.6044%" y="405" width="0.0533%" height="15" fill="rgb(237,0,21)" fg:x="934" fg:w="3"/><text x="16.8544%" y="415.50"></text></g><g><title>neuralang::main (1 samples, 0.02%)</title><rect x="16.6400%" y="389" width="0.0178%" height="15" fill="rgb(238,97,6)" fg:x="936" fg:w="1"/><text x="16.8900%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="16.6578%" y="437" width="0.0356%" height="15" fill="rgb(227,28,50)" fg:x="937" fg:w="2"/><text x="16.9078%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="16.6578%" y="421" width="0.0356%" height="15" fill="rgb(227,28,50)" fg:x="937" fg:w="2"/><text x="16.9078%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="16.6578%" y="405" width="0.0356%" height="15" fill="rgb(227,28,50)" fg:x="937" fg:w="2"/><text x="16.9078%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="16.6578%" y="389" width="0.0356%" height="15" fill="rgb(227,28,50)" fg:x="937" fg:w="2"/><text x="16.9078%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="16.6578%" y="373" width="0.0356%" height="15" fill="rgb(227,28,50)" fg:x="937" fg:w="2"/><text x="16.9078%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="16.6578%" y="357" width="0.0356%" height="15" fill="rgb(227,28,50)" fg:x="937" fg:w="2"/><text x="16.9078%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="16.6578%" y="341" width="0.0356%" height="15" fill="rgb(227,28,50)" fg:x="937" fg:w="2"/><text x="16.9078%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="16.6578%" y="325" width="0.0356%" height="15" fill="rgb(227,28,50)" fg:x="937" fg:w="2"/><text x="16.9078%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="16.6578%" y="309" width="0.0356%" height="15" fill="rgb(227,28,50)" fg:x="937" fg:w="2"/><text x="16.9078%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="16.6578%" y="293" width="0.0356%" height="15" fill="rgb(227,28,50)" fg:x="937" fg:w="2"/><text x="16.9078%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::as_ref (562 samples, 9.99%)</title><rect x="16.6933%" y="437" width="9.9911%" height="15" fill="rgb(253,187,42)" fg:x="939" fg:w="562"/><text x="16.9433%" y="447.50">core::result::..</text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.6667%" y="421" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="1500" fg:w="1"/><text x="26.9167%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.6667%" y="405" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="1500" fg:w="1"/><text x="26.9167%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.6667%" y="389" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="1500" fg:w="1"/><text x="26.9167%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.6667%" y="373" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="1500" fg:w="1"/><text x="26.9167%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.6667%" y="357" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="1500" fg:w="1"/><text x="26.9167%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.6667%" y="341" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="1500" fg:w="1"/><text x="26.9167%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.6667%" y="325" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="1500" fg:w="1"/><text x="26.9167%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.6667%" y="309" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="1500" fg:w="1"/><text x="26.9167%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.6667%" y="293" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="1500" fg:w="1"/><text x="26.9167%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.6667%" y="277" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="1500" fg:w="1"/><text x="26.9167%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.6667%" y="261" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="1500" fg:w="1"/><text x="26.9167%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="26.6667%" y="245" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="1500" fg:w="1"/><text x="26.9167%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (146 samples, 2.60%)</title><rect x="26.6844%" y="437" width="2.5956%" height="15" fill="rgb(221,25,45)" fg:x="1501" fg:w="146"/><text x="26.9344%" y="447.50">co..</text></g><g><title>neuralang::add_2d (1 samples, 0.02%)</title><rect x="29.2800%" y="437" width="0.0178%" height="15" fill="rgb(209,139,6)" fg:x="1647" fg:w="1"/><text x="29.5300%" y="447.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="38.0267%" y="421" width="0.1244%" height="15" fill="rgb(227,28,50)" fg:x="2139" fg:w="7"/><text x="38.2767%" y="431.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="38.0267%" y="405" width="0.1244%" height="15" fill="rgb(227,28,50)" fg:x="2139" fg:w="7"/><text x="38.2767%" y="415.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="38.0267%" y="389" width="0.1244%" height="15" fill="rgb(227,28,50)" fg:x="2139" fg:w="7"/><text x="38.2767%" y="399.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="38.0267%" y="373" width="0.1244%" height="15" fill="rgb(227,28,50)" fg:x="2139" fg:w="7"/><text x="38.2767%" y="383.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="38.0267%" y="357" width="0.1244%" height="15" fill="rgb(227,28,50)" fg:x="2139" fg:w="7"/><text x="38.2767%" y="367.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="38.0267%" y="341" width="0.1244%" height="15" fill="rgb(227,28,50)" fg:x="2139" fg:w="7"/><text x="38.2767%" y="351.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="38.0267%" y="325" width="0.1244%" height="15" fill="rgb(227,28,50)" fg:x="2139" fg:w="7"/><text x="38.2767%" y="335.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="38.0267%" y="309" width="0.1244%" height="15" fill="rgb(227,28,50)" fg:x="2139" fg:w="7"/><text x="38.2767%" y="319.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="38.0267%" y="293" width="0.1244%" height="15" fill="rgb(227,28,50)" fg:x="2139" fg:w="7"/><text x="38.2767%" y="303.50"></text></g><g><title>[unknown] (7 samples, 0.12%)</title><rect x="38.0267%" y="277" width="0.1244%" height="15" fill="rgb(227,28,50)" fg:x="2139" fg:w="7"/><text x="38.2767%" y="287.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="38.0444%" y="261" width="0.1067%" height="15" fill="rgb(227,28,50)" fg:x="2140" fg:w="6"/><text x="38.2944%" y="271.50"></text></g><g><title>[unknown] (6 samples, 0.11%)</title><rect x="38.0444%" y="245" width="0.1067%" height="15" fill="rgb(227,28,50)" fg:x="2140" fg:w="6"/><text x="38.2944%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="38.0622%" y="229" width="0.0889%" height="15" fill="rgb(227,28,50)" fg:x="2141" fg:w="5"/><text x="38.3122%" y="239.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powi (58 samples, 1.03%)</title><rect x="44.9422%" y="405" width="1.0311%" height="15" fill="rgb(209,154,12)" fg:x="2528" fg:w="58"/><text x="45.1922%" y="415.50"></text></g><g><title>neuralang::balls_collide (1,868 samples, 33.21%)</title><rect x="29.2978%" y="437" width="33.2089%" height="15" fill="rgb(252,94,48)" fg:x="1648" fg:w="1868"/><text x="29.5478%" y="447.50">neuralang::balls_collide</text></g><g><title>neuralang::dist_2d (1,370 samples, 24.36%)</title><rect x="38.1511%" y="421" width="24.3556%" height="15" fill="rgb(226,185,1)" fg:x="2146" fg:w="1370"/><text x="38.4011%" y="431.50">neuralang::dist_2d</text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (930 samples, 16.53%)</title><rect x="45.9733%" y="405" width="16.5333%" height="15" fill="rgb(244,38,4)" fg:x="2586" fg:w="930"/><text x="46.2233%" y="415.50">std::f64::&lt;impl f64&gt;::sqrt</text></g><g><title>neuralang::main (276 samples, 4.91%)</title><rect x="62.5067%" y="437" width="4.9067%" height="15" fill="rgb(238,97,6)" fg:x="3516" fg:w="276"/><text x="62.7567%" y="447.50">neural..</text></g><g><title>neuralang::two_to_one (10 samples, 0.18%)</title><rect x="67.4133%" y="437" width="0.1778%" height="15" fill="rgb(222,12,4)" fg:x="3792" fg:w="10"/><text x="67.6633%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;V&gt; as splitmut::SplitMut&lt;usize,V&gt;&gt;::get1_mut (564 samples, 10.03%)</title><rect x="77.2622%" y="421" width="10.0267%" height="15" fill="rgb(230,71,42)" fg:x="4346" fg:w="564"/><text x="77.5122%" y="431.50">&lt;alloc::vec::V..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (564 samples, 10.03%)</title><rect x="77.2622%" y="405" width="10.0267%" height="15" fill="rgb(220,26,30)" fg:x="4346" fg:w="564"/><text x="77.5122%" y="415.50">core::slice::&lt;..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (564 samples, 10.03%)</title><rect x="77.2622%" y="389" width="10.0267%" height="15" fill="rgb(247,215,52)" fg:x="4346" fg:w="564"/><text x="77.5122%" y="399.50">&lt;usize as core..</text></g><g><title>splitmut::check_r (23 samples, 0.41%)</title><rect x="87.2889%" y="421" width="0.4089%" height="15" fill="rgb(216,49,6)" fg:x="4910" fg:w="23"/><text x="87.5389%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="87.6622%" y="405" width="0.0356%" height="15" fill="rgb(227,28,50)" fg:x="4931" fg:w="2"/><text x="87.9122%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="87.6622%" y="389" width="0.0356%" height="15" fill="rgb(227,28,50)" fg:x="4931" fg:w="2"/><text x="87.9122%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="87.6622%" y="373" width="0.0356%" height="15" fill="rgb(227,28,50)" fg:x="4931" fg:w="2"/><text x="87.9122%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="87.6622%" y="357" width="0.0356%" height="15" fill="rgb(227,28,50)" fg:x="4931" fg:w="2"/><text x="87.9122%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="87.6622%" y="341" width="0.0356%" height="15" fill="rgb(227,28,50)" fg:x="4931" fg:w="2"/><text x="87.9122%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="87.6622%" y="325" width="0.0356%" height="15" fill="rgb(227,28,50)" fg:x="4931" fg:w="2"/><text x="87.9122%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.6800%" y="309" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="4932" fg:w="1"/><text x="87.9300%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.6800%" y="293" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="4932" fg:w="1"/><text x="87.9300%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="87.6800%" y="277" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="4932" fg:w="1"/><text x="87.9300%" y="287.50"></text></g><g><title>splitmut::from_r (30 samples, 0.53%)</title><rect x="87.6978%" y="421" width="0.5333%" height="15" fill="rgb(219,26,40)" fg:x="4933" fg:w="30"/><text x="87.9478%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (30 samples, 0.53%)</title><rect x="87.6978%" y="405" width="0.5333%" height="15" fill="rgb(248,23,38)" fg:x="4933" fg:w="30"/><text x="87.9478%" y="415.50"></text></g><g><title>neuralang::World::check_collisions (5,011 samples, 89.08%)</title><rect x="0.4978%" y="453" width="89.0844%" height="15" fill="rgb(222,158,21)" fg:x="28" fg:w="5011"/><text x="0.7478%" y="463.50">neuralang::World::check_collisions</text></g><g><title>splitmut::SplitMut::get2_mut (1,237 samples, 21.99%)</title><rect x="67.5911%" y="437" width="21.9911%" height="15" fill="rgb(209,14,21)" fg:x="3802" fg:w="1237"/><text x="67.8411%" y="447.50">splitmut::SplitMut::get2_mut</text></g><g><title>splitmut::to_r (76 samples, 1.35%)</title><rect x="88.2311%" y="421" width="1.3511%" height="15" fill="rgb(238,24,49)" fg:x="4963" fg:w="76"/><text x="88.4811%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (76 samples, 1.35%)</title><rect x="88.2311%" y="405" width="1.3511%" height="15" fill="rgb(254,35,30)" fg:x="4963" fg:w="76"/><text x="88.4811%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.5644%" y="389" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5038" fg:w="1"/><text x="89.8144%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.5644%" y="373" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5038" fg:w="1"/><text x="89.8144%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.5644%" y="357" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5038" fg:w="1"/><text x="89.8144%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.5644%" y="341" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5038" fg:w="1"/><text x="89.8144%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.5644%" y="325" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5038" fg:w="1"/><text x="89.8144%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.5644%" y="309" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5038" fg:w="1"/><text x="89.8144%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.5644%" y="293" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5038" fg:w="1"/><text x="89.8144%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.5644%" y="277" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5038" fg:w="1"/><text x="89.8144%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.5644%" y="261" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5038" fg:w="1"/><text x="89.8144%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.5644%" y="245" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5038" fg:w="1"/><text x="89.8144%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.5644%" y="229" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5038" fg:w="1"/><text x="89.8144%" y="239.50"></text></g><g><title>neuralang::main (1 samples, 0.02%)</title><rect x="89.6000%" y="405" width="0.0178%" height="15" fill="rgb(238,97,6)" fg:x="5040" fg:w="1"/><text x="89.8500%" y="415.50"></text></g><g><title>neuralang::oob (3 samples, 0.05%)</title><rect x="89.6178%" y="405" width="0.0533%" height="15" fill="rgb(214,24,53)" fg:x="5041" fg:w="3"/><text x="89.8678%" y="415.50"></text></g><g><title>&lt;rand::distributions::uniform::Uniform&lt;X&gt; as rand::distributions::distribution::Distribution&lt;X&gt;&gt;::sample (1 samples, 0.02%)</title><rect x="89.7067%" y="373" width="0.0178%" height="15" fill="rgb(237,106,43)" fg:x="5046" fg:w="1"/><text x="89.9567%" y="383.50"></text></g><g><title>&lt;rand::distributions::uniform::Uniform&lt;X&gt; as rand::distributions::distribution::Distribution&lt;X&gt;&gt;::sample (1 samples, 0.02%)</title><rect x="89.8489%" y="293" width="0.0178%" height="15" fill="rgb(237,106,43)" fg:x="5054" fg:w="1"/><text x="90.0989%" y="303.50"></text></g><g><title>&lt;rand::distributions::uniform::Uniform&lt;X&gt; as rand::distributions::distribution::Distribution&lt;X&gt;&gt;::sample (1 samples, 0.02%)</title><rect x="89.9733%" y="277" width="0.0178%" height="15" fill="rgb(237,106,43)" fg:x="5061" fg:w="1"/><text x="90.2233%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.9911%" y="277" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5062" fg:w="1"/><text x="90.2411%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.9911%" y="261" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5062" fg:w="1"/><text x="90.2411%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.9911%" y="245" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5062" fg:w="1"/><text x="90.2411%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.9911%" y="229" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5062" fg:w="1"/><text x="90.2411%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.9911%" y="213" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5062" fg:w="1"/><text x="90.2411%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.9911%" y="197" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5062" fg:w="1"/><text x="90.2411%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.9911%" y="181" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5062" fg:w="1"/><text x="90.2411%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.9911%" y="165" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5062" fg:w="1"/><text x="90.2411%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.9911%" y="149" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5062" fg:w="1"/><text x="90.2411%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.9911%" y="133" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5062" fg:w="1"/><text x="90.2411%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.9911%" y="117" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5062" fg:w="1"/><text x="90.2411%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.9911%" y="101" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5062" fg:w="1"/><text x="90.2411%" y="111.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,ppv_lite86::x86_64::YesS4,NI&gt; as ppv_lite86::types::Vec4&lt;u32&gt;&gt;::insert (2 samples, 0.04%)</title><rect x="90.0267%" y="165" width="0.0356%" height="15" fill="rgb(220,154,41)" fg:x="5064" fg:w="2"/><text x="90.2767%" y="175.50"></text></g><g><title>core::core_arch::x86::sse41::_mm_insert_epi32 (2 samples, 0.04%)</title><rect x="90.0267%" y="149" width="0.0356%" height="15" fill="rgb(213,2,25)" fg:x="5064" fg:w="2"/><text x="90.2767%" y="159.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.02%)</title><rect x="90.0622%" y="165" width="0.0178%" height="15" fill="rgb(246,165,53)" fg:x="5066" fg:w="1"/><text x="90.3122%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.02%)</title><rect x="90.0622%" y="149" width="0.0178%" height="15" fill="rgb(226,134,37)" fg:x="5066" fg:w="1"/><text x="90.3122%" y="159.50"></text></g><g><title>ppv_lite86::x86_64::sse2::avx2::&lt;impl ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 4]&gt; for ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt;,ppv_lite86::x86_64::sse2::G0&gt;&gt;::from_lanes (1 samples, 0.02%)</title><rect x="90.0800%" y="165" width="0.0178%" height="15" fill="rgb(213,23,23)" fg:x="5067" fg:w="1"/><text x="90.3300%" y="175.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 2]&gt;&gt;::from_lanes (1 samples, 0.02%)</title><rect x="90.0800%" y="149" width="0.0178%" height="15" fill="rgb(234,109,49)" fg:x="5067" fg:w="1"/><text x="90.3300%" y="159.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_m128i (1 samples, 0.02%)</title><rect x="90.0800%" y="133" width="0.0178%" height="15" fill="rgb(212,16,31)" fg:x="5067" fg:w="1"/><text x="90.3300%" y="143.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_m128i (1 samples, 0.02%)</title><rect x="90.0800%" y="117" width="0.0178%" height="15" fill="rgb(207,15,33)" fg:x="5067" fg:w="1"/><text x="90.3300%" y="127.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_m128 (1 samples, 0.02%)</title><rect x="90.0800%" y="101" width="0.0178%" height="15" fill="rgb(235,131,3)" fg:x="5067" fg:w="1"/><text x="90.3300%" y="111.50"></text></g><g><title>ppv_lite86::x86_64::sse2::avx2::&lt;impl ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 4]&gt; for ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt;,ppv_lite86::x86_64::sse2::G0&gt;&gt;::to_lanes (1 samples, 0.02%)</title><rect x="90.0978%" y="165" width="0.0178%" height="15" fill="rgb(219,12,5)" fg:x="5068" fg:w="1"/><text x="90.3478%" y="175.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 2]&gt;&gt;::to_lanes (1 samples, 0.02%)</title><rect x="90.0978%" y="149" width="0.0178%" height="15" fill="rgb(214,83,1)" fg:x="5068" fg:w="1"/><text x="90.3478%" y="159.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_extracti128_si256 (1 samples, 0.02%)</title><rect x="90.0978%" y="133" width="0.0178%" height="15" fill="rgb(237,79,21)" fg:x="5068" fg:w="1"/><text x="90.3478%" y="143.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (14 samples, 0.25%)</title><rect x="90.1156%" y="149" width="0.2489%" height="15" fill="rgb(210,46,11)" fg:x="5069" fg:w="14"/><text x="90.3656%" y="159.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (14 samples, 0.25%)</title><rect x="90.1156%" y="133" width="0.2489%" height="15" fill="rgb(237,167,49)" fg:x="5069" fg:w="14"/><text x="90.3656%" y="143.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (14 samples, 0.25%)</title><rect x="90.1156%" y="117" width="0.2489%" height="15" fill="rgb(216,29,43)" fg:x="5069" fg:w="14"/><text x="90.3656%" y="127.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (14 samples, 0.25%)</title><rect x="90.1156%" y="101" width="0.2489%" height="15" fill="rgb(253,202,37)" fg:x="5069" fg:w="14"/><text x="90.3656%" y="111.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::bit::BitXor&gt;::bitxor (3 samples, 0.05%)</title><rect x="90.3644%" y="149" width="0.0533%" height="15" fill="rgb(222,52,21)" fg:x="5083" fg:w="3"/><text x="90.6144%" y="159.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (3 samples, 0.05%)</title><rect x="90.3644%" y="133" width="0.0533%" height="15" fill="rgb(222,23,43)" fg:x="5083" fg:w="3"/><text x="90.6144%" y="143.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (3 samples, 0.05%)</title><rect x="90.3644%" y="117" width="0.0533%" height="15" fill="rgb(205,136,32)" fg:x="5083" fg:w="3"/><text x="90.6144%" y="127.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (2 samples, 0.04%)</title><rect x="90.4178%" y="149" width="0.0356%" height="15" fill="rgb(232,224,17)" fg:x="5086" fg:w="2"/><text x="90.6678%" y="159.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (2 samples, 0.04%)</title><rect x="90.4178%" y="133" width="0.0356%" height="15" fill="rgb(244,22,43)" fg:x="5086" fg:w="2"/><text x="90.6678%" y="143.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (2 samples, 0.04%)</title><rect x="90.4178%" y="117" width="0.0356%" height="15" fill="rgb(232,197,20)" fg:x="5086" fg:w="2"/><text x="90.6678%" y="127.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (5 samples, 0.09%)</title><rect x="90.4533%" y="117" width="0.0889%" height="15" fill="rgb(245,37,1)" fg:x="5088" fg:w="5"/><text x="90.7033%" y="127.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (6 samples, 0.11%)</title><rect x="90.4533%" y="149" width="0.1067%" height="15" fill="rgb(224,224,19)" fg:x="5088" fg:w="6"/><text x="90.7033%" y="159.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (6 samples, 0.11%)</title><rect x="90.4533%" y="133" width="0.1067%" height="15" fill="rgb(226,22,45)" fg:x="5088" fg:w="6"/><text x="90.7033%" y="143.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (1 samples, 0.02%)</title><rect x="90.5422%" y="117" width="0.0178%" height="15" fill="rgb(208,37,5)" fg:x="5093" fg:w="1"/><text x="90.7922%" y="127.50"></text></g><g><title>core::core_arch::x86::m256iExt::as_i32x8 (1 samples, 0.02%)</title><rect x="90.5422%" y="101" width="0.0178%" height="15" fill="rgb(237,0,11)" fg:x="5093" fg:w="1"/><text x="90.7922%" y="111.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (7 samples, 0.12%)</title><rect x="90.5600%" y="149" width="0.1244%" height="15" fill="rgb(231,224,19)" fg:x="5094" fg:w="7"/><text x="90.8100%" y="159.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (7 samples, 0.12%)</title><rect x="90.5600%" y="133" width="0.1244%" height="15" fill="rgb(219,22,45)" fg:x="5094" fg:w="7"/><text x="90.8100%" y="143.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (7 samples, 0.12%)</title><rect x="90.5600%" y="117" width="0.1244%" height="15" fill="rgb(232,197,20)" fg:x="5094" fg:w="7"/><text x="90.8100%" y="127.50"></text></g><g><title>core::core_arch::x86::m256iExt::as_u8x32 (2 samples, 0.04%)</title><rect x="90.6489%" y="101" width="0.0356%" height="15" fill="rgb(207,99,8)" fg:x="5099" fg:w="2"/><text x="90.8989%" y="111.50"></text></g><g><title>rand_chacha::guts::round (37 samples, 0.66%)</title><rect x="90.1156%" y="165" width="0.6578%" height="15" fill="rgb(243,178,7)" fg:x="5069" fg:w="37"/><text x="90.3656%" y="175.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (5 samples, 0.09%)</title><rect x="90.6844%" y="149" width="0.0889%" height="15" fill="rgb(232,224,19)" fg:x="5101" fg:w="5"/><text x="90.9344%" y="159.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (5 samples, 0.09%)</title><rect x="90.6844%" y="133" width="0.0889%" height="15" fill="rgb(221,22,45)" fg:x="5101" fg:w="5"/><text x="90.9344%" y="143.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (5 samples, 0.09%)</title><rect x="90.6844%" y="117" width="0.0889%" height="15" fill="rgb(245,37,1)" fg:x="5101" fg:w="5"/><text x="90.9344%" y="127.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (44 samples, 0.78%)</title><rect x="90.0089%" y="245" width="0.7822%" height="15" fill="rgb(221,118,51)" fg:x="5063" fg:w="44"/><text x="90.2589%" y="255.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (44 samples, 0.78%)</title><rect x="90.0089%" y="229" width="0.7822%" height="15" fill="rgb(211,126,28)" fg:x="5063" fg:w="44"/><text x="90.2589%" y="239.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (44 samples, 0.78%)</title><rect x="90.0089%" y="213" width="0.7822%" height="15" fill="rgb(221,180,47)" fg:x="5063" fg:w="44"/><text x="90.2589%" y="223.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (44 samples, 0.78%)</title><rect x="90.0089%" y="197" width="0.7822%" height="15" fill="rgb(216,18,2)" fg:x="5063" fg:w="44"/><text x="90.2589%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (44 samples, 0.78%)</title><rect x="90.0089%" y="181" width="0.7822%" height="15" fill="rgb(248,14,49)" fg:x="5063" fg:w="44"/><text x="90.2589%" y="191.50"></text></g><g><title>rand_chacha::guts::undiagonalize (1 samples, 0.02%)</title><rect x="90.7733%" y="165" width="0.0178%" height="15" fill="rgb(210,20,12)" fg:x="5106" fg:w="1"/><text x="91.0233%" y="175.50"></text></g><g><title>neuralang::World::move_balls::{{closure}} (69 samples, 1.23%)</title><rect x="89.5822%" y="421" width="1.2267%" height="15" fill="rgb(245,138,39)" fg:x="5039" fg:w="69"/><text x="89.8322%" y="431.50"></text></g><g><title>rand::rng::Rng::sample (64 samples, 1.14%)</title><rect x="89.6711%" y="405" width="1.1378%" height="15" fill="rgb(223,149,19)" fg:x="5044" fg:w="64"/><text x="89.9211%" y="415.50"></text></g><g><title>&lt;rand::distributions::uniform::Uniform&lt;X&gt; as rand::distributions::distribution::Distribution&lt;X&gt;&gt;::sample (63 samples, 1.12%)</title><rect x="89.6889%" y="389" width="1.1200%" height="15" fill="rgb(237,106,43)" fg:x="5045" fg:w="63"/><text x="89.9389%" y="399.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformFloat&lt;f64&gt; as rand::distributions::uniform::UniformSampler&gt;::sample (61 samples, 1.08%)</title><rect x="89.7244%" y="373" width="1.0844%" height="15" fill="rgb(226,217,23)" fg:x="5047" fg:w="61"/><text x="89.9744%" y="383.50"></text></g><g><title>rand::rng::Rng::gen (54 samples, 0.96%)</title><rect x="89.8489%" y="357" width="0.9600%" height="15" fill="rgb(215,179,17)" fg:x="5054" fg:w="54"/><text x="90.0989%" y="367.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u64&gt; for rand::distributions::Standard&gt;::sample (54 samples, 0.96%)</title><rect x="89.8489%" y="341" width="0.9600%" height="15" fill="rgb(213,180,10)" fg:x="5054" fg:w="54"/><text x="90.0989%" y="351.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (54 samples, 0.96%)</title><rect x="89.8489%" y="325" width="0.9600%" height="15" fill="rgb(207,30,53)" fg:x="5054" fg:w="54"/><text x="90.0989%" y="335.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (54 samples, 0.96%)</title><rect x="89.8489%" y="309" width="0.9600%" height="15" fill="rgb(254,95,5)" fg:x="5054" fg:w="54"/><text x="90.0989%" y="319.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (53 samples, 0.94%)</title><rect x="89.8667%" y="293" width="0.9422%" height="15" fill="rgb(240,67,16)" fg:x="5055" fg:w="53"/><text x="90.1167%" y="303.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (45 samples, 0.80%)</title><rect x="90.0089%" y="277" width="0.8000%" height="15" fill="rgb(226,85,17)" fg:x="5063" fg:w="45"/><text x="90.2589%" y="287.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (45 samples, 0.80%)</title><rect x="90.0089%" y="261" width="0.8000%" height="15" fill="rgb(227,29,26)" fg:x="5063" fg:w="45"/><text x="90.2589%" y="271.50"></text></g><g><title>rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (1 samples, 0.02%)</title><rect x="90.7911%" y="245" width="0.0178%" height="15" fill="rgb(244,116,54)" fg:x="5107" fg:w="1"/><text x="91.0411%" y="255.50"></text></g><g><title>rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed (1 samples, 0.02%)</title><rect x="90.7911%" y="229" width="0.0178%" height="15" fill="rgb(244,175,35)" fg:x="5107" fg:w="1"/><text x="91.0411%" y="239.50"></text></g><g><title>rand_core::SeedableRng::from_rng (1 samples, 0.02%)</title><rect x="90.7911%" y="213" width="0.0178%" height="15" fill="rgb(218,148,24)" fg:x="5107" fg:w="1"/><text x="91.0411%" y="223.50"></text></g><g><title>&lt;&amp;mut R as rand_core::RngCore&gt;::try_fill_bytes (1 samples, 0.02%)</title><rect x="90.7911%" y="197" width="0.0178%" height="15" fill="rgb(224,173,49)" fg:x="5107" fg:w="1"/><text x="91.0411%" y="207.50"></text></g><g><title>&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (1 samples, 0.02%)</title><rect x="90.7911%" y="181" width="0.0178%" height="15" fill="rgb(208,22,32)" fg:x="5107" fg:w="1"/><text x="91.0411%" y="191.50"></text></g><g><title>getrandom::getrandom (1 samples, 0.02%)</title><rect x="90.7911%" y="165" width="0.0178%" height="15" fill="rgb(214,108,51)" fg:x="5107" fg:w="1"/><text x="91.0411%" y="175.50"></text></g><g><title>getrandom::getrandom_uninit (1 samples, 0.02%)</title><rect x="90.7911%" y="149" width="0.0178%" height="15" fill="rgb(216,134,46)" fg:x="5107" fg:w="1"/><text x="91.0411%" y="159.50"></text></g><g><title>getrandom::imp::getrandom_inner (1 samples, 0.02%)</title><rect x="90.7911%" y="133" width="0.0178%" height="15" fill="rgb(205,21,1)" fg:x="5107" fg:w="1"/><text x="91.0411%" y="143.50"></text></g><g><title>getrandom::util_libc::sys_fill_exact (1 samples, 0.02%)</title><rect x="90.7911%" y="117" width="0.0178%" height="15" fill="rgb(205,32,17)" fg:x="5107" fg:w="1"/><text x="91.0411%" y="127.50"></text></g><g><title>getrandom::imp::getrandom_inner::{{closure}} (1 samples, 0.02%)</title><rect x="90.7911%" y="101" width="0.0178%" height="15" fill="rgb(239,143,54)" fg:x="5107" fg:w="1"/><text x="91.0411%" y="111.50"></text></g><g><title>getrandom::imp::getrandom (1 samples, 0.02%)</title><rect x="90.7911%" y="85" width="0.0178%" height="15" fill="rgb(223,6,38)" fg:x="5107" fg:w="1"/><text x="91.0411%" y="95.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="90.7911%" y="69" width="0.0178%" height="15" fill="rgb(207,84,5)" fg:x="5107" fg:w="1"/><text x="91.0411%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="90.7911%" y="53" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5107" fg:w="1"/><text x="91.0411%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="90.7911%" y="37" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5107" fg:w="1"/><text x="91.0411%" y="47.50"></text></g><g><title>neuralang::World::move_balls (78 samples, 1.39%)</title><rect x="89.5822%" y="453" width="1.3867%" height="15" fill="rgb(220,185,12)" fg:x="5039" fg:w="78"/><text x="89.8322%" y="463.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (78 samples, 1.39%)</title><rect x="89.5822%" y="437" width="1.3867%" height="15" fill="rgb(250,66,38)" fg:x="5039" fg:w="78"/><text x="89.8322%" y="447.50"></text></g><g><title>neuralang::main (9 samples, 0.16%)</title><rect x="90.8089%" y="421" width="0.1600%" height="15" fill="rgb(238,97,6)" fg:x="5108" fg:w="9"/><text x="91.0589%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.04%)</title><rect x="91.0400%" y="437" width="0.0356%" height="15" fill="rgb(218,6,47)" fg:x="5121" fg:w="2"/><text x="91.2900%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.04%)</title><rect x="91.0400%" y="421" width="0.0356%" height="15" fill="rgb(228,30,25)" fg:x="5121" fg:w="2"/><text x="91.2900%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.04%)</title><rect x="91.0400%" y="405" width="0.0356%" height="15" fill="rgb(215,184,34)" fg:x="5121" fg:w="2"/><text x="91.2900%" y="415.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.05%)</title><rect x="91.0756%" y="437" width="0.0533%" height="15" fill="rgb(242,38,10)" fg:x="5123" fg:w="3"/><text x="91.3256%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="91.5022%" y="421" width="0.0178%" height="15" fill="rgb(254,103,39)" fg:x="5147" fg:w="1"/><text x="91.7522%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="91.5022%" y="405" width="0.0178%" height="15" fill="rgb(254,53,35)" fg:x="5147" fg:w="1"/><text x="91.7522%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="91.5022%" y="389" width="0.0178%" height="15" fill="rgb(237,133,22)" fg:x="5147" fg:w="1"/><text x="91.7522%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.02%)</title><rect x="91.5022%" y="373" width="0.0178%" height="15" fill="rgb(237,156,49)" fg:x="5147" fg:w="1"/><text x="91.7522%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.02%)</title><rect x="91.5022%" y="357" width="0.0178%" height="15" fill="rgb(214,150,36)" fg:x="5147" fg:w="1"/><text x="91.7522%" y="367.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="91.5022%" y="341" width="0.0178%" height="15" fill="rgb(254,47,34)" fg:x="5147" fg:w="1"/><text x="91.7522%" y="351.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.02%)</title><rect x="91.5022%" y="325" width="0.0178%" height="15" fill="rgb(254,73,4)" fg:x="5147" fg:w="1"/><text x="91.7522%" y="335.50"></text></g><g><title>_int_realloc (1 samples, 0.02%)</title><rect x="91.5022%" y="309" width="0.0178%" height="15" fill="rgb(231,75,41)" fg:x="5147" fg:w="1"/><text x="91.7522%" y="319.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="91.5022%" y="293" width="0.0178%" height="15" fill="rgb(222,219,51)" fg:x="5147" fg:w="1"/><text x="91.7522%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (27 samples, 0.48%)</title><rect x="91.1289%" y="437" width="0.4800%" height="15" fill="rgb(241,229,15)" fg:x="5126" fg:w="27"/><text x="91.3789%" y="447.50"></text></g><g><title>core::ptr::write (5 samples, 0.09%)</title><rect x="91.5200%" y="421" width="0.0889%" height="15" fill="rgb(209,143,44)" fg:x="5148" fg:w="5"/><text x="91.7700%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.02%)</title><rect x="91.6089%" y="405" width="0.0178%" height="15" fill="rgb(228,217,33)" fg:x="5153" fg:w="1"/><text x="91.8589%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (3 samples, 0.05%)</title><rect x="91.6267%" y="405" width="0.0533%" height="15" fill="rgb(240,29,3)" fg:x="5154" fg:w="3"/><text x="91.8767%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.02%)</title><rect x="92.4089%" y="389" width="0.0178%" height="15" fill="rgb(230,126,2)" fg:x="5198" fg:w="1"/><text x="92.6589%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.02%)</title><rect x="92.4089%" y="373" width="0.0178%" height="15" fill="rgb(220,216,49)" fg:x="5198" fg:w="1"/><text x="92.6589%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (1 samples, 0.02%)</title><rect x="92.4267%" y="389" width="0.0178%" height="15" fill="rgb(243,79,50)" fg:x="5199" fg:w="1"/><text x="92.6767%" y="399.50"></text></g><g><title>neuralang::World::update_cells::{{closure}} (1 samples, 0.02%)</title><rect x="92.4267%" y="373" width="0.0178%" height="15" fill="rgb(254,149,6)" fg:x="5199" fg:w="1"/><text x="92.6767%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (1 samples, 0.02%)</title><rect x="92.4267%" y="357" width="0.0178%" height="15" fill="rgb(220,44,45)" fg:x="5199" fg:w="1"/><text x="92.6767%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::ne (1 samples, 0.02%)</title><rect x="92.4267%" y="341" width="0.0178%" height="15" fill="rgb(215,87,12)" fg:x="5199" fg:w="1"/><text x="92.6767%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (87 samples, 1.55%)</title><rect x="91.6800%" y="405" width="1.5467%" height="15" fill="rgb(227,228,3)" fg:x="5157" fg:w="87"/><text x="91.9300%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (44 samples, 0.78%)</title><rect x="92.4444%" y="389" width="0.7822%" height="15" fill="rgb(214,20,35)" fg:x="5200" fg:w="44"/><text x="92.6944%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (98 samples, 1.74%)</title><rect x="91.6089%" y="437" width="1.7422%" height="15" fill="rgb(240,29,3)" fg:x="5153" fg:w="98"/><text x="91.8589%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (98 samples, 1.74%)</title><rect x="91.6089%" y="421" width="1.7422%" height="15" fill="rgb(208,159,28)" fg:x="5153" fg:w="98"/><text x="91.8589%" y="431.50"></text></g><g><title>core::mem::drop (7 samples, 0.12%)</title><rect x="93.2267%" y="405" width="0.1244%" height="15" fill="rgb(253,152,51)" fg:x="5244" fg:w="7"/><text x="93.4767%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;T,A&gt;::retain_mut::BackshiftOnDrop&lt;usize,alloc::alloc::Global&gt;&gt; (7 samples, 0.12%)</title><rect x="93.2267%" y="389" width="0.1244%" height="15" fill="rgb(246,37,2)" fg:x="5244" fg:w="7"/><text x="93.4767%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt;::retain_mut::BackshiftOnDrop&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.12%)</title><rect x="93.2267%" y="373" width="0.1244%" height="15" fill="rgb(254,133,50)" fg:x="5244" fg:w="7"/><text x="93.4767%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (6 samples, 0.11%)</title><rect x="93.2444%" y="357" width="0.1067%" height="15" fill="rgb(209,163,35)" fg:x="5245" fg:w="6"/><text x="93.4944%" y="367.50"></text></g><g><title>neuralang::add_2d (1 samples, 0.02%)</title><rect x="93.3511%" y="437" width="0.0178%" height="15" fill="rgb(209,139,6)" fg:x="5251" fg:w="1"/><text x="93.6011%" y="447.50"></text></g><g><title>neuralang::main (22 samples, 0.39%)</title><rect x="93.3689%" y="437" width="0.3911%" height="15" fill="rgb(238,97,6)" fg:x="5252" fg:w="22"/><text x="93.6189%" y="447.50"></text></g><g><title>neuralang::oob (3 samples, 0.05%)</title><rect x="93.7600%" y="437" width="0.0533%" height="15" fill="rgb(214,24,53)" fg:x="5274" fg:w="3"/><text x="94.0100%" y="447.50"></text></g><g><title>__fmod (11 samples, 0.20%)</title><rect x="94.5422%" y="421" width="0.1956%" height="15" fill="rgb(244,146,0)" fg:x="5318" fg:w="11"/><text x="94.7922%" y="431.50"></text></g><g><title>neuralang::pos_to_cell (243 samples, 4.32%)</title><rect x="93.8133%" y="437" width="4.3200%" height="15" fill="rgb(240,128,4)" fg:x="5277" fg:w="243"/><text x="94.0633%" y="447.50">neura..</text></g><g><title>__ieee754_fmod (191 samples, 3.40%)</title><rect x="94.7378%" y="421" width="3.3956%" height="15" fill="rgb(233,205,32)" fg:x="5329" fg:w="191"/><text x="94.9878%" y="431.50">__i..</text></g><g><title>neuralang::World::update_cells (405 samples, 7.20%)</title><rect x="90.9689%" y="453" width="7.2000%" height="15" fill="rgb(210,128,41)" fg:x="5117" fg:w="405"/><text x="91.2189%" y="463.50">neuralang:..</text></g><g><title>neuralang::same_index (2 samples, 0.04%)</title><rect x="98.1333%" y="437" width="0.0356%" height="15" fill="rgb(207,131,39)" fg:x="5520" fg:w="2"/><text x="98.3833%" y="447.50"></text></g><g><title>__libc_start_main_impl (5,591 samples, 99.40%)</title><rect x="0.4978%" y="725" width="99.3956%" height="15" fill="rgb(228,214,28)" fg:x="28" fg:w="5591"/><text x="0.7478%" y="735.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (5,591 samples, 99.40%)</title><rect x="0.4978%" y="709" width="99.3956%" height="15" fill="rgb(249,173,1)" fg:x="28" fg:w="5591"/><text x="0.7478%" y="719.50">__libc_start_call_main</text></g><g><title>main (5,591 samples, 99.40%)</title><rect x="0.4978%" y="693" width="99.3956%" height="15" fill="rgb(238,28,47)" fg:x="28" fg:w="5591"/><text x="0.7478%" y="703.50">main</text></g><g><title>std::rt::lang_start_internal (5,591 samples, 99.40%)</title><rect x="0.4978%" y="677" width="99.3956%" height="15" fill="rgb(240,177,54)" fg:x="28" fg:w="5591"/><text x="0.7478%" y="687.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (5,591 samples, 99.40%)</title><rect x="0.4978%" y="661" width="99.3956%" height="15" fill="rgb(216,75,8)" fg:x="28" fg:w="5591"/><text x="0.7478%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,591 samples, 99.40%)</title><rect x="0.4978%" y="645" width="99.3956%" height="15" fill="rgb(212,61,29)" fg:x="28" fg:w="5591"/><text x="0.7478%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,591 samples, 99.40%)</title><rect x="0.4978%" y="629" width="99.3956%" height="15" fill="rgb(232,162,46)" fg:x="28" fg:w="5591"/><text x="0.7478%" y="639.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (5,591 samples, 99.40%)</title><rect x="0.4978%" y="613" width="99.3956%" height="15" fill="rgb(219,15,13)" fg:x="28" fg:w="5591"/><text x="0.7478%" y="623.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (5,591 samples, 99.40%)</title><rect x="0.4978%" y="597" width="99.3956%" height="15" fill="rgb(216,75,8)" fg:x="28" fg:w="5591"/><text x="0.7478%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,591 samples, 99.40%)</title><rect x="0.4978%" y="581" width="99.3956%" height="15" fill="rgb(212,61,29)" fg:x="28" fg:w="5591"/><text x="0.7478%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,591 samples, 99.40%)</title><rect x="0.4978%" y="565" width="99.3956%" height="15" fill="rgb(232,162,46)" fg:x="28" fg:w="5591"/><text x="0.7478%" y="575.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (5,591 samples, 99.40%)</title><rect x="0.4978%" y="549" width="99.3956%" height="15" fill="rgb(212,73,0)" fg:x="28" fg:w="5591"/><text x="0.7478%" y="559.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (5,591 samples, 99.40%)</title><rect x="0.4978%" y="533" width="99.3956%" height="15" fill="rgb(213,78,9)" fg:x="28" fg:w="5591"/><text x="0.7478%" y="543.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5,591 samples, 99.40%)</title><rect x="0.4978%" y="517" width="99.3956%" height="15" fill="rgb(210,88,34)" fg:x="28" fg:w="5591"/><text x="0.7478%" y="527.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (5,591 samples, 99.40%)</title><rect x="0.4978%" y="501" width="99.3956%" height="15" fill="rgb(210,80,10)" fg:x="28" fg:w="5591"/><text x="0.7478%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>neuralang::main (5,591 samples, 99.40%)</title><rect x="0.4978%" y="485" width="99.3956%" height="15" fill="rgb(238,97,6)" fg:x="28" fg:w="5591"/><text x="0.7478%" y="495.50">neuralang::main</text></g><g><title>neuralang::World::step (5,591 samples, 99.40%)</title><rect x="0.4978%" y="469" width="99.3956%" height="15" fill="rgb(223,116,28)" fg:x="28" fg:w="5591"/><text x="0.7478%" y="479.50">neuralang::World::step</text></g><g><title>neuralang::main (97 samples, 1.72%)</title><rect x="98.1689%" y="453" width="1.7244%" height="15" fill="rgb(238,97,6)" fg:x="5522" fg:w="97"/><text x="98.4189%" y="463.50"></text></g><g><title>neuralang (5,620 samples, 99.91%)</title><rect x="0.0000%" y="757" width="99.9111%" height="15" fill="rgb(217,119,28)" fg:x="0" fg:w="5620"/><text x="0.2500%" y="767.50">neuralang</text></g><g><title>_start (5,592 samples, 99.41%)</title><rect x="0.4978%" y="741" width="99.4133%" height="15" fill="rgb(210,219,27)" fg:x="28" fg:w="5592"/><text x="0.7478%" y="751.50">_start</text></g><g><title>_dl_start (1 samples, 0.02%)</title><rect x="99.8933%" y="725" width="0.0178%" height="15" fill="rgb(214,13,30)" fg:x="5619" fg:w="1"/><text x="100.1433%" y="735.50"></text></g><g><title>_dl_start_final (1 samples, 0.02%)</title><rect x="99.8933%" y="709" width="0.0178%" height="15" fill="rgb(222,52,46)" fg:x="5619" fg:w="1"/><text x="100.1433%" y="719.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.02%)</title><rect x="99.8933%" y="693" width="0.0178%" height="15" fill="rgb(238,104,49)" fg:x="5619" fg:w="1"/><text x="100.1433%" y="703.50"></text></g><g><title>dl_main (1 samples, 0.02%)</title><rect x="99.8933%" y="677" width="0.0178%" height="15" fill="rgb(253,59,10)" fg:x="5619" fg:w="1"/><text x="100.1433%" y="687.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.02%)</title><rect x="99.8933%" y="661" width="0.0178%" height="15" fill="rgb(208,68,2)" fg:x="5619" fg:w="1"/><text x="100.1433%" y="671.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.02%)</title><rect x="99.8933%" y="645" width="0.0178%" height="15" fill="rgb(238,71,42)" fg:x="5619" fg:w="1"/><text x="100.1433%" y="655.50"></text></g><g><title>openaux (1 samples, 0.02%)</title><rect x="99.8933%" y="629" width="0.0178%" height="15" fill="rgb(215,55,1)" fg:x="5619" fg:w="1"/><text x="100.1433%" y="639.50"></text></g><g><title>_dl_map_object (1 samples, 0.02%)</title><rect x="99.8933%" y="613" width="0.0178%" height="15" fill="rgb(247,77,9)" fg:x="5619" fg:w="1"/><text x="100.1433%" y="623.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.02%)</title><rect x="99.8933%" y="597" width="0.0178%" height="15" fill="rgb(253,121,32)" fg:x="5619" fg:w="1"/><text x="100.1433%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8933%" y="581" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5619" fg:w="1"/><text x="100.1433%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8933%" y="565" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5619" fg:w="1"/><text x="100.1433%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8933%" y="549" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5619" fg:w="1"/><text x="100.1433%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8933%" y="533" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5619" fg:w="1"/><text x="100.1433%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8933%" y="517" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5619" fg:w="1"/><text x="100.1433%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8933%" y="501" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5619" fg:w="1"/><text x="100.1433%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8933%" y="485" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5619" fg:w="1"/><text x="100.1433%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8933%" y="469" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5619" fg:w="1"/><text x="100.1433%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8933%" y="453" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5619" fg:w="1"/><text x="100.1433%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8933%" y="437" width="0.0178%" height="15" fill="rgb(227,28,50)" fg:x="5619" fg:w="1"/><text x="100.1433%" y="447.50"></text></g><g><title>all (5,625 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(206,183,37)" fg:x="0" fg:w="5625"/><text x="0.2500%" y="783.50"></text></g><g><title>perf-exec (5 samples, 0.09%)</title><rect x="99.9111%" y="757" width="0.0889%" height="15" fill="rgb(250,111,27)" fg:x="5620" fg:w="5"/><text x="100.1611%" y="767.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="99.9111%" y="741" width="0.0889%" height="15" fill="rgb(227,28,50)" fg:x="5620" fg:w="5"/><text x="100.1611%" y="751.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="99.9111%" y="725" width="0.0889%" height="15" fill="rgb(227,28,50)" fg:x="5620" fg:w="5"/><text x="100.1611%" y="735.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="99.9111%" y="709" width="0.0889%" height="15" fill="rgb(227,28,50)" fg:x="5620" fg:w="5"/><text x="100.1611%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="99.9111%" y="693" width="0.0889%" height="15" fill="rgb(227,28,50)" fg:x="5620" fg:w="5"/><text x="100.1611%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="99.9111%" y="677" width="0.0889%" height="15" fill="rgb(227,28,50)" fg:x="5620" fg:w="5"/><text x="100.1611%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="99.9111%" y="661" width="0.0889%" height="15" fill="rgb(227,28,50)" fg:x="5620" fg:w="5"/><text x="100.1611%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="99.9111%" y="645" width="0.0889%" height="15" fill="rgb(227,28,50)" fg:x="5620" fg:w="5"/><text x="100.1611%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="99.9111%" y="629" width="0.0889%" height="15" fill="rgb(227,28,50)" fg:x="5620" fg:w="5"/><text x="100.1611%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="99.9111%" y="613" width="0.0889%" height="15" fill="rgb(227,28,50)" fg:x="5620" fg:w="5"/><text x="100.1611%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="99.9111%" y="597" width="0.0889%" height="15" fill="rgb(227,28,50)" fg:x="5620" fg:w="5"/><text x="100.1611%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="99.9111%" y="581" width="0.0889%" height="15" fill="rgb(227,28,50)" fg:x="5620" fg:w="5"/><text x="100.1611%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="99.9111%" y="565" width="0.0889%" height="15" fill="rgb(227,28,50)" fg:x="5620" fg:w="5"/><text x="100.1611%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="99.9111%" y="549" width="0.0889%" height="15" fill="rgb(227,28,50)" fg:x="5620" fg:w="5"/><text x="100.1611%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="99.9111%" y="533" width="0.0889%" height="15" fill="rgb(227,28,50)" fg:x="5620" fg:w="5"/><text x="100.1611%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="99.9111%" y="517" width="0.0889%" height="15" fill="rgb(227,28,50)" fg:x="5620" fg:w="5"/><text x="100.1611%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.09%)</title><rect x="99.9111%" y="501" width="0.0889%" height="15" fill="rgb(227,28,50)" fg:x="5620" fg:w="5"/><text x="100.1611%" y="511.50"></text></g></svg></svg>