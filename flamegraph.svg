<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="789.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="8602"><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0000%" y="709" width="0.0116%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0000%" y="693" width="0.0116%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0000%" y="677" width="0.0116%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0000%" y="661" width="0.0116%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0000%" y="645" width="0.0116%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0000%" y="629" width="0.0116%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0000%" y="613" width="0.0116%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0000%" y="597" width="0.0116%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0000%" y="581" width="0.0116%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0000%" y="565" width="0.0116%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50"></text></g><g><title>__GI___libc_write (1 samples, 0.01%)</title><rect x="0.0116%" y="709" width="0.0116%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.2616%" y="719.50"></text></g><g><title>__ieee754_fmod (13 samples, 0.15%)</title><rect x="0.0233%" y="709" width="0.1511%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="13"/><text x="0.2733%" y="719.50"></text></g><g><title>__sincos (20 samples, 0.23%)</title><rect x="0.1744%" y="709" width="0.2325%" height="15" fill="rgb(216,20,37)" fg:x="15" fg:w="20"/><text x="0.4244%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.01%)</title><rect x="0.4069%" y="709" width="0.0116%" height="15" fill="rgb(206,188,39)" fg:x="35" fg:w="1"/><text x="0.6569%" y="719.50"></text></g><g><title>neuralang::World::move_balls (4 samples, 0.05%)</title><rect x="0.4301%" y="661" width="0.0465%" height="15" fill="rgb(217,207,13)" fg:x="37" fg:w="4"/><text x="0.6801%" y="671.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (4 samples, 0.05%)</title><rect x="0.4301%" y="645" width="0.0465%" height="15" fill="rgb(231,73,38)" fg:x="37" fg:w="4"/><text x="0.6801%" y="655.50"></text></g><g><title>neuralang::World::move_balls::{{closure}} (4 samples, 0.05%)</title><rect x="0.4301%" y="629" width="0.0465%" height="15" fill="rgb(225,20,46)" fg:x="37" fg:w="4"/><text x="0.6801%" y="639.50"></text></g><g><title>neuralang::dir_from_theta (4 samples, 0.05%)</title><rect x="0.4301%" y="613" width="0.0465%" height="15" fill="rgb(210,31,41)" fg:x="37" fg:w="4"/><text x="0.6801%" y="623.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::cos (4 samples, 0.05%)</title><rect x="0.4301%" y="597" width="0.0465%" height="15" fill="rgb(221,200,47)" fg:x="37" fg:w="4"/><text x="0.6801%" y="607.50"></text></g><g><title>neuralang::main (10 samples, 0.12%)</title><rect x="0.4185%" y="709" width="0.1163%" height="15" fill="rgb(226,26,5)" fg:x="36" fg:w="10"/><text x="0.6685%" y="719.50"></text></g><g><title>neuralang::run (10 samples, 0.12%)</title><rect x="0.4185%" y="693" width="0.1163%" height="15" fill="rgb(249,33,26)" fg:x="36" fg:w="10"/><text x="0.6685%" y="703.50"></text></g><g><title>neuralang::World::step (9 samples, 0.10%)</title><rect x="0.4301%" y="677" width="0.1046%" height="15" fill="rgb(235,183,28)" fg:x="37" fg:w="9"/><text x="0.6801%" y="687.50"></text></g><g><title>neuralang::World::update_cells (5 samples, 0.06%)</title><rect x="0.4766%" y="661" width="0.0581%" height="15" fill="rgb(221,5,38)" fg:x="41" fg:w="5"/><text x="0.7266%" y="671.50"></text></g><g><title>neuralang::pos_to_cell (5 samples, 0.06%)</title><rect x="0.4766%" y="645" width="0.0581%" height="15" fill="rgb(247,18,42)" fg:x="41" fg:w="5"/><text x="0.7266%" y="655.50"></text></g><g><title>[unknown] (47 samples, 0.55%)</title><rect x="0.0000%" y="725" width="0.5464%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="47"/><text x="0.2500%" y="735.50"></text></g><g><title>rand::rngs::thread::thread_rng (1 samples, 0.01%)</title><rect x="0.5348%" y="709" width="0.0116%" height="15" fill="rgb(249,31,29)" fg:x="46" fg:w="1"/><text x="0.7848%" y="719.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2,694 samples, 31.32%)</title><rect x="15.6591%" y="405" width="31.3183%" height="15" fill="rgb(225,111,53)" fg:x="1347" fg:w="2694"/><text x="15.9091%" y="415.50">&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::colle..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2,694 samples, 31.32%)</title><rect x="15.6591%" y="389" width="31.3183%" height="15" fill="rgb(238,160,17)" fg:x="1347" fg:w="2694"/><text x="15.9091%" y="399.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (144 samples, 1.67%)</title><rect x="46.9774%" y="373" width="1.6740%" height="15" fill="rgb(214,148,48)" fg:x="4041" fg:w="144"/><text x="47.2274%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (158 samples, 1.84%)</title><rect x="46.9774%" y="405" width="1.8368%" height="15" fill="rgb(232,36,49)" fg:x="4041" fg:w="158"/><text x="47.2274%" y="415.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (158 samples, 1.84%)</title><rect x="46.9774%" y="389" width="1.8368%" height="15" fill="rgb(209,103,24)" fg:x="4041" fg:w="158"/><text x="47.2274%" y="399.50">c..</text></g><g><title>neuralang::main (14 samples, 0.16%)</title><rect x="48.6515%" y="373" width="0.1628%" height="15" fill="rgb(229,88,8)" fg:x="4185" fg:w="14"/><text x="48.9015%" y="383.50"></text></g><g><title>&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.65%)</title><rect x="48.8142%" y="389" width="0.6510%" height="15" fill="rgb(213,181,19)" fg:x="4199" fg:w="56"/><text x="49.0642%" y="399.50"></text></g><g><title>core::ops::index_range::IndexRange::next_unchecked (50 samples, 0.58%)</title><rect x="48.8840%" y="373" width="0.5813%" height="15" fill="rgb(254,191,54)" fg:x="4205" fg:w="50"/><text x="49.1340%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.03%)</title><rect x="49.4652%" y="325" width="0.0349%" height="15" fill="rgb(241,83,37)" fg:x="4255" fg:w="3"/><text x="49.7152%" y="335.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 0.77%)</title><rect x="48.8142%" y="405" width="0.7673%" height="15" fill="rgb(233,36,39)" fg:x="4199" fg:w="66"/><text x="49.0642%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (10 samples, 0.12%)</title><rect x="49.4652%" y="389" width="0.1163%" height="15" fill="rgb(226,3,54)" fg:x="4255" fg:w="10"/><text x="49.7152%" y="399.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (10 samples, 0.12%)</title><rect x="49.4652%" y="373" width="0.1163%" height="15" fill="rgb(245,192,40)" fg:x="4255" fg:w="10"/><text x="49.7152%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (10 samples, 0.12%)</title><rect x="49.4652%" y="357" width="0.1163%" height="15" fill="rgb(238,167,29)" fg:x="4255" fg:w="10"/><text x="49.7152%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (10 samples, 0.12%)</title><rect x="49.4652%" y="341" width="0.1163%" height="15" fill="rgb(232,182,51)" fg:x="4255" fg:w="10"/><text x="49.7152%" y="351.50"></text></g><g><title>neuralang::main (7 samples, 0.08%)</title><rect x="49.5001%" y="325" width="0.0814%" height="15" fill="rgb(231,60,39)" fg:x="4258" fg:w="7"/><text x="49.7501%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="60.5789%" y="389" width="0.0233%" height="15" fill="rgb(208,69,12)" fg:x="5211" fg:w="2"/><text x="60.8289%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="60.5906%" y="373" width="0.0116%" height="15" fill="rgb(235,93,37)" fg:x="5212" fg:w="1"/><text x="60.8406%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="60.5906%" y="357" width="0.0116%" height="15" fill="rgb(213,116,39)" fg:x="5212" fg:w="1"/><text x="60.8406%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="60.5906%" y="341" width="0.0116%" height="15" fill="rgb(222,207,29)" fg:x="5212" fg:w="1"/><text x="60.8406%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="60.5906%" y="325" width="0.0116%" height="15" fill="rgb(206,96,30)" fg:x="5212" fg:w="1"/><text x="60.8406%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (952 samples, 11.07%)</title><rect x="49.5815%" y="405" width="11.0672%" height="15" fill="rgb(218,138,4)" fg:x="4265" fg:w="952"/><text x="49.8315%" y="415.50">&lt;core::slice::it..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (4 samples, 0.05%)</title><rect x="60.6022%" y="389" width="0.0465%" height="15" fill="rgb(250,191,14)" fg:x="5213" fg:w="4"/><text x="60.8522%" y="399.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (4 samples, 0.05%)</title><rect x="60.6022%" y="373" width="0.0465%" height="15" fill="rgb(239,60,40)" fg:x="5213" fg:w="4"/><text x="60.8522%" y="383.50"></text></g><g><title>neuralang::main (4 samples, 0.05%)</title><rect x="60.6022%" y="357" width="0.0465%" height="15" fill="rgb(206,27,48)" fg:x="5213" fg:w="4"/><text x="60.8522%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="60.6487%" y="405" width="0.0349%" height="15" fill="rgb(225,35,8)" fg:x="5217" fg:w="3"/><text x="60.8987%" y="415.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="60.6487%" y="389" width="0.0349%" height="15" fill="rgb(250,213,24)" fg:x="5217" fg:w="3"/><text x="60.8987%" y="399.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="60.6487%" y="373" width="0.0349%" height="15" fill="rgb(247,123,22)" fg:x="5217" fg:w="3"/><text x="60.8987%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="60.6487%" y="357" width="0.0349%" height="15" fill="rgb(231,138,38)" fg:x="5217" fg:w="3"/><text x="60.8987%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="60.6487%" y="341" width="0.0349%" height="15" fill="rgb(231,145,46)" fg:x="5217" fg:w="3"/><text x="60.8987%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="60.6603%" y="325" width="0.0233%" height="15" fill="rgb(251,118,11)" fg:x="5218" fg:w="2"/><text x="60.9103%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="60.6603%" y="309" width="0.0233%" height="15" fill="rgb(217,147,25)" fg:x="5218" fg:w="2"/><text x="60.9103%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="60.6603%" y="293" width="0.0233%" height="15" fill="rgb(247,81,37)" fg:x="5218" fg:w="2"/><text x="60.9103%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="60.6603%" y="277" width="0.0233%" height="15" fill="rgb(209,12,38)" fg:x="5218" fg:w="2"/><text x="60.9103%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="60.6603%" y="261" width="0.0233%" height="15" fill="rgb(227,1,9)" fg:x="5218" fg:w="2"/><text x="60.9103%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="60.6603%" y="245" width="0.0233%" height="15" fill="rgb(248,47,43)" fg:x="5218" fg:w="2"/><text x="60.9103%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="60.6719%" y="229" width="0.0116%" height="15" fill="rgb(221,10,30)" fg:x="5219" fg:w="1"/><text x="60.9219%" y="239.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (20 samples, 0.23%)</title><rect x="60.7998%" y="373" width="0.2325%" height="15" fill="rgb(210,229,1)" fg:x="5230" fg:w="20"/><text x="61.0498%" y="383.50"></text></g><g><title>neuralang::main (20 samples, 0.23%)</title><rect x="60.7998%" y="357" width="0.2325%" height="15" fill="rgb(222,148,37)" fg:x="5230" fg:w="20"/><text x="61.0498%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (107 samples, 1.24%)</title><rect x="60.6836%" y="405" width="1.2439%" height="15" fill="rgb(234,67,33)" fg:x="5220" fg:w="107"/><text x="60.9336%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (107 samples, 1.24%)</title><rect x="60.6836%" y="389" width="1.2439%" height="15" fill="rgb(247,98,35)" fg:x="5220" fg:w="107"/><text x="60.9336%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (77 samples, 0.90%)</title><rect x="61.0323%" y="373" width="0.8951%" height="15" fill="rgb(247,138,52)" fg:x="5250" fg:w="77"/><text x="61.2823%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (8 samples, 0.09%)</title><rect x="61.9275%" y="405" width="0.0930%" height="15" fill="rgb(213,79,30)" fg:x="5327" fg:w="8"/><text x="62.1775%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.01%)</title><rect x="62.0205%" y="405" width="0.0116%" height="15" fill="rgb(246,177,23)" fg:x="5335" fg:w="1"/><text x="62.2705%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (13 samples, 0.15%)</title><rect x="62.0321%" y="405" width="0.1511%" height="15" fill="rgb(230,62,27)" fg:x="5336" fg:w="13"/><text x="62.2821%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (13 samples, 0.15%)</title><rect x="62.0321%" y="389" width="0.1511%" height="15" fill="rgb(216,154,8)" fg:x="5336" fg:w="13"/><text x="62.2821%" y="399.50"></text></g><g><title>neuralang::balls_collide (7 samples, 0.08%)</title><rect x="62.1832%" y="405" width="0.0814%" height="15" fill="rgb(244,35,45)" fg:x="5349" fg:w="7"/><text x="62.4332%" y="415.50"></text></g><g><title>neuralang::dist_2d (4 samples, 0.05%)</title><rect x="62.2181%" y="389" width="0.0465%" height="15" fill="rgb(251,115,12)" fg:x="5352" fg:w="4"/><text x="62.4681%" y="399.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (3 samples, 0.03%)</title><rect x="62.2297%" y="373" width="0.0349%" height="15" fill="rgb(240,54,50)" fg:x="5353" fg:w="3"/><text x="62.4797%" y="383.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powi (2 samples, 0.02%)</title><rect x="62.4390%" y="373" width="0.0233%" height="15" fill="rgb(233,84,52)" fg:x="5371" fg:w="2"/><text x="62.6890%" y="383.50"></text></g><g><title>neuralang::food_collide (27 samples, 0.31%)</title><rect x="62.2646%" y="405" width="0.3139%" height="15" fill="rgb(207,117,47)" fg:x="5356" fg:w="27"/><text x="62.5146%" y="415.50"></text></g><g><title>neuralang::dist_2d (24 samples, 0.28%)</title><rect x="62.2995%" y="389" width="0.2790%" height="15" fill="rgb(249,43,39)" fg:x="5359" fg:w="24"/><text x="62.5495%" y="399.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (10 samples, 0.12%)</title><rect x="62.4622%" y="373" width="0.1163%" height="15" fill="rgb(209,38,44)" fg:x="5373" fg:w="10"/><text x="62.7122%" y="383.50"></text></g><g><title>neuralang::main (90 samples, 1.05%)</title><rect x="62.5785%" y="405" width="1.0463%" height="15" fill="rgb(236,212,23)" fg:x="5383" fg:w="90"/><text x="62.8285%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.1128%" y="389" width="0.0116%" height="15" fill="rgb(242,79,21)" fg:x="5601" fg:w="1"/><text x="65.3628%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.1128%" y="373" width="0.0116%" height="15" fill="rgb(211,96,35)" fg:x="5601" fg:w="1"/><text x="65.3628%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.1128%" y="357" width="0.0116%" height="15" fill="rgb(253,215,40)" fg:x="5601" fg:w="1"/><text x="65.3628%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.1128%" y="341" width="0.0116%" height="15" fill="rgb(211,81,21)" fg:x="5601" fg:w="1"/><text x="65.3628%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.1128%" y="325" width="0.0116%" height="15" fill="rgb(208,190,38)" fg:x="5601" fg:w="1"/><text x="65.3628%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.1128%" y="309" width="0.0116%" height="15" fill="rgb(235,213,38)" fg:x="5601" fg:w="1"/><text x="65.3628%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.1128%" y="293" width="0.0116%" height="15" fill="rgb(237,122,38)" fg:x="5601" fg:w="1"/><text x="65.3628%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.1128%" y="277" width="0.0116%" height="15" fill="rgb(244,218,35)" fg:x="5601" fg:w="1"/><text x="65.3628%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.1128%" y="261" width="0.0116%" height="15" fill="rgb(240,68,47)" fg:x="5601" fg:w="1"/><text x="65.3628%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.1128%" y="245" width="0.0116%" height="15" fill="rgb(210,16,53)" fg:x="5601" fg:w="1"/><text x="65.3628%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.1128%" y="229" width="0.0116%" height="15" fill="rgb(235,124,12)" fg:x="5601" fg:w="1"/><text x="65.3628%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.1128%" y="213" width="0.0116%" height="15" fill="rgb(224,169,11)" fg:x="5601" fg:w="1"/><text x="65.3628%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.1128%" y="197" width="0.0116%" height="15" fill="rgb(250,166,2)" fg:x="5601" fg:w="1"/><text x="65.3628%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.3453%" y="373" width="0.0116%" height="15" fill="rgb(242,216,29)" fg:x="5621" fg:w="1"/><text x="65.5953%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.3453%" y="357" width="0.0116%" height="15" fill="rgb(230,116,27)" fg:x="5621" fg:w="1"/><text x="65.5953%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.3453%" y="341" width="0.0116%" height="15" fill="rgb(228,99,48)" fg:x="5621" fg:w="1"/><text x="65.5953%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.3453%" y="325" width="0.0116%" height="15" fill="rgb(253,11,6)" fg:x="5621" fg:w="1"/><text x="65.5953%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.3453%" y="309" width="0.0116%" height="15" fill="rgb(247,143,39)" fg:x="5621" fg:w="1"/><text x="65.5953%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.3453%" y="293" width="0.0116%" height="15" fill="rgb(236,97,10)" fg:x="5621" fg:w="1"/><text x="65.5953%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.3453%" y="277" width="0.0116%" height="15" fill="rgb(233,208,19)" fg:x="5621" fg:w="1"/><text x="65.5953%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.3453%" y="261" width="0.0116%" height="15" fill="rgb(216,164,2)" fg:x="5621" fg:w="1"/><text x="65.5953%" y="271.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powi (11 samples, 0.13%)</title><rect x="65.3569%" y="373" width="0.1279%" height="15" fill="rgb(220,129,5)" fg:x="5622" fg:w="11"/><text x="65.6069%" y="383.50"></text></g><g><title>neuralang::obstruct_collide (191 samples, 2.22%)</title><rect x="63.6247%" y="405" width="2.2204%" height="15" fill="rgb(242,17,10)" fg:x="5473" fg:w="191"/><text x="63.8747%" y="415.50">n..</text></g><g><title>neuralang::dist_2d (62 samples, 0.72%)</title><rect x="65.1244%" y="389" width="0.7208%" height="15" fill="rgb(242,107,0)" fg:x="5602" fg:w="62"/><text x="65.3744%" y="399.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (31 samples, 0.36%)</title><rect x="65.4848%" y="373" width="0.3604%" height="15" fill="rgb(251,28,31)" fg:x="5633" fg:w="31"/><text x="65.7348%" y="383.50"></text></g><g><title>neuralang::scale_2d (1 samples, 0.01%)</title><rect x="65.8452%" y="405" width="0.0116%" height="15" fill="rgb(233,223,10)" fg:x="5664" fg:w="1"/><text x="66.0952%" y="415.50"></text></g><g><title>neuralang::two_to_one (21 samples, 0.24%)</title><rect x="65.8568%" y="405" width="0.2441%" height="15" fill="rgb(215,21,27)" fg:x="5665" fg:w="21"/><text x="66.1068%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="66.0777%" y="389" width="0.0233%" height="15" fill="rgb(232,23,21)" fg:x="5684" fg:w="2"/><text x="66.3277%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="66.0777%" y="373" width="0.0233%" height="15" fill="rgb(244,5,23)" fg:x="5684" fg:w="2"/><text x="66.3277%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="66.0777%" y="357" width="0.0233%" height="15" fill="rgb(226,81,46)" fg:x="5684" fg:w="2"/><text x="66.3277%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="66.0777%" y="341" width="0.0233%" height="15" fill="rgb(247,70,30)" fg:x="5684" fg:w="2"/><text x="66.3277%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="66.0777%" y="325" width="0.0233%" height="15" fill="rgb(212,68,19)" fg:x="5684" fg:w="2"/><text x="66.3277%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="66.0777%" y="309" width="0.0233%" height="15" fill="rgb(240,187,13)" fg:x="5684" fg:w="2"/><text x="66.3277%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="66.0777%" y="293" width="0.0233%" height="15" fill="rgb(223,113,26)" fg:x="5684" fg:w="2"/><text x="66.3277%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="66.0893%" y="277" width="0.0116%" height="15" fill="rgb(206,192,2)" fg:x="5685" fg:w="1"/><text x="66.3393%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="66.0893%" y="261" width="0.0116%" height="15" fill="rgb(241,108,4)" fg:x="5685" fg:w="1"/><text x="66.3393%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="66.0893%" y="245" width="0.0116%" height="15" fill="rgb(247,173,49)" fg:x="5685" fg:w="1"/><text x="66.3393%" y="255.50"></text></g><g><title>neuralang::World::check_collisions (5,643 samples, 65.60%)</title><rect x="0.5696%" y="421" width="65.6010%" height="15" fill="rgb(224,114,35)" fg:x="49" fg:w="5643"/><text x="0.8196%" y="431.50">neuralang::World::check_collisions</text></g><g><title>splitmut::SplitMut::get2_mut (6 samples, 0.07%)</title><rect x="66.1009%" y="405" width="0.0698%" height="15" fill="rgb(245,159,27)" fg:x="5686" fg:w="6"/><text x="66.3509%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;V&gt; as splitmut::SplitMut&lt;usize,V&gt;&gt;::get1_mut (5 samples, 0.06%)</title><rect x="66.1125%" y="389" width="0.0581%" height="15" fill="rgb(245,172,44)" fg:x="5687" fg:w="5"/><text x="66.3625%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (5 samples, 0.06%)</title><rect x="66.1125%" y="373" width="0.0581%" height="15" fill="rgb(236,23,11)" fg:x="5687" fg:w="5"/><text x="66.3625%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (5 samples, 0.06%)</title><rect x="66.1125%" y="357" width="0.0581%" height="15" fill="rgb(205,117,38)" fg:x="5687" fg:w="5"/><text x="66.3625%" y="367.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="66.1707%" y="389" width="0.0116%" height="15" fill="rgb(237,72,25)" fg:x="5692" fg:w="1"/><text x="66.4207%" y="399.50"></text></g><g><title>neuralang::add_2d (11 samples, 0.13%)</title><rect x="66.2288%" y="373" width="0.1279%" height="15" fill="rgb(244,70,9)" fg:x="5697" fg:w="11"/><text x="66.4788%" y="383.50"></text></g><g><title>do_cos (30 samples, 0.35%)</title><rect x="66.7752%" y="325" width="0.3488%" height="15" fill="rgb(217,125,39)" fg:x="5744" fg:w="30"/><text x="67.0252%" y="335.50"></text></g><g><title>do_sin (214 samples, 2.49%)</title><rect x="67.1239%" y="325" width="2.4878%" height="15" fill="rgb(235,36,10)" fg:x="5774" fg:w="214"/><text x="67.3739%" y="335.50">do..</text></g><g><title>libc_feholdsetround_sse_ctx (5 samples, 0.06%)</title><rect x="69.6117%" y="325" width="0.0581%" height="15" fill="rgb(251,123,47)" fg:x="5988" fg:w="5"/><text x="69.8617%" y="335.50"></text></g><g><title>libc_feresetround_sse_ctx (4 samples, 0.05%)</title><rect x="69.6698%" y="325" width="0.0465%" height="15" fill="rgb(221,13,13)" fg:x="5993" fg:w="4"/><text x="69.9198%" y="335.50"></text></g><g><title>neuralang::dir_from_theta (322 samples, 3.74%)</title><rect x="66.3567%" y="373" width="3.7433%" height="15" fill="rgb(238,131,9)" fg:x="5708" fg:w="322"/><text x="66.6067%" y="383.50">neur..</text></g><g><title>std::f64::&lt;impl f64&gt;::cos (322 samples, 3.74%)</title><rect x="66.3567%" y="357" width="3.7433%" height="15" fill="rgb(211,50,8)" fg:x="5708" fg:w="322"/><text x="66.6067%" y="367.50">std:..</text></g><g><title>__sincos (322 samples, 3.74%)</title><rect x="66.3567%" y="341" width="3.7433%" height="15" fill="rgb(245,182,24)" fg:x="5708" fg:w="322"/><text x="66.6067%" y="351.50">__si..</text></g><g><title>reduce_sincos (33 samples, 0.38%)</title><rect x="69.7163%" y="325" width="0.3836%" height="15" fill="rgb(242,14,37)" fg:x="5997" fg:w="33"/><text x="69.9663%" y="335.50"></text></g><g><title>neuralang::main (13 samples, 0.15%)</title><rect x="70.1000%" y="373" width="0.1511%" height="15" fill="rgb(246,228,12)" fg:x="6030" fg:w="13"/><text x="70.3500%" y="383.50"></text></g><g><title>neuralang::oob (45 samples, 0.52%)</title><rect x="70.2511%" y="373" width="0.5231%" height="15" fill="rgb(213,55,15)" fg:x="6043" fg:w="45"/><text x="70.5011%" y="383.50"></text></g><g><title>neuralang::lef_border_trespass (22 samples, 0.26%)</title><rect x="70.5185%" y="357" width="0.2558%" height="15" fill="rgb(209,9,3)" fg:x="6066" fg:w="22"/><text x="70.7685%" y="367.50"></text></g><g><title>neuralang::scale_2d (5 samples, 0.06%)</title><rect x="70.7742%" y="373" width="0.0581%" height="15" fill="rgb(230,59,30)" fg:x="6088" fg:w="5"/><text x="71.0242%" y="383.50"></text></g><g><title>neuralang::World::move_balls::{{closure}} (401 samples, 4.66%)</title><rect x="66.1823%" y="389" width="4.6617%" height="15" fill="rgb(209,121,21)" fg:x="5693" fg:w="401"/><text x="66.4323%" y="399.50">neura..</text></g><g><title>rand::rng::Rng::sample (1 samples, 0.01%)</title><rect x="70.8324%" y="373" width="0.0116%" height="15" fill="rgb(220,109,13)" fg:x="6093" fg:w="1"/><text x="71.0824%" y="383.50"></text></g><g><title>&lt;rand::distributions::uniform::Uniform&lt;X&gt; as rand::distributions::distribution::Distribution&lt;X&gt;&gt;::sample (1 samples, 0.01%)</title><rect x="70.8324%" y="357" width="0.0116%" height="15" fill="rgb(232,18,1)" fg:x="6093" fg:w="1"/><text x="71.0824%" y="367.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformFloat&lt;f64&gt; as rand::distributions::uniform::UniformSampler&gt;::sample (1 samples, 0.01%)</title><rect x="70.8324%" y="341" width="0.0116%" height="15" fill="rgb(215,41,42)" fg:x="6093" fg:w="1"/><text x="71.0824%" y="351.50"></text></g><g><title>rand::rng::Rng::gen (1 samples, 0.01%)</title><rect x="70.8324%" y="325" width="0.0116%" height="15" fill="rgb(224,123,36)" fg:x="6093" fg:w="1"/><text x="71.0824%" y="335.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u64&gt; for rand::distributions::Standard&gt;::sample (1 samples, 0.01%)</title><rect x="70.8324%" y="309" width="0.0116%" height="15" fill="rgb(240,125,3)" fg:x="6093" fg:w="1"/><text x="71.0824%" y="319.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (1 samples, 0.01%)</title><rect x="70.8324%" y="293" width="0.0116%" height="15" fill="rgb(205,98,50)" fg:x="6093" fg:w="1"/><text x="71.0824%" y="303.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (1 samples, 0.01%)</title><rect x="70.8324%" y="277" width="0.0116%" height="15" fill="rgb(205,185,37)" fg:x="6093" fg:w="1"/><text x="71.0824%" y="287.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (1 samples, 0.01%)</title><rect x="70.8324%" y="261" width="0.0116%" height="15" fill="rgb(238,207,15)" fg:x="6093" fg:w="1"/><text x="71.0824%" y="271.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64::{{closure}} (1 samples, 0.01%)</title><rect x="70.8324%" y="245" width="0.0116%" height="15" fill="rgb(213,199,42)" fg:x="6093" fg:w="1"/><text x="71.0824%" y="255.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (403 samples, 4.68%)</title><rect x="66.1707%" y="405" width="4.6850%" height="15" fill="rgb(235,201,11)" fg:x="5692" fg:w="403"/><text x="66.4207%" y="415.50">&lt;core..</text></g><g><title>neuralang::main (1 samples, 0.01%)</title><rect x="70.8440%" y="389" width="0.0116%" height="15" fill="rgb(207,46,11)" fg:x="6094" fg:w="1"/><text x="71.0940%" y="399.50"></text></g><g><title>neuralang::World::move_balls (405 samples, 4.71%)</title><rect x="66.1707%" y="421" width="4.7082%" height="15" fill="rgb(241,35,35)" fg:x="5692" fg:w="405"/><text x="66.4207%" y="431.50">neura..</text></g><g><title>rand::rngs::thread::thread_rng (2 samples, 0.02%)</title><rect x="70.8556%" y="405" width="0.0233%" height="15" fill="rgb(243,32,47)" fg:x="6095" fg:w="2"/><text x="71.1056%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="70.8556%" y="389" width="0.0233%" height="15" fill="rgb(247,202,23)" fg:x="6095" fg:w="2"/><text x="71.1056%" y="399.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="70.8556%" y="373" width="0.0233%" height="15" fill="rgb(219,102,11)" fg:x="6095" fg:w="2"/><text x="71.1056%" y="383.50"></text></g><g><title>rand::rngs::thread::thread_rng::{{closure}} (2 samples, 0.02%)</title><rect x="70.8556%" y="357" width="0.0233%" height="15" fill="rgb(243,110,44)" fg:x="6095" fg:w="2"/><text x="71.1056%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="70.8556%" y="341" width="0.0233%" height="15" fill="rgb(222,74,54)" fg:x="6095" fg:w="2"/><text x="71.1056%" y="351.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (2 samples, 0.02%)</title><rect x="70.8556%" y="325" width="0.0233%" height="15" fill="rgb(216,99,12)" fg:x="6095" fg:w="2"/><text x="71.1056%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.02%)</title><rect x="70.8556%" y="309" width="0.0233%" height="15" fill="rgb(226,22,26)" fg:x="6095" fg:w="2"/><text x="71.1056%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.02%)</title><rect x="70.8556%" y="293" width="0.0233%" height="15" fill="rgb(217,163,10)" fg:x="6095" fg:w="2"/><text x="71.1056%" y="303.50"></text></g><g><title>core::mem::replace (2 samples, 0.02%)</title><rect x="70.8556%" y="277" width="0.0233%" height="15" fill="rgb(213,25,53)" fg:x="6095" fg:w="2"/><text x="71.1056%" y="287.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="70.8556%" y="261" width="0.0233%" height="15" fill="rgb(252,105,26)" fg:x="6095" fg:w="2"/><text x="71.1056%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (5 samples, 0.06%)</title><rect x="71.4950%" y="405" width="0.0581%" height="15" fill="rgb(220,39,43)" fg:x="6150" fg:w="5"/><text x="71.7450%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (5 samples, 0.06%)</title><rect x="71.4950%" y="389" width="0.0581%" height="15" fill="rgb(229,68,48)" fg:x="6150" fg:w="5"/><text x="71.7450%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (5 samples, 0.06%)</title><rect x="71.4950%" y="373" width="0.0581%" height="15" fill="rgb(252,8,32)" fg:x="6150" fg:w="5"/><text x="71.7450%" y="383.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.07%)</title><rect x="71.5531%" y="405" width="0.0698%" height="15" fill="rgb(223,20,43)" fg:x="6155" fg:w="6"/><text x="71.8031%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.07%)</title><rect x="71.6229%" y="405" width="0.0698%" height="15" fill="rgb(229,81,49)" fg:x="6161" fg:w="6"/><text x="71.8729%" y="415.50"></text></g><g><title>core::ptr::write (5 samples, 0.06%)</title><rect x="71.6345%" y="389" width="0.0581%" height="15" fill="rgb(236,28,36)" fg:x="6162" fg:w="5"/><text x="71.8845%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (63 samples, 0.73%)</title><rect x="71.6926%" y="373" width="0.7324%" height="15" fill="rgb(249,185,26)" fg:x="6167" fg:w="63"/><text x="71.9426%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (5 samples, 0.06%)</title><rect x="72.4250%" y="373" width="0.0581%" height="15" fill="rgb(249,174,33)" fg:x="6230" fg:w="5"/><text x="72.6750%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (132 samples, 1.53%)</title><rect x="71.6926%" y="405" width="1.5345%" height="15" fill="rgb(233,201,37)" fg:x="6167" fg:w="132"/><text x="71.9426%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (132 samples, 1.53%)</title><rect x="71.6926%" y="389" width="1.5345%" height="15" fill="rgb(221,78,26)" fg:x="6167" fg:w="132"/><text x="71.9426%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (64 samples, 0.74%)</title><rect x="72.4831%" y="373" width="0.7440%" height="15" fill="rgb(250,127,30)" fg:x="6235" fg:w="64"/><text x="72.7331%" y="383.50"></text></g><g><title>neuralang::add_2d (2 samples, 0.02%)</title><rect x="73.2272%" y="405" width="0.0233%" height="15" fill="rgb(230,49,44)" fg:x="6299" fg:w="2"/><text x="73.4772%" y="415.50"></text></g><g><title>neuralang::main (53 samples, 0.62%)</title><rect x="73.2504%" y="405" width="0.6161%" height="15" fill="rgb(229,67,23)" fg:x="6301" fg:w="53"/><text x="73.5004%" y="415.50"></text></g><g><title>neuralang::oob (5 samples, 0.06%)</title><rect x="73.8665%" y="405" width="0.0581%" height="15" fill="rgb(249,83,47)" fg:x="6354" fg:w="5"/><text x="74.1165%" y="415.50"></text></g><g><title>__fmod (69 samples, 0.80%)</title><rect x="75.3778%" y="389" width="0.8021%" height="15" fill="rgb(215,43,3)" fg:x="6484" fg:w="69"/><text x="75.6278%" y="399.50"></text></g><g><title>neuralang::pos_to_cell (1,068 samples, 12.42%)</title><rect x="73.9247%" y="405" width="12.4157%" height="15" fill="rgb(238,154,13)" fg:x="6359" fg:w="1068"/><text x="74.1747%" y="415.50">neuralang::pos_to_c..</text></g><g><title>__ieee754_fmod (874 samples, 10.16%)</title><rect x="76.1800%" y="389" width="10.1604%" height="15" fill="rgb(219,56,2)" fg:x="6553" fg:w="874"/><text x="76.4300%" y="399.50">__ieee754_fmod</text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="86.3055%" y="373" width="0.0349%" height="15" fill="rgb(233,0,4)" fg:x="7424" fg:w="3"/><text x="86.5555%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="86.3055%" y="357" width="0.0349%" height="15" fill="rgb(235,30,7)" fg:x="7424" fg:w="3"/><text x="86.5555%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="86.3055%" y="341" width="0.0349%" height="15" fill="rgb(250,79,13)" fg:x="7424" fg:w="3"/><text x="86.5555%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="86.3055%" y="325" width="0.0349%" height="15" fill="rgb(211,146,34)" fg:x="7424" fg:w="3"/><text x="86.5555%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="86.3055%" y="309" width="0.0349%" height="15" fill="rgb(228,22,38)" fg:x="7424" fg:w="3"/><text x="86.5555%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="86.3055%" y="293" width="0.0349%" height="15" fill="rgb(235,168,5)" fg:x="7424" fg:w="3"/><text x="86.5555%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="86.3055%" y="277" width="0.0349%" height="15" fill="rgb(221,155,16)" fg:x="7424" fg:w="3"/><text x="86.5555%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="86.3055%" y="261" width="0.0349%" height="15" fill="rgb(215,215,53)" fg:x="7424" fg:w="3"/><text x="86.5555%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="86.3055%" y="245" width="0.0349%" height="15" fill="rgb(223,4,10)" fg:x="7424" fg:w="3"/><text x="86.5555%" y="255.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="86.3055%" y="229" width="0.0349%" height="15" fill="rgb(234,103,6)" fg:x="7424" fg:w="3"/><text x="86.5555%" y="239.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="86.3055%" y="213" width="0.0349%" height="15" fill="rgb(227,97,0)" fg:x="7424" fg:w="3"/><text x="86.5555%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="86.3288%" y="197" width="0.0116%" height="15" fill="rgb(234,150,53)" fg:x="7426" fg:w="1"/><text x="86.5788%" y="207.50"></text></g><g><title>neuralang::World::update_cells (1,343 samples, 15.61%)</title><rect x="70.8789%" y="421" width="15.6126%" height="15" fill="rgb(228,201,54)" fg:x="6097" fg:w="1343"/><text x="71.1289%" y="431.50">neuralang::World::update..</text></g><g><title>neuralang::same_index (13 samples, 0.15%)</title><rect x="86.3404%" y="405" width="0.1511%" height="15" fill="rgb(222,22,37)" fg:x="7427" fg:w="13"/><text x="86.5904%" y="415.50"></text></g><g><title>neuralang::World::step (8,546 samples, 99.35%)</title><rect x="0.5580%" y="437" width="99.3490%" height="15" fill="rgb(237,53,32)" fg:x="48" fg:w="8546"/><text x="0.8080%" y="447.50">neuralang::World::step</text></g><g><title>neuralang::main (1,154 samples, 13.42%)</title><rect x="86.4915%" y="421" width="13.4155%" height="15" fill="rgb(233,25,53)" fg:x="7440" fg:w="1154"/><text x="86.7415%" y="431.50">neuralang::main</text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.8837%" y="405" width="0.0233%" height="15" fill="rgb(210,40,34)" fg:x="8592" fg:w="2"/><text x="100.1337%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.8837%" y="389" width="0.0233%" height="15" fill="rgb(241,220,44)" fg:x="8592" fg:w="2"/><text x="100.1337%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.8837%" y="373" width="0.0233%" height="15" fill="rgb(235,28,35)" fg:x="8592" fg:w="2"/><text x="100.1337%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.8837%" y="357" width="0.0233%" height="15" fill="rgb(210,56,17)" fg:x="8592" fg:w="2"/><text x="100.1337%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.8837%" y="341" width="0.0233%" height="15" fill="rgb(224,130,29)" fg:x="8592" fg:w="2"/><text x="100.1337%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.8837%" y="325" width="0.0233%" height="15" fill="rgb(235,212,8)" fg:x="8592" fg:w="2"/><text x="100.1337%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.8837%" y="309" width="0.0233%" height="15" fill="rgb(223,33,50)" fg:x="8592" fg:w="2"/><text x="100.1337%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.8837%" y="293" width="0.0233%" height="15" fill="rgb(219,149,13)" fg:x="8592" fg:w="2"/><text x="100.1337%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.8837%" y="277" width="0.0233%" height="15" fill="rgb(250,156,29)" fg:x="8592" fg:w="2"/><text x="100.1337%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.8837%" y="261" width="0.0233%" height="15" fill="rgb(216,193,19)" fg:x="8592" fg:w="2"/><text x="100.1337%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.8954%" y="245" width="0.0116%" height="15" fill="rgb(216,135,14)" fg:x="8593" fg:w="1"/><text x="100.1454%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.8954%" y="229" width="0.0116%" height="15" fill="rgb(241,47,5)" fg:x="8593" fg:w="1"/><text x="100.1454%" y="239.50"></text></g><g><title>__libc_start_main_impl (8,549 samples, 99.38%)</title><rect x="0.5464%" y="709" width="99.3839%" height="15" fill="rgb(233,42,35)" fg:x="47" fg:w="8549"/><text x="0.7964%" y="719.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (8,549 samples, 99.38%)</title><rect x="0.5464%" y="693" width="99.3839%" height="15" fill="rgb(231,13,6)" fg:x="47" fg:w="8549"/><text x="0.7964%" y="703.50">__libc_start_call_main</text></g><g><title>main (8,549 samples, 99.38%)</title><rect x="0.5464%" y="677" width="99.3839%" height="15" fill="rgb(207,181,40)" fg:x="47" fg:w="8549"/><text x="0.7964%" y="687.50">main</text></g><g><title>std::rt::lang_start_internal (8,549 samples, 99.38%)</title><rect x="0.5464%" y="661" width="99.3839%" height="15" fill="rgb(254,173,49)" fg:x="47" fg:w="8549"/><text x="0.7964%" y="671.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (8,549 samples, 99.38%)</title><rect x="0.5464%" y="645" width="99.3839%" height="15" fill="rgb(221,1,38)" fg:x="47" fg:w="8549"/><text x="0.7964%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8,549 samples, 99.38%)</title><rect x="0.5464%" y="629" width="99.3839%" height="15" fill="rgb(206,124,46)" fg:x="47" fg:w="8549"/><text x="0.7964%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8,549 samples, 99.38%)</title><rect x="0.5464%" y="613" width="99.3839%" height="15" fill="rgb(249,21,11)" fg:x="47" fg:w="8549"/><text x="0.7964%" y="623.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (8,549 samples, 99.38%)</title><rect x="0.5464%" y="597" width="99.3839%" height="15" fill="rgb(222,201,40)" fg:x="47" fg:w="8549"/><text x="0.7964%" y="607.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (8,549 samples, 99.38%)</title><rect x="0.5464%" y="581" width="99.3839%" height="15" fill="rgb(235,61,29)" fg:x="47" fg:w="8549"/><text x="0.7964%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8,549 samples, 99.38%)</title><rect x="0.5464%" y="565" width="99.3839%" height="15" fill="rgb(219,207,3)" fg:x="47" fg:w="8549"/><text x="0.7964%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8,549 samples, 99.38%)</title><rect x="0.5464%" y="549" width="99.3839%" height="15" fill="rgb(222,56,46)" fg:x="47" fg:w="8549"/><text x="0.7964%" y="559.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (8,549 samples, 99.38%)</title><rect x="0.5464%" y="533" width="99.3839%" height="15" fill="rgb(239,76,54)" fg:x="47" fg:w="8549"/><text x="0.7964%" y="543.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (8,549 samples, 99.38%)</title><rect x="0.5464%" y="517" width="99.3839%" height="15" fill="rgb(231,124,27)" fg:x="47" fg:w="8549"/><text x="0.7964%" y="527.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8,549 samples, 99.38%)</title><rect x="0.5464%" y="501" width="99.3839%" height="15" fill="rgb(249,195,6)" fg:x="47" fg:w="8549"/><text x="0.7964%" y="511.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (8,549 samples, 99.38%)</title><rect x="0.5464%" y="485" width="99.3839%" height="15" fill="rgb(237,174,47)" fg:x="47" fg:w="8549"/><text x="0.7964%" y="495.50">core::ops::function::FnOnce::call_once</text></g><g><title>neuralang::main (8,549 samples, 99.38%)</title><rect x="0.5464%" y="469" width="99.3839%" height="15" fill="rgb(206,201,31)" fg:x="47" fg:w="8549"/><text x="0.7964%" y="479.50">neuralang::main</text></g><g><title>neuralang::run (8,549 samples, 99.38%)</title><rect x="0.5464%" y="453" width="99.3839%" height="15" fill="rgb(231,57,52)" fg:x="47" fg:w="8549"/><text x="0.7964%" y="463.50">neuralang::run</text></g><g><title>std::io::stdio::_print (2 samples, 0.02%)</title><rect x="99.9070%" y="437" width="0.0233%" height="15" fill="rgb(248,177,22)" fg:x="8594" fg:w="2"/><text x="100.1570%" y="447.50"></text></g><g><title>std::io::stdio::print_to (2 samples, 0.02%)</title><rect x="99.9070%" y="421" width="0.0233%" height="15" fill="rgb(215,211,37)" fg:x="8594" fg:w="2"/><text x="100.1570%" y="431.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (2 samples, 0.02%)</title><rect x="99.9070%" y="405" width="0.0233%" height="15" fill="rgb(241,128,51)" fg:x="8594" fg:w="2"/><text x="100.1570%" y="415.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (2 samples, 0.02%)</title><rect x="99.9070%" y="389" width="0.0233%" height="15" fill="rgb(227,165,31)" fg:x="8594" fg:w="2"/><text x="100.1570%" y="399.50"></text></g><g><title>std::io::Write::write_fmt (2 samples, 0.02%)</title><rect x="99.9070%" y="373" width="0.0233%" height="15" fill="rgb(228,167,24)" fg:x="8594" fg:w="2"/><text x="100.1570%" y="383.50"></text></g><g><title>core::fmt::write (2 samples, 0.02%)</title><rect x="99.9070%" y="357" width="0.0233%" height="15" fill="rgb(228,143,12)" fg:x="8594" fg:w="2"/><text x="100.1570%" y="367.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.02%)</title><rect x="99.9070%" y="341" width="0.0233%" height="15" fill="rgb(249,149,8)" fg:x="8594" fg:w="2"/><text x="100.1570%" y="351.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="99.9070%" y="325" width="0.0233%" height="15" fill="rgb(243,35,44)" fg:x="8594" fg:w="2"/><text x="100.1570%" y="335.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="99.9070%" y="309" width="0.0233%" height="15" fill="rgb(246,89,9)" fg:x="8594" fg:w="2"/><text x="100.1570%" y="319.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="99.9070%" y="293" width="0.0233%" height="15" fill="rgb(233,213,13)" fg:x="8594" fg:w="2"/><text x="100.1570%" y="303.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (2 samples, 0.02%)</title><rect x="99.9070%" y="277" width="0.0233%" height="15" fill="rgb(233,141,41)" fg:x="8594" fg:w="2"/><text x="100.1570%" y="287.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (2 samples, 0.02%)</title><rect x="99.9070%" y="261" width="0.0233%" height="15" fill="rgb(239,167,4)" fg:x="8594" fg:w="2"/><text x="100.1570%" y="271.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (2 samples, 0.02%)</title><rect x="99.9070%" y="245" width="0.0233%" height="15" fill="rgb(209,217,16)" fg:x="8594" fg:w="2"/><text x="100.1570%" y="255.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (2 samples, 0.02%)</title><rect x="99.9070%" y="229" width="0.0233%" height="15" fill="rgb(219,88,35)" fg:x="8594" fg:w="2"/><text x="100.1570%" y="239.50"></text></g><g><title>__GI___libc_write (2 samples, 0.02%)</title><rect x="99.9070%" y="213" width="0.0233%" height="15" fill="rgb(220,193,23)" fg:x="8594" fg:w="2"/><text x="100.1570%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9186%" y="197" width="0.0116%" height="15" fill="rgb(230,90,52)" fg:x="8595" fg:w="1"/><text x="100.1686%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9186%" y="181" width="0.0116%" height="15" fill="rgb(252,106,19)" fg:x="8595" fg:w="1"/><text x="100.1686%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9186%" y="165" width="0.0116%" height="15" fill="rgb(206,74,20)" fg:x="8595" fg:w="1"/><text x="100.1686%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9186%" y="149" width="0.0116%" height="15" fill="rgb(230,138,44)" fg:x="8595" fg:w="1"/><text x="100.1686%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9186%" y="133" width="0.0116%" height="15" fill="rgb(235,182,43)" fg:x="8595" fg:w="1"/><text x="100.1686%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9186%" y="117" width="0.0116%" height="15" fill="rgb(242,16,51)" fg:x="8595" fg:w="1"/><text x="100.1686%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9186%" y="101" width="0.0116%" height="15" fill="rgb(248,9,4)" fg:x="8595" fg:w="1"/><text x="100.1686%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9186%" y="85" width="0.0116%" height="15" fill="rgb(210,31,22)" fg:x="8595" fg:w="1"/><text x="100.1686%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9186%" y="69" width="0.0116%" height="15" fill="rgb(239,54,39)" fg:x="8595" fg:w="1"/><text x="100.1686%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9186%" y="53" width="0.0116%" height="15" fill="rgb(230,99,41)" fg:x="8595" fg:w="1"/><text x="100.1686%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9186%" y="37" width="0.0116%" height="15" fill="rgb(253,106,12)" fg:x="8595" fg:w="1"/><text x="100.1686%" y="47.50"></text></g><g><title>neuralang (8,597 samples, 99.94%)</title><rect x="0.0000%" y="741" width="99.9419%" height="15" fill="rgb(213,46,41)" fg:x="0" fg:w="8597"/><text x="0.2500%" y="751.50">neuralang</text></g><g><title>_start (8,550 samples, 99.40%)</title><rect x="0.5464%" y="725" width="99.3955%" height="15" fill="rgb(215,133,35)" fg:x="47" fg:w="8550"/><text x="0.7964%" y="735.50">_start</text></g><g><title>_dl_start (1 samples, 0.01%)</title><rect x="99.9302%" y="709" width="0.0116%" height="15" fill="rgb(213,28,5)" fg:x="8596" fg:w="1"/><text x="100.1802%" y="719.50"></text></g><g><title>_dl_start_final (1 samples, 0.01%)</title><rect x="99.9302%" y="693" width="0.0116%" height="15" fill="rgb(215,77,49)" fg:x="8596" fg:w="1"/><text x="100.1802%" y="703.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.01%)</title><rect x="99.9302%" y="677" width="0.0116%" height="15" fill="rgb(248,100,22)" fg:x="8596" fg:w="1"/><text x="100.1802%" y="687.50"></text></g><g><title>dl_main (1 samples, 0.01%)</title><rect x="99.9302%" y="661" width="0.0116%" height="15" fill="rgb(208,67,9)" fg:x="8596" fg:w="1"/><text x="100.1802%" y="671.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.01%)</title><rect x="99.9302%" y="645" width="0.0116%" height="15" fill="rgb(219,133,21)" fg:x="8596" fg:w="1"/><text x="100.1802%" y="655.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.01%)</title><rect x="99.9302%" y="629" width="0.0116%" height="15" fill="rgb(246,46,29)" fg:x="8596" fg:w="1"/><text x="100.1802%" y="639.50"></text></g><g><title>openaux (1 samples, 0.01%)</title><rect x="99.9302%" y="613" width="0.0116%" height="15" fill="rgb(246,185,52)" fg:x="8596" fg:w="1"/><text x="100.1802%" y="623.50"></text></g><g><title>_dl_map_object (1 samples, 0.01%)</title><rect x="99.9302%" y="597" width="0.0116%" height="15" fill="rgb(252,136,11)" fg:x="8596" fg:w="1"/><text x="100.1802%" y="607.50"></text></g><g><title>open_path (1 samples, 0.01%)</title><rect x="99.9302%" y="581" width="0.0116%" height="15" fill="rgb(219,138,53)" fg:x="8596" fg:w="1"/><text x="100.1802%" y="591.50"></text></g><g><title>open_verify (1 samples, 0.01%)</title><rect x="99.9302%" y="565" width="0.0116%" height="15" fill="rgb(211,51,23)" fg:x="8596" fg:w="1"/><text x="100.1802%" y="575.50"></text></g><g><title>__GI___open64_nocancel (1 samples, 0.01%)</title><rect x="99.9302%" y="549" width="0.0116%" height="15" fill="rgb(247,221,28)" fg:x="8596" fg:w="1"/><text x="100.1802%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9302%" y="533" width="0.0116%" height="15" fill="rgb(251,222,45)" fg:x="8596" fg:w="1"/><text x="100.1802%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9302%" y="517" width="0.0116%" height="15" fill="rgb(217,162,53)" fg:x="8596" fg:w="1"/><text x="100.1802%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9302%" y="501" width="0.0116%" height="15" fill="rgb(229,93,14)" fg:x="8596" fg:w="1"/><text x="100.1802%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9302%" y="485" width="0.0116%" height="15" fill="rgb(209,67,49)" fg:x="8596" fg:w="1"/><text x="100.1802%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9302%" y="469" width="0.0116%" height="15" fill="rgb(213,87,29)" fg:x="8596" fg:w="1"/><text x="100.1802%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9302%" y="453" width="0.0116%" height="15" fill="rgb(205,151,52)" fg:x="8596" fg:w="1"/><text x="100.1802%" y="463.50"></text></g><g><title>all (8,602 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(253,215,39)" fg:x="0" fg:w="8602"/><text x="0.2500%" y="767.50"></text></g><g><title>perf-exec (5 samples, 0.06%)</title><rect x="99.9419%" y="741" width="0.0581%" height="15" fill="rgb(221,220,41)" fg:x="8597" fg:w="5"/><text x="100.1919%" y="751.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9419%" y="725" width="0.0581%" height="15" fill="rgb(218,133,21)" fg:x="8597" fg:w="5"/><text x="100.1919%" y="735.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9419%" y="709" width="0.0581%" height="15" fill="rgb(221,193,43)" fg:x="8597" fg:w="5"/><text x="100.1919%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9419%" y="693" width="0.0581%" height="15" fill="rgb(240,128,52)" fg:x="8597" fg:w="5"/><text x="100.1919%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9419%" y="677" width="0.0581%" height="15" fill="rgb(253,114,12)" fg:x="8597" fg:w="5"/><text x="100.1919%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9419%" y="661" width="0.0581%" height="15" fill="rgb(215,223,47)" fg:x="8597" fg:w="5"/><text x="100.1919%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9419%" y="645" width="0.0581%" height="15" fill="rgb(248,225,23)" fg:x="8597" fg:w="5"/><text x="100.1919%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9419%" y="629" width="0.0581%" height="15" fill="rgb(250,108,0)" fg:x="8597" fg:w="5"/><text x="100.1919%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9419%" y="613" width="0.0581%" height="15" fill="rgb(228,208,7)" fg:x="8597" fg:w="5"/><text x="100.1919%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9419%" y="597" width="0.0581%" height="15" fill="rgb(244,45,10)" fg:x="8597" fg:w="5"/><text x="100.1919%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9419%" y="581" width="0.0581%" height="15" fill="rgb(207,125,25)" fg:x="8597" fg:w="5"/><text x="100.1919%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9419%" y="565" width="0.0581%" height="15" fill="rgb(210,195,18)" fg:x="8597" fg:w="5"/><text x="100.1919%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9419%" y="549" width="0.0581%" height="15" fill="rgb(249,80,12)" fg:x="8597" fg:w="5"/><text x="100.1919%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9419%" y="533" width="0.0581%" height="15" fill="rgb(221,65,9)" fg:x="8597" fg:w="5"/><text x="100.1919%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9419%" y="517" width="0.0581%" height="15" fill="rgb(235,49,36)" fg:x="8597" fg:w="5"/><text x="100.1919%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9419%" y="501" width="0.0581%" height="15" fill="rgb(225,32,20)" fg:x="8597" fg:w="5"/><text x="100.1919%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9419%" y="485" width="0.0581%" height="15" fill="rgb(215,141,46)" fg:x="8597" fg:w="5"/><text x="100.1919%" y="495.50"></text></g></svg></svg>