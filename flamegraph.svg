<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="661.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="40494"><g><title>&lt;slotmap::DefaultKey as core::convert::From&lt;slotmap::KeyData&gt;&gt;::from (21 samples, 0.05%)</title><rect x="0.0000%" y="597" width="0.0519%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="21"/><text x="0.2500%" y="607.50"></text></g><g><title>&lt;slotmap::DefaultKey as core::convert::From&lt;slotmap::KeyData&gt;&gt;::from (15 samples, 0.04%)</title><rect x="0.0519%" y="581" width="0.0370%" height="15" fill="rgb(217,0,24)" fg:x="21" fg:w="15"/><text x="0.3019%" y="591.50"></text></g><g><title>&lt;slotmap::DefaultKey as slotmap::Key&gt;::data (96 samples, 0.24%)</title><rect x="0.0889%" y="581" width="0.2371%" height="15" fill="rgb(221,193,54)" fg:x="36" fg:w="96"/><text x="0.3389%" y="591.50"></text></g><g><title>slotmap::KeyData::new (5 samples, 0.01%)</title><rect x="0.3260%" y="581" width="0.0123%" height="15" fill="rgb(248,212,6)" fg:x="132" fg:w="5"/><text x="0.5760%" y="591.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (113 samples, 0.28%)</title><rect x="0.3383%" y="581" width="0.2791%" height="15" fill="rgb(208,68,35)" fg:x="137" fg:w="113"/><text x="0.5883%" y="591.50"></text></g><g><title>[[heap]] (242 samples, 0.60%)</title><rect x="0.0519%" y="597" width="0.5976%" height="15" fill="rgb(232,128,0)" fg:x="21" fg:w="242"/><text x="0.3019%" y="607.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (13 samples, 0.03%)</title><rect x="0.6174%" y="581" width="0.0321%" height="15" fill="rgb(207,160,47)" fg:x="250" fg:w="13"/><text x="0.8674%" y="591.50"></text></g><g><title>&lt;slotmap::DefaultKey as core::convert::From&lt;slotmap::KeyData&gt;&gt;::from (169 samples, 0.42%)</title><rect x="0.6742%" y="581" width="0.4173%" height="15" fill="rgb(228,23,34)" fg:x="273" fg:w="169"/><text x="0.9242%" y="591.50"></text></g><g><title>&lt;slotmap::basic::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,007 samples, 2.49%)</title><rect x="1.0915%" y="581" width="2.4868%" height="15" fill="rgb(218,30,26)" fg:x="442" fg:w="1007"/><text x="1.3415%" y="591.50">&lt;s..</text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (171 samples, 0.42%)</title><rect x="3.1560%" y="565" width="0.4223%" height="15" fill="rgb(220,122,19)" fg:x="1278" fg:w="171"/><text x="3.4060%" y="575.50"></text></g><g><title>__ieee754_fmodf (90 samples, 0.22%)</title><rect x="3.5808%" y="581" width="0.2223%" height="15" fill="rgb(250,228,42)" fg:x="1450" fg:w="90"/><text x="3.8308%" y="591.50"></text></g><g><title>neuralang::World::age_foods (155 samples, 0.38%)</title><rect x="3.8055%" y="533" width="0.3828%" height="15" fill="rgb(240,193,28)" fg:x="1541" fg:w="155"/><text x="4.0555%" y="543.50"></text></g><g><title>neuralang::World::check_collisions (117 samples, 0.29%)</title><rect x="4.1932%" y="533" width="0.2889%" height="15" fill="rgb(216,20,37)" fg:x="1698" fg:w="117"/><text x="4.4432%" y="543.50"></text></g><g><title>neuralang::World::move_beings (28 samples, 0.07%)</title><rect x="4.4821%" y="533" width="0.0691%" height="15" fill="rgb(206,188,39)" fg:x="1815" fg:w="28"/><text x="4.7321%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (28 samples, 0.07%)</title><rect x="4.4821%" y="517" width="0.0691%" height="15" fill="rgb(217,207,13)" fg:x="1815" fg:w="28"/><text x="4.7321%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (28 samples, 0.07%)</title><rect x="4.4821%" y="501" width="0.0691%" height="15" fill="rgb(231,73,38)" fg:x="1815" fg:w="28"/><text x="4.7321%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (28 samples, 0.07%)</title><rect x="4.4821%" y="485" width="0.0691%" height="15" fill="rgb(225,20,46)" fg:x="1815" fg:w="28"/><text x="4.7321%" y="495.50"></text></g><g><title>neuralang::World::move_beings::{{closure}} (28 samples, 0.07%)</title><rect x="4.4821%" y="469" width="0.0691%" height="15" fill="rgb(210,31,41)" fg:x="1815" fg:w="28"/><text x="4.7321%" y="479.50"></text></g><g><title>neuralang::dir_from_theta (28 samples, 0.07%)</title><rect x="4.4821%" y="453" width="0.0691%" height="15" fill="rgb(221,200,47)" fg:x="1815" fg:w="28"/><text x="4.7321%" y="463.50"></text></g><g><title>glam::f32::vec2::Vec2::from_angle (28 samples, 0.07%)</title><rect x="4.4821%" y="437" width="0.0691%" height="15" fill="rgb(226,26,5)" fg:x="1815" fg:w="28"/><text x="4.7321%" y="447.50"></text></g><g><title>glam::f32::math::std_math::sin_cos (28 samples, 0.07%)</title><rect x="4.4821%" y="421" width="0.0691%" height="15" fill="rgb(249,33,26)" fg:x="1815" fg:w="28"/><text x="4.7321%" y="431.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sin_cos (28 samples, 0.07%)</title><rect x="4.4821%" y="405" width="0.0691%" height="15" fill="rgb(235,183,28)" fg:x="1815" fg:w="28"/><text x="4.7321%" y="415.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sin (28 samples, 0.07%)</title><rect x="4.4821%" y="389" width="0.0691%" height="15" fill="rgb(221,5,38)" fg:x="1815" fg:w="28"/><text x="4.7321%" y="399.50"></text></g><g><title>neuralang::World::tire_beings (14 samples, 0.03%)</title><rect x="4.5612%" y="533" width="0.0346%" height="15" fill="rgb(247,18,42)" fg:x="1847" fg:w="14"/><text x="4.8112%" y="543.50"></text></g><g><title>neuralang::main (376 samples, 0.93%)</title><rect x="3.8055%" y="581" width="0.9285%" height="15" fill="rgb(241,131,45)" fg:x="1541" fg:w="376"/><text x="4.0555%" y="591.50"></text></g><g><title>neuralang::gauge (376 samples, 0.93%)</title><rect x="3.8055%" y="565" width="0.9285%" height="15" fill="rgb(249,31,29)" fg:x="1541" fg:w="376"/><text x="4.0555%" y="575.50"></text></g><g><title>neuralang::World::step (376 samples, 0.93%)</title><rect x="3.8055%" y="549" width="0.9285%" height="15" fill="rgb(225,111,53)" fg:x="1541" fg:w="376"/><text x="4.0555%" y="559.50"></text></g><g><title>neuralang::World::update_cells (56 samples, 0.14%)</title><rect x="4.5957%" y="533" width="0.1383%" height="15" fill="rgb(238,160,17)" fg:x="1861" fg:w="56"/><text x="4.8457%" y="543.50"></text></g><g><title>neuralang::pos_to_cell (53 samples, 0.13%)</title><rect x="4.6032%" y="517" width="0.1309%" height="15" fill="rgb(214,148,48)" fg:x="1864" fg:w="53"/><text x="4.8532%" y="527.50"></text></g><g><title>slotmap::KeyData::new (134 samples, 0.33%)</title><rect x="4.7365%" y="581" width="0.3309%" height="15" fill="rgb(232,36,49)" fg:x="1918" fg:w="134"/><text x="4.9865%" y="591.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (105 samples, 0.26%)</title><rect x="5.0674%" y="581" width="0.2593%" height="15" fill="rgb(209,103,24)" fg:x="2052" fg:w="105"/><text x="5.3174%" y="591.50"></text></g><g><title>[unknown] (1,910 samples, 4.72%)</title><rect x="0.6643%" y="597" width="4.7167%" height="15" fill="rgb(229,88,8)" fg:x="269" fg:w="1910"/><text x="0.9143%" y="607.50">[unkn..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (22 samples, 0.05%)</title><rect x="5.3267%" y="581" width="0.0543%" height="15" fill="rgb(213,181,19)" fg:x="2157" fg:w="22"/><text x="5.5767%" y="591.50"></text></g><g><title>&lt;slotmap::DefaultKey as core::convert::From&lt;slotmap::KeyData&gt;&gt;::from (189 samples, 0.47%)</title><rect x="12.5945%" y="245" width="0.4667%" height="15" fill="rgb(254,191,54)" fg:x="5100" fg:w="189"/><text x="12.8445%" y="255.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (353 samples, 0.87%)</title><rect x="12.1919%" y="261" width="0.8717%" height="15" fill="rgb(241,83,37)" fg:x="4937" fg:w="353"/><text x="12.4419%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (782 samples, 1.93%)</title><rect x="13.0637%" y="261" width="1.9312%" height="15" fill="rgb(233,36,39)" fg:x="5290" fg:w="782"/><text x="13.3137%" y="271.50">&lt;..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (662 samples, 1.63%)</title><rect x="13.3600%" y="245" width="1.6348%" height="15" fill="rgb(226,3,54)" fg:x="5410" fg:w="662"/><text x="13.6100%" y="255.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (186 samples, 0.46%)</title><rect x="14.5355%" y="229" width="0.4593%" height="15" fill="rgb(245,192,40)" fg:x="5886" fg:w="186"/><text x="14.7855%" y="239.50"></text></g><g><title>slotmap::KeyData::new (270 samples, 0.67%)</title><rect x="15.0022%" y="261" width="0.6668%" height="15" fill="rgb(238,167,29)" fg:x="6075" fg:w="270"/><text x="15.2522%" y="271.50"></text></g><g><title>&lt;slotmap::basic::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,245 samples, 8.01%)</title><rect x="8.0308%" y="277" width="8.0135%" height="15" fill="rgb(232,182,51)" fg:x="3252" fg:w="3245"/><text x="8.2808%" y="287.50">&lt;slotmap::b..</text></g><g><title>slotmap::basic::Slot&lt;T&gt;::get_mut (152 samples, 0.38%)</title><rect x="15.6690%" y="261" width="0.3754%" height="15" fill="rgb(231,60,39)" fg:x="6345" fg:w="152"/><text x="15.9190%" y="271.50"></text></g><g><title>slotmap::basic::Slot&lt;T&gt;::occupied (152 samples, 0.38%)</title><rect x="15.6690%" y="245" width="0.3754%" height="15" fill="rgb(208,69,12)" fg:x="6345" fg:w="152"/><text x="15.9190%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (27 samples, 0.07%)</title><rect x="16.0493%" y="245" width="0.0667%" height="15" fill="rgb(235,93,37)" fg:x="6499" fg:w="27"/><text x="16.2993%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (49 samples, 0.12%)</title><rect x="16.0493%" y="277" width="0.1210%" height="15" fill="rgb(213,116,39)" fg:x="6499" fg:w="49"/><text x="16.2993%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (49 samples, 0.12%)</title><rect x="16.0493%" y="261" width="0.1210%" height="15" fill="rgb(222,207,29)" fg:x="6499" fg:w="49"/><text x="16.2993%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (22 samples, 0.05%)</title><rect x="16.1160%" y="245" width="0.0543%" height="15" fill="rgb(206,96,30)" fg:x="6526" fg:w="22"/><text x="16.3660%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (22 samples, 0.05%)</title><rect x="16.1160%" y="229" width="0.0543%" height="15" fill="rgb(218,138,4)" fg:x="6526" fg:w="22"/><text x="16.3660%" y="239.50"></text></g><g><title>neuralang::World::age_foods::{{closure}} (22 samples, 0.05%)</title><rect x="16.1160%" y="213" width="0.0543%" height="15" fill="rgb(250,191,14)" fg:x="6526" fg:w="22"/><text x="16.3660%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (22 samples, 0.05%)</title><rect x="16.1160%" y="197" width="0.0543%" height="15" fill="rgb(239,60,40)" fg:x="6526" fg:w="22"/><text x="16.3660%" y="207.50"></text></g><g><title>core::cmp::PartialEq::ne (22 samples, 0.05%)</title><rect x="16.1160%" y="181" width="0.0543%" height="15" fill="rgb(206,27,48)" fg:x="6526" fg:w="22"/><text x="16.3660%" y="191.50"></text></g><g><title>&lt;slotmap::DefaultKey as core::cmp::PartialEq&gt;::eq (22 samples, 0.05%)</title><rect x="16.1160%" y="165" width="0.0543%" height="15" fill="rgb(225,35,8)" fg:x="6526" fg:w="22"/><text x="16.3660%" y="175.50"></text></g><g><title>&lt;slotmap::KeyData as core::cmp::PartialEq&gt;::eq (22 samples, 0.05%)</title><rect x="16.1160%" y="149" width="0.0543%" height="15" fill="rgb(250,213,24)" fg:x="6526" fg:w="22"/><text x="16.3660%" y="159.50"></text></g><g><title>neuralang::pos_to_cell (24 samples, 0.06%)</title><rect x="16.1703%" y="277" width="0.0593%" height="15" fill="rgb(247,123,22)" fg:x="6548" fg:w="24"/><text x="16.4203%" y="287.50"></text></g><g><title>__ieee754_fmodf (15 samples, 0.04%)</title><rect x="16.1925%" y="261" width="0.0370%" height="15" fill="rgb(231,138,38)" fg:x="6557" fg:w="15"/><text x="16.4425%" y="271.50"></text></g><g><title>neuralang::World::age_foods (4,398 samples, 10.86%)</title><rect x="5.3835%" y="293" width="10.8609%" height="15" fill="rgb(231,145,46)" fg:x="2180" fg:w="4398"/><text x="5.6335%" y="303.50">neuralang::World..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::remove (6 samples, 0.01%)</title><rect x="16.2296%" y="277" width="0.0148%" height="15" fill="rgb(251,118,11)" fg:x="6572" fg:w="6"/><text x="16.4796%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.12%)</title><rect x="16.5086%" y="261" width="0.1185%" height="15" fill="rgb(217,147,25)" fg:x="6685" fg:w="48"/><text x="16.7586%" y="271.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.09%)</title><rect x="16.5358%" y="245" width="0.0914%" height="15" fill="rgb(247,81,37)" fg:x="6696" fg:w="37"/><text x="16.7858%" y="255.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (9 samples, 0.02%)</title><rect x="16.6049%" y="229" width="0.0222%" height="15" fill="rgb(209,12,38)" fg:x="6724" fg:w="9"/><text x="16.8549%" y="239.50"></text></g><g><title>neuralang::World::age_obstructs (156 samples, 0.39%)</title><rect x="16.2444%" y="293" width="0.3852%" height="15" fill="rgb(227,1,9)" fg:x="6578" fg:w="156"/><text x="16.4944%" y="303.50"></text></g><g><title>&lt;slotmap::basic::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (156 samples, 0.39%)</title><rect x="16.2444%" y="277" width="0.3852%" height="15" fill="rgb(248,47,43)" fg:x="6578" fg:w="156"/><text x="16.4944%" y="287.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (5,723 samples, 14.13%)</title><rect x="22.0477%" y="277" width="14.1330%" height="15" fill="rgb(221,10,30)" fg:x="8928" fg:w="5723"/><text x="22.2977%" y="287.50">&lt;&amp;alloc::vec::Vec&lt;T,A..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5,723 samples, 14.13%)</title><rect x="22.0477%" y="261" width="14.1330%" height="15" fill="rgb(210,229,1)" fg:x="8928" fg:w="5723"/><text x="22.2977%" y="271.50">&lt;alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,407 samples, 5.94%)</title><rect x="36.1807%" y="245" width="5.9441%" height="15" fill="rgb(222,148,37)" fg:x="14651" fg:w="2407"/><text x="36.4307%" y="255.50">&lt;usize a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,536 samples, 6.26%)</title><rect x="36.1807%" y="277" width="6.2627%" height="15" fill="rgb(234,67,33)" fg:x="14651" fg:w="2536"/><text x="36.4307%" y="287.50">&lt;alloc::..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,536 samples, 6.26%)</title><rect x="36.1807%" y="261" width="6.2627%" height="15" fill="rgb(247,98,35)" fg:x="14651" fg:w="2536"/><text x="36.4307%" y="271.50">core::sl..</text></g><g><title>neuralang::main (129 samples, 0.32%)</title><rect x="42.1248%" y="245" width="0.3186%" height="15" fill="rgb(247,138,52)" fg:x="17058" fg:w="129"/><text x="42.3748%" y="255.50"></text></g><g><title>&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::next (456 samples, 1.13%)</title><rect x="42.4433%" y="261" width="1.1261%" height="15" fill="rgb(213,79,30)" fg:x="17187" fg:w="456"/><text x="42.6933%" y="271.50"></text></g><g><title>core::ops::index_range::IndexRange::next_unchecked (309 samples, 0.76%)</title><rect x="42.8063%" y="245" width="0.7631%" height="15" fill="rgb(246,177,23)" fg:x="17334" fg:w="309"/><text x="43.0563%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (78 samples, 0.19%)</title><rect x="43.5694%" y="197" width="0.1926%" height="15" fill="rgb(230,62,27)" fg:x="17643" fg:w="78"/><text x="43.8194%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (180 samples, 0.44%)</title><rect x="43.5694%" y="261" width="0.4445%" height="15" fill="rgb(216,154,8)" fg:x="17643" fg:w="180"/><text x="43.8194%" y="271.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (180 samples, 0.44%)</title><rect x="43.5694%" y="245" width="0.4445%" height="15" fill="rgb(244,35,45)" fg:x="17643" fg:w="180"/><text x="43.8194%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (180 samples, 0.44%)</title><rect x="43.5694%" y="229" width="0.4445%" height="15" fill="rgb(251,115,12)" fg:x="17643" fg:w="180"/><text x="43.8194%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (180 samples, 0.44%)</title><rect x="43.5694%" y="213" width="0.4445%" height="15" fill="rgb(240,54,50)" fg:x="17643" fg:w="180"/><text x="43.8194%" y="223.50"></text></g><g><title>neuralang::main (102 samples, 0.25%)</title><rect x="43.7620%" y="197" width="0.2519%" height="15" fill="rgb(233,84,52)" fg:x="17721" fg:w="102"/><text x="44.0120%" y="207.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (670 samples, 1.65%)</title><rect x="42.4433%" y="277" width="1.6546%" height="15" fill="rgb(207,117,47)" fg:x="17187" fg:w="670"/><text x="42.6933%" y="287.50"></text></g><g><title>neuralang::main (34 samples, 0.08%)</title><rect x="44.0139%" y="261" width="0.0840%" height="15" fill="rgb(249,43,39)" fg:x="17823" fg:w="34"/><text x="44.2639%" y="271.50"></text></g><g><title>[unknown] (16 samples, 0.04%)</title><rect x="49.0245%" y="261" width="0.0395%" height="15" fill="rgb(209,38,44)" fg:x="19852" fg:w="16"/><text x="49.2745%" y="271.50"></text></g><g><title>[unknown] (15 samples, 0.04%)</title><rect x="49.0270%" y="245" width="0.0370%" height="15" fill="rgb(236,212,23)" fg:x="19853" fg:w="15"/><text x="49.2770%" y="255.50"></text></g><g><title>[unknown] (15 samples, 0.04%)</title><rect x="49.0270%" y="229" width="0.0370%" height="15" fill="rgb(242,79,21)" fg:x="19853" fg:w="15"/><text x="49.2770%" y="239.50"></text></g><g><title>[unknown] (15 samples, 0.04%)</title><rect x="49.0270%" y="213" width="0.0370%" height="15" fill="rgb(211,96,35)" fg:x="19853" fg:w="15"/><text x="49.2770%" y="223.50"></text></g><g><title>[unknown] (15 samples, 0.04%)</title><rect x="49.0270%" y="197" width="0.0370%" height="15" fill="rgb(253,215,40)" fg:x="19853" fg:w="15"/><text x="49.2770%" y="207.50"></text></g><g><title>[unknown] (14 samples, 0.03%)</title><rect x="49.0295%" y="181" width="0.0346%" height="15" fill="rgb(211,81,21)" fg:x="19854" fg:w="14"/><text x="49.2795%" y="191.50"></text></g><g><title>[unknown] (14 samples, 0.03%)</title><rect x="49.0295%" y="165" width="0.0346%" height="15" fill="rgb(208,190,38)" fg:x="19854" fg:w="14"/><text x="49.2795%" y="175.50"></text></g><g><title>[unknown] (14 samples, 0.03%)</title><rect x="49.0295%" y="149" width="0.0346%" height="15" fill="rgb(235,213,38)" fg:x="19854" fg:w="14"/><text x="49.2795%" y="159.50"></text></g><g><title>[unknown] (14 samples, 0.03%)</title><rect x="49.0295%" y="133" width="0.0346%" height="15" fill="rgb(237,122,38)" fg:x="19854" fg:w="14"/><text x="49.2795%" y="143.50"></text></g><g><title>[unknown] (14 samples, 0.03%)</title><rect x="49.0295%" y="117" width="0.0346%" height="15" fill="rgb(244,218,35)" fg:x="19854" fg:w="14"/><text x="49.2795%" y="127.50"></text></g><g><title>[unknown] (14 samples, 0.03%)</title><rect x="49.0295%" y="101" width="0.0346%" height="15" fill="rgb(240,68,47)" fg:x="19854" fg:w="14"/><text x="49.2795%" y="111.50"></text></g><g><title>[unknown] (13 samples, 0.03%)</title><rect x="49.0320%" y="85" width="0.0321%" height="15" fill="rgb(210,16,53)" fg:x="19855" fg:w="13"/><text x="49.2820%" y="95.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="49.0344%" y="69" width="0.0296%" height="15" fill="rgb(235,124,12)" fg:x="19856" fg:w="12"/><text x="49.2844%" y="79.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="49.0344%" y="53" width="0.0296%" height="15" fill="rgb(224,169,11)" fg:x="19856" fg:w="12"/><text x="49.2844%" y="63.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (11 samples, 0.03%)</title><rect x="49.0641%" y="229" width="0.0272%" height="15" fill="rgb(250,166,2)" fg:x="19868" fg:w="11"/><text x="49.3141%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,057 samples, 5.08%)</title><rect x="44.0979%" y="277" width="5.0798%" height="15" fill="rgb(242,216,29)" fg:x="17857" fg:w="2057"/><text x="44.3479%" y="287.50">&lt;core:..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (46 samples, 0.11%)</title><rect x="49.0641%" y="261" width="0.1136%" height="15" fill="rgb(230,116,27)" fg:x="19868" fg:w="46"/><text x="49.3141%" y="271.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (46 samples, 0.11%)</title><rect x="49.0641%" y="245" width="0.1136%" height="15" fill="rgb(228,99,48)" fg:x="19868" fg:w="46"/><text x="49.3141%" y="255.50"></text></g><g><title>neuralang::main (35 samples, 0.09%)</title><rect x="49.0912%" y="229" width="0.0864%" height="15" fill="rgb(253,11,6)" fg:x="19879" fg:w="35"/><text x="49.3412%" y="239.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Div&lt;f32&gt;&gt;::div (27 samples, 0.07%)</title><rect x="49.1777%" y="277" width="0.0667%" height="15" fill="rgb(247,143,39)" fg:x="19914" fg:w="27"/><text x="49.4277%" y="287.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (27 samples, 0.07%)</title><rect x="49.1777%" y="261" width="0.0667%" height="15" fill="rgb(236,97,10)" fg:x="19914" fg:w="27"/><text x="49.4277%" y="271.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Sub&gt;::sub (56 samples, 0.14%)</title><rect x="49.2443%" y="277" width="0.1383%" height="15" fill="rgb(233,208,19)" fg:x="19941" fg:w="56"/><text x="49.4943%" y="287.50"></text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (56 samples, 0.14%)</title><rect x="49.2443%" y="261" width="0.1383%" height="15" fill="rgb(216,164,2)" fg:x="19941" fg:w="56"/><text x="49.4943%" y="271.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="49.3876%" y="277" width="0.0222%" height="15" fill="rgb(220,129,5)" fg:x="19999" fg:w="9"/><text x="49.6376%" y="287.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="49.3876%" y="261" width="0.0222%" height="15" fill="rgb(242,17,10)" fg:x="19999" fg:w="9"/><text x="49.6376%" y="271.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="49.3876%" y="245" width="0.0222%" height="15" fill="rgb(242,107,0)" fg:x="19999" fg:w="9"/><text x="49.6376%" y="255.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="49.3876%" y="229" width="0.0222%" height="15" fill="rgb(251,28,31)" fg:x="19999" fg:w="9"/><text x="49.6376%" y="239.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="49.3876%" y="213" width="0.0222%" height="15" fill="rgb(233,223,10)" fg:x="19999" fg:w="9"/><text x="49.6376%" y="223.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="49.3876%" y="197" width="0.0222%" height="15" fill="rgb(215,21,27)" fg:x="19999" fg:w="9"/><text x="49.6376%" y="207.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="49.3876%" y="181" width="0.0222%" height="15" fill="rgb(232,23,21)" fg:x="19999" fg:w="9"/><text x="49.6376%" y="191.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="49.3876%" y="165" width="0.0222%" height="15" fill="rgb(244,5,23)" fg:x="19999" fg:w="9"/><text x="49.6376%" y="175.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="49.3876%" y="149" width="0.0222%" height="15" fill="rgb(226,81,46)" fg:x="19999" fg:w="9"/><text x="49.6376%" y="159.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="49.3876%" y="133" width="0.0222%" height="15" fill="rgb(247,70,30)" fg:x="19999" fg:w="9"/><text x="49.6376%" y="143.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="49.3876%" y="117" width="0.0222%" height="15" fill="rgb(212,68,19)" fg:x="19999" fg:w="9"/><text x="49.6376%" y="127.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="49.3925%" y="101" width="0.0173%" height="15" fill="rgb(240,187,13)" fg:x="20001" fg:w="7"/><text x="49.6425%" y="111.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="49.3950%" y="85" width="0.0148%" height="15" fill="rgb(223,113,26)" fg:x="20002" fg:w="6"/><text x="49.6450%" y="95.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="49.3950%" y="69" width="0.0148%" height="15" fill="rgb(206,192,2)" fg:x="20002" fg:w="6"/><text x="49.6450%" y="79.50"></text></g><g><title>&lt;slotmap::KeyData as core::cmp::PartialEq&gt;::eq (606 samples, 1.50%)</title><rect x="49.4098%" y="245" width="1.4965%" height="15" fill="rgb(241,108,4)" fg:x="20008" fg:w="606"/><text x="49.6598%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (615 samples, 1.52%)</title><rect x="49.4098%" y="277" width="1.5187%" height="15" fill="rgb(247,173,49)" fg:x="20008" fg:w="615"/><text x="49.6598%" y="287.50"></text></g><g><title>&lt;slotmap::DefaultKey as core::cmp::PartialEq&gt;::eq (615 samples, 1.52%)</title><rect x="49.4098%" y="261" width="1.5187%" height="15" fill="rgb(224,114,35)" fg:x="20008" fg:w="615"/><text x="49.6598%" y="271.50"></text></g><g><title>neuralang::main (9 samples, 0.02%)</title><rect x="50.9063%" y="245" width="0.0222%" height="15" fill="rgb(245,159,27)" fg:x="20614" fg:w="9"/><text x="51.1563%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (8 samples, 0.02%)</title><rect x="50.9409%" y="229" width="0.0198%" height="15" fill="rgb(245,172,44)" fg:x="20628" fg:w="8"/><text x="51.1909%" y="239.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (52 samples, 0.13%)</title><rect x="50.9409%" y="245" width="0.1284%" height="15" fill="rgb(236,23,11)" fg:x="20628" fg:w="52"/><text x="51.1909%" y="255.50"></text></g><g><title>neuralang::main (44 samples, 0.11%)</title><rect x="50.9606%" y="229" width="0.1087%" height="15" fill="rgb(205,117,38)" fg:x="20636" fg:w="44"/><text x="51.2106%" y="239.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (180 samples, 0.44%)</title><rect x="50.9285%" y="277" width="0.4445%" height="15" fill="rgb(237,72,25)" fg:x="20623" fg:w="180"/><text x="51.1785%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (180 samples, 0.44%)</title><rect x="50.9285%" y="261" width="0.4445%" height="15" fill="rgb(244,70,9)" fg:x="20623" fg:w="180"/><text x="51.1785%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (123 samples, 0.30%)</title><rect x="51.0693%" y="245" width="0.3037%" height="15" fill="rgb(217,125,39)" fg:x="20680" fg:w="123"/><text x="51.3193%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (24 samples, 0.06%)</title><rect x="51.3730%" y="277" width="0.0593%" height="15" fill="rgb(235,36,10)" fg:x="20803" fg:w="24"/><text x="51.6230%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (39 samples, 0.10%)</title><rect x="51.4323%" y="277" width="0.0963%" height="15" fill="rgb(251,123,47)" fg:x="20827" fg:w="39"/><text x="51.6823%" y="287.50"></text></g><g><title>glam::f32::vec2::&lt;impl core::ops::arith::Mul&lt;glam::f32::vec2::Vec2&gt; for f32&gt;::mul (21 samples, 0.05%)</title><rect x="51.5286%" y="277" width="0.0519%" height="15" fill="rgb(221,13,13)" fg:x="20866" fg:w="21"/><text x="51.7786%" y="287.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (21 samples, 0.05%)</title><rect x="51.5286%" y="261" width="0.0519%" height="15" fill="rgb(238,131,9)" fg:x="20866" fg:w="21"/><text x="51.7786%" y="271.50"></text></g><g><title>glam::f32::vec2::Vec2::dot (49 samples, 0.12%)</title><rect x="51.5805%" y="277" width="0.1210%" height="15" fill="rgb(211,50,8)" fg:x="20887" fg:w="49"/><text x="51.8305%" y="287.50"></text></g><g><title>glam::f32::vec2::Vec2::normalize (7 samples, 0.02%)</title><rect x="51.7015%" y="277" width="0.0173%" height="15" fill="rgb(245,182,24)" fg:x="20936" fg:w="7"/><text x="51.9515%" y="287.50"></text></g><g><title>glam::f32::vec2::Vec2::length_recip (5 samples, 0.01%)</title><rect x="51.7064%" y="261" width="0.0123%" height="15" fill="rgb(242,14,37)" fg:x="20938" fg:w="5"/><text x="51.9564%" y="271.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::recip (5 samples, 0.01%)</title><rect x="51.7064%" y="245" width="0.0123%" height="15" fill="rgb(246,228,12)" fg:x="20938" fg:w="5"/><text x="51.9564%" y="255.50"></text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (187 samples, 0.46%)</title><rect x="53.0375%" y="245" width="0.4618%" height="15" fill="rgb(213,55,15)" fg:x="21477" fg:w="187"/><text x="53.2875%" y="255.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Sub&gt;::sub (228 samples, 0.56%)</title><rect x="53.0375%" y="261" width="0.5630%" height="15" fill="rgb(209,9,3)" fg:x="21477" fg:w="228"/><text x="53.2875%" y="271.50"></text></g><g><title>neuralang::main (41 samples, 0.10%)</title><rect x="53.4993%" y="245" width="0.1012%" height="15" fill="rgb(230,59,30)" fg:x="21664" fg:w="41"/><text x="53.7493%" y="255.50"></text></g><g><title>neuralang::main (62 samples, 0.15%)</title><rect x="53.6055%" y="229" width="0.1531%" height="15" fill="rgb(209,121,21)" fg:x="21707" fg:w="62"/><text x="53.8555%" y="239.50"></text></g><g><title>glam::f32::math::std_math::sqrt (659 samples, 1.63%)</title><rect x="53.6055%" y="245" width="1.6274%" height="15" fill="rgb(220,109,13)" fg:x="21707" fg:w="659"/><text x="53.8555%" y="255.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (597 samples, 1.47%)</title><rect x="53.7586%" y="229" width="1.4743%" height="15" fill="rgb(232,18,1)" fg:x="21769" fg:w="597"/><text x="54.0086%" y="239.50"></text></g><g><title>neuralang::b_collides_b (1,806 samples, 4.46%)</title><rect x="51.7188%" y="277" width="4.4599%" height="15" fill="rgb(215,41,42)" fg:x="20943" fg:w="1806"/><text x="51.9688%" y="287.50">neura..</text></g><g><title>glam::f32::vec2::Vec2::length (1,042 samples, 2.57%)</title><rect x="53.6055%" y="261" width="2.5732%" height="15" fill="rgb(224,123,36)" fg:x="21707" fg:w="1042"/><text x="53.8555%" y="271.50">gl..</text></g><g><title>glam::f32::vec2::Vec2::dot (383 samples, 0.95%)</title><rect x="55.2329%" y="245" width="0.9458%" height="15" fill="rgb(240,125,3)" fg:x="22366" fg:w="383"/><text x="55.4829%" y="255.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="56.6084%" y="261" width="0.0148%" height="15" fill="rgb(205,98,50)" fg:x="22923" fg:w="6"/><text x="56.8584%" y="271.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="56.6109%" y="245" width="0.0123%" height="15" fill="rgb(205,185,37)" fg:x="22924" fg:w="5"/><text x="56.8609%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="56.6109%" y="229" width="0.0123%" height="15" fill="rgb(238,207,15)" fg:x="22924" fg:w="5"/><text x="56.8609%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="56.6109%" y="213" width="0.0123%" height="15" fill="rgb(213,199,42)" fg:x="22924" fg:w="5"/><text x="56.8609%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="56.6109%" y="197" width="0.0123%" height="15" fill="rgb(235,201,11)" fg:x="22924" fg:w="5"/><text x="56.8609%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="56.6109%" y="181" width="0.0123%" height="15" fill="rgb(207,46,11)" fg:x="22924" fg:w="5"/><text x="56.8609%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="56.6109%" y="165" width="0.0123%" height="15" fill="rgb(241,35,35)" fg:x="22924" fg:w="5"/><text x="56.8609%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="56.6109%" y="149" width="0.0123%" height="15" fill="rgb(243,32,47)" fg:x="22924" fg:w="5"/><text x="56.8609%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="56.6109%" y="133" width="0.0123%" height="15" fill="rgb(247,202,23)" fg:x="22924" fg:w="5"/><text x="56.8609%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="56.6109%" y="117" width="0.0123%" height="15" fill="rgb(219,102,11)" fg:x="22924" fg:w="5"/><text x="56.8609%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="56.6109%" y="101" width="0.0123%" height="15" fill="rgb(243,110,44)" fg:x="22924" fg:w="5"/><text x="56.8609%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="56.6109%" y="85" width="0.0123%" height="15" fill="rgb(222,74,54)" fg:x="22924" fg:w="5"/><text x="56.8609%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="56.6109%" y="69" width="0.0123%" height="15" fill="rgb(216,99,12)" fg:x="22924" fg:w="5"/><text x="56.8609%" y="79.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="56.6109%" y="53" width="0.0123%" height="15" fill="rgb(226,22,26)" fg:x="22924" fg:w="5"/><text x="56.8609%" y="63.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Sub&gt;::sub (131 samples, 0.32%)</title><rect x="56.6232%" y="245" width="0.3235%" height="15" fill="rgb(217,163,10)" fg:x="22929" fg:w="131"/><text x="56.8732%" y="255.50"></text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (131 samples, 0.32%)</title><rect x="56.6232%" y="229" width="0.3235%" height="15" fill="rgb(213,25,53)" fg:x="22929" fg:w="131"/><text x="56.8732%" y="239.50"></text></g><g><title>glam::f32::math::std_math::sqrt (284 samples, 0.70%)</title><rect x="56.9467%" y="229" width="0.7013%" height="15" fill="rgb(252,105,26)" fg:x="23060" fg:w="284"/><text x="57.1967%" y="239.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (283 samples, 0.70%)</title><rect x="56.9492%" y="213" width="0.6989%" height="15" fill="rgb(220,39,43)" fg:x="23061" fg:w="283"/><text x="57.1992%" y="223.50"></text></g><g><title>neuralang::b_collides_f (765 samples, 1.89%)</title><rect x="56.1787%" y="277" width="1.8892%" height="15" fill="rgb(229,68,48)" fg:x="22749" fg:w="765"/><text x="56.4287%" y="287.50">n..</text></g><g><title>glam::f32::vec2::Vec2::distance (585 samples, 1.44%)</title><rect x="56.6232%" y="261" width="1.4447%" height="15" fill="rgb(252,8,32)" fg:x="22929" fg:w="585"/><text x="56.8732%" y="271.50"></text></g><g><title>glam::f32::vec2::Vec2::length (454 samples, 1.12%)</title><rect x="56.9467%" y="245" width="1.1212%" height="15" fill="rgb(223,20,43)" fg:x="23060" fg:w="454"/><text x="57.1967%" y="255.50"></text></g><g><title>glam::f32::vec2::Vec2::dot (170 samples, 0.42%)</title><rect x="57.6480%" y="229" width="0.4198%" height="15" fill="rgb(229,81,49)" fg:x="23344" fg:w="170"/><text x="57.8980%" y="239.50"></text></g><g><title>neuralang::b_collides_o (5 samples, 0.01%)</title><rect x="58.0679%" y="277" width="0.0123%" height="15" fill="rgb(236,28,36)" fg:x="23514" fg:w="5"/><text x="58.3179%" y="287.50"></text></g><g><title>reduce_fast (18 samples, 0.04%)</title><rect x="58.1321%" y="181" width="0.0445%" height="15" fill="rgb(249,185,26)" fg:x="23540" fg:w="18"/><text x="58.3821%" y="191.50"></text></g><g><title>neuralang::dir_from_theta (93 samples, 0.23%)</title><rect x="58.0802%" y="277" width="0.2297%" height="15" fill="rgb(249,174,33)" fg:x="23519" fg:w="93"/><text x="58.3302%" y="287.50"></text></g><g><title>glam::f32::vec2::Vec2::from_angle (93 samples, 0.23%)</title><rect x="58.0802%" y="261" width="0.2297%" height="15" fill="rgb(233,201,37)" fg:x="23519" fg:w="93"/><text x="58.3302%" y="271.50"></text></g><g><title>glam::f32::math::std_math::sin_cos (93 samples, 0.23%)</title><rect x="58.0802%" y="245" width="0.2297%" height="15" fill="rgb(221,78,26)" fg:x="23519" fg:w="93"/><text x="58.3302%" y="255.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sin_cos (93 samples, 0.23%)</title><rect x="58.0802%" y="229" width="0.2297%" height="15" fill="rgb(250,127,30)" fg:x="23519" fg:w="93"/><text x="58.3302%" y="239.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sin (93 samples, 0.23%)</title><rect x="58.0802%" y="213" width="0.2297%" height="15" fill="rgb(230,49,44)" fg:x="23519" fg:w="93"/><text x="58.3302%" y="223.50"></text></g><g><title>__sincosf_fma (93 samples, 0.23%)</title><rect x="58.0802%" y="197" width="0.2297%" height="15" fill="rgb(229,67,23)" fg:x="23519" fg:w="93"/><text x="58.3302%" y="207.50"></text></g><g><title>sincosf_poly (54 samples, 0.13%)</title><rect x="58.1765%" y="181" width="0.1334%" height="15" fill="rgb(249,83,47)" fg:x="23558" fg:w="54"/><text x="58.4265%" y="191.50"></text></g><g><title>v2df_to_sf (17 samples, 0.04%)</title><rect x="58.2679%" y="165" width="0.0420%" height="15" fill="rgb(215,43,3)" fg:x="23595" fg:w="17"/><text x="58.5179%" y="175.50"></text></g><g><title>neuralang::main (420 samples, 1.04%)</title><rect x="58.3099%" y="277" width="1.0372%" height="15" fill="rgb(238,154,13)" fg:x="23612" fg:w="420"/><text x="58.5599%" y="287.50"></text></g><g><title>neuralang::oob (13 samples, 0.03%)</title><rect x="59.3471%" y="277" width="0.0321%" height="15" fill="rgb(219,56,2)" fg:x="24032" fg:w="13"/><text x="59.5971%" y="287.50"></text></g><g><title>neuralang::two_to_one (1,625 samples, 4.01%)</title><rect x="59.3792%" y="277" width="4.0129%" height="15" fill="rgb(233,0,4)" fg:x="24045" fg:w="1625"/><text x="59.6292%" y="287.50">neur..</text></g><g><title>&lt;slotmap::DefaultKey as slotmap::Key&gt;::data (94 samples, 0.23%)</title><rect x="63.6786%" y="261" width="0.2321%" height="15" fill="rgb(235,30,7)" fg:x="25786" fg:w="94"/><text x="63.9286%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (847 samples, 2.09%)</title><rect x="63.9107%" y="261" width="2.0917%" height="15" fill="rgb(250,79,13)" fg:x="25880" fg:w="847"/><text x="64.1607%" y="271.50">c..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (747 samples, 1.84%)</title><rect x="64.1577%" y="245" width="1.8447%" height="15" fill="rgb(211,146,34)" fg:x="25980" fg:w="747"/><text x="64.4077%" y="255.50">s..</text></g><g><title>core::option::Option&lt;T&gt;::map (154 samples, 0.38%)</title><rect x="66.0024%" y="261" width="0.3803%" height="15" fill="rgb(228,22,38)" fg:x="26727" fg:w="154"/><text x="66.2524%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (211 samples, 0.52%)</title><rect x="66.3827%" y="245" width="0.5211%" height="15" fill="rgb(235,168,5)" fg:x="26881" fg:w="211"/><text x="66.6327%" y="255.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (1,454 samples, 3.59%)</title><rect x="63.3921%" y="277" width="3.5907%" height="15" fill="rgb(221,155,16)" fg:x="25670" fg:w="1454"/><text x="63.6421%" y="287.50">slot..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (243 samples, 0.60%)</title><rect x="66.3827%" y="261" width="0.6001%" height="15" fill="rgb(215,215,53)" fg:x="26881" fg:w="243"/><text x="66.6327%" y="271.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (32 samples, 0.08%)</title><rect x="66.9037%" y="245" width="0.0790%" height="15" fill="rgb(223,4,10)" fg:x="27092" fg:w="32"/><text x="67.1537%" y="255.50"></text></g><g><title>&lt;slotmap::DefaultKey as slotmap::Key&gt;::data (18 samples, 0.04%)</title><rect x="67.1383%" y="261" width="0.0445%" height="15" fill="rgb(234,103,6)" fg:x="27187" fg:w="18"/><text x="67.3883%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (498 samples, 1.23%)</title><rect x="67.1828%" y="261" width="1.2298%" height="15" fill="rgb(227,97,0)" fg:x="27205" fg:w="498"/><text x="67.4328%" y="271.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut::{{closure}} (468 samples, 1.16%)</title><rect x="67.2569%" y="245" width="1.1557%" height="15" fill="rgb(234,150,53)" fg:x="27235" fg:w="468"/><text x="67.5069%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (14 samples, 0.03%)</title><rect x="68.4126%" y="261" width="0.0346%" height="15" fill="rgb(228,201,54)" fg:x="27703" fg:w="14"/><text x="68.6626%" y="271.50"></text></g><g><title>neuralang::World::check_collisions (21,023 samples, 51.92%)</title><rect x="16.6296%" y="293" width="51.9163%" height="15" fill="rgb(222,22,37)" fg:x="6734" fg:w="21023"/><text x="16.8796%" y="303.50">neuralang::World::check_collisions</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (633 samples, 1.56%)</title><rect x="66.9828%" y="277" width="1.5632%" height="15" fill="rgb(237,53,32)" fg:x="27124" fg:w="633"/><text x="67.2328%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (40 samples, 0.10%)</title><rect x="68.4472%" y="261" width="0.0988%" height="15" fill="rgb(233,25,53)" fg:x="27717" fg:w="40"/><text x="68.6972%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (40 samples, 0.10%)</title><rect x="68.4472%" y="245" width="0.0988%" height="15" fill="rgb(210,40,34)" fg:x="27717" fg:w="40"/><text x="68.6972%" y="255.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (22 samples, 0.05%)</title><rect x="68.9633%" y="229" width="0.0543%" height="15" fill="rgb(241,220,44)" fg:x="27926" fg:w="22"/><text x="69.2133%" y="239.50"></text></g><g><title>&lt;slotmap::DefaultKey as core::convert::From&lt;slotmap::KeyData&gt;&gt;::from (22 samples, 0.05%)</title><rect x="68.9633%" y="213" width="0.0543%" height="15" fill="rgb(235,28,35)" fg:x="27926" fg:w="22"/><text x="69.2133%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.04%)</title><rect x="69.0176%" y="229" width="0.0445%" height="15" fill="rgb(210,56,17)" fg:x="27948" fg:w="18"/><text x="69.2676%" y="239.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.04%)</title><rect x="69.0176%" y="213" width="0.0445%" height="15" fill="rgb(224,130,29)" fg:x="27948" fg:w="18"/><text x="69.2676%" y="223.50"></text></g><g><title>&lt;slotmap::basic::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (187 samples, 0.46%)</title><rect x="68.6694%" y="245" width="0.4618%" height="15" fill="rgb(235,212,8)" fg:x="27807" fg:w="187"/><text x="68.9194%" y="255.50"></text></g><g><title>slotmap::KeyData::new (28 samples, 0.07%)</title><rect x="69.0621%" y="229" width="0.0691%" height="15" fill="rgb(223,33,50)" fg:x="27966" fg:w="28"/><text x="69.3121%" y="239.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Add&gt;::add (354 samples, 0.87%)</title><rect x="69.1732%" y="213" width="0.8742%" height="15" fill="rgb(219,149,13)" fg:x="28011" fg:w="354"/><text x="69.4232%" y="223.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (354 samples, 0.87%)</title><rect x="69.1732%" y="197" width="0.8742%" height="15" fill="rgb(250,156,29)" fg:x="28011" fg:w="354"/><text x="69.4232%" y="207.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Mul&lt;f32&gt;&gt;::mul (179 samples, 0.44%)</title><rect x="70.0474%" y="213" width="0.4420%" height="15" fill="rgb(216,193,19)" fg:x="28365" fg:w="179"/><text x="70.2974%" y="223.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (179 samples, 0.44%)</title><rect x="70.0474%" y="197" width="0.4420%" height="15" fill="rgb(216,135,14)" fg:x="28365" fg:w="179"/><text x="70.2974%" y="207.50"></text></g><g><title>abstop12 (41 samples, 0.10%)</title><rect x="70.8401%" y="117" width="0.1012%" height="15" fill="rgb(241,47,5)" fg:x="28686" fg:w="41"/><text x="71.0901%" y="127.50"></text></g><g><title>asuint (36 samples, 0.09%)</title><rect x="70.8525%" y="101" width="0.0889%" height="15" fill="rgb(233,42,35)" fg:x="28691" fg:w="36"/><text x="71.1025%" y="111.50"></text></g><g><title>reduce_fast (44 samples, 0.11%)</title><rect x="70.9414%" y="117" width="0.1087%" height="15" fill="rgb(231,13,6)" fg:x="28727" fg:w="44"/><text x="71.1914%" y="127.50"></text></g><g><title>neuralang::dir_from_theta (557 samples, 1.38%)</title><rect x="70.4895%" y="213" width="1.3755%" height="15" fill="rgb(207,181,40)" fg:x="28544" fg:w="557"/><text x="70.7395%" y="223.50"></text></g><g><title>glam::f32::vec2::Vec2::from_angle (557 samples, 1.38%)</title><rect x="70.4895%" y="197" width="1.3755%" height="15" fill="rgb(254,173,49)" fg:x="28544" fg:w="557"/><text x="70.7395%" y="207.50"></text></g><g><title>glam::f32::math::std_math::sin_cos (557 samples, 1.38%)</title><rect x="70.4895%" y="181" width="1.3755%" height="15" fill="rgb(221,1,38)" fg:x="28544" fg:w="557"/><text x="70.7395%" y="191.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sin_cos (557 samples, 1.38%)</title><rect x="70.4895%" y="165" width="1.3755%" height="15" fill="rgb(206,124,46)" fg:x="28544" fg:w="557"/><text x="70.7395%" y="175.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sin (557 samples, 1.38%)</title><rect x="70.4895%" y="149" width="1.3755%" height="15" fill="rgb(249,21,11)" fg:x="28544" fg:w="557"/><text x="70.7395%" y="159.50"></text></g><g><title>__sincosf_fma (531 samples, 1.31%)</title><rect x="70.5537%" y="133" width="1.3113%" height="15" fill="rgb(222,201,40)" fg:x="28570" fg:w="531"/><text x="70.8037%" y="143.50"></text></g><g><title>sincosf_poly (330 samples, 0.81%)</title><rect x="71.0500%" y="117" width="0.8149%" height="15" fill="rgb(235,61,29)" fg:x="28771" fg:w="330"/><text x="71.3000%" y="127.50"></text></g><g><title>v2df_to_sf (97 samples, 0.24%)</title><rect x="71.6254%" y="101" width="0.2395%" height="15" fill="rgb(219,207,3)" fg:x="29004" fg:w="97"/><text x="71.8754%" y="111.50"></text></g><g><title>neuralang::World::move_beings (1,414 samples, 3.49%)</title><rect x="68.5460%" y="293" width="3.4919%" height="15" fill="rgb(222,56,46)" fg:x="27757" fg:w="1414"/><text x="68.7960%" y="303.50">neu..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,414 samples, 3.49%)</title><rect x="68.5460%" y="277" width="3.4919%" height="15" fill="rgb(239,76,54)" fg:x="27757" fg:w="1414"/><text x="68.7960%" y="287.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,414 samples, 3.49%)</title><rect x="68.5460%" y="261" width="3.4919%" height="15" fill="rgb(231,124,27)" fg:x="27757" fg:w="1414"/><text x="68.7960%" y="271.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1,177 samples, 2.91%)</title><rect x="69.1312%" y="245" width="2.9066%" height="15" fill="rgb(249,195,6)" fg:x="27994" fg:w="1177"/><text x="69.3812%" y="255.50">co..</text></g><g><title>neuralang::World::move_beings::{{closure}} (1,177 samples, 2.91%)</title><rect x="69.1312%" y="229" width="2.9066%" height="15" fill="rgb(237,174,47)" fg:x="27994" fg:w="1177"/><text x="69.3812%" y="239.50">ne..</text></g><g><title>neuralang::oob (70 samples, 0.17%)</title><rect x="71.8650%" y="213" width="0.1729%" height="15" fill="rgb(206,201,31)" fg:x="29101" fg:w="70"/><text x="72.1150%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (30 samples, 0.07%)</title><rect x="72.0428%" y="261" width="0.0741%" height="15" fill="rgb(231,57,52)" fg:x="29173" fg:w="30"/><text x="72.2928%" y="271.50"></text></g><g><title>neuralang::pos_to_cell (30 samples, 0.07%)</title><rect x="72.1169%" y="261" width="0.0741%" height="15" fill="rgb(248,177,22)" fg:x="29203" fg:w="30"/><text x="72.3669%" y="271.50"></text></g><g><title>__ieee754_fmodf (23 samples, 0.06%)</title><rect x="72.1341%" y="245" width="0.0568%" height="15" fill="rgb(215,211,37)" fg:x="29210" fg:w="23"/><text x="72.3841%" y="255.50"></text></g><g><title>neuralang::World::add_food (64 samples, 0.16%)</title><rect x="72.0428%" y="277" width="0.1580%" height="15" fill="rgb(241,128,51)" fg:x="29173" fg:w="64"/><text x="72.2928%" y="287.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (7 samples, 0.02%)</title><rect x="72.2132%" y="117" width="0.0173%" height="15" fill="rgb(227,165,31)" fg:x="29242" fg:w="7"/><text x="72.4632%" y="127.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (7 samples, 0.02%)</title><rect x="72.2132%" y="101" width="0.0173%" height="15" fill="rgb(228,167,24)" fg:x="29242" fg:w="7"/><text x="72.4632%" y="111.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (6 samples, 0.01%)</title><rect x="72.2156%" y="85" width="0.0148%" height="15" fill="rgb(228,143,12)" fg:x="29243" fg:w="6"/><text x="72.4656%" y="95.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (6 samples, 0.01%)</title><rect x="72.2156%" y="69" width="0.0148%" height="15" fill="rgb(249,149,8)" fg:x="29243" fg:w="6"/><text x="72.4656%" y="79.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (6 samples, 0.01%)</title><rect x="72.2156%" y="53" width="0.0148%" height="15" fill="rgb(243,35,44)" fg:x="29243" fg:w="6"/><text x="72.4656%" y="63.50"></text></g><g><title>rand_chacha::guts::round (5 samples, 0.01%)</title><rect x="72.2181%" y="37" width="0.0123%" height="15" fill="rgb(246,89,9)" fg:x="29244" fg:w="5"/><text x="72.4681%" y="47.50"></text></g><g><title>rand::rng::Rng::gen_range (13 samples, 0.03%)</title><rect x="72.2008%" y="277" width="0.0321%" height="15" fill="rgb(233,213,13)" fg:x="29237" fg:w="13"/><text x="72.4508%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (13 samples, 0.03%)</title><rect x="72.2008%" y="261" width="0.0321%" height="15" fill="rgb(233,141,41)" fg:x="29237" fg:w="13"/><text x="72.4508%" y="271.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformFloat&lt;f32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (13 samples, 0.03%)</title><rect x="72.2008%" y="245" width="0.0321%" height="15" fill="rgb(239,167,4)" fg:x="29237" fg:w="13"/><text x="72.4508%" y="255.50"></text></g><g><title>rand::rng::Rng::gen (9 samples, 0.02%)</title><rect x="72.2107%" y="229" width="0.0222%" height="15" fill="rgb(209,217,16)" fg:x="29241" fg:w="9"/><text x="72.4607%" y="239.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (9 samples, 0.02%)</title><rect x="72.2107%" y="213" width="0.0222%" height="15" fill="rgb(219,88,35)" fg:x="29241" fg:w="9"/><text x="72.4607%" y="223.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (9 samples, 0.02%)</title><rect x="72.2107%" y="197" width="0.0222%" height="15" fill="rgb(220,193,23)" fg:x="29241" fg:w="9"/><text x="72.4607%" y="207.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (9 samples, 0.02%)</title><rect x="72.2107%" y="181" width="0.0222%" height="15" fill="rgb(230,90,52)" fg:x="29241" fg:w="9"/><text x="72.4607%" y="191.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (9 samples, 0.02%)</title><rect x="72.2107%" y="165" width="0.0222%" height="15" fill="rgb(252,106,19)" fg:x="29241" fg:w="9"/><text x="72.4607%" y="175.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (8 samples, 0.02%)</title><rect x="72.2132%" y="149" width="0.0198%" height="15" fill="rgb(206,74,20)" fg:x="29242" fg:w="8"/><text x="72.4632%" y="159.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (8 samples, 0.02%)</title><rect x="72.2132%" y="133" width="0.0198%" height="15" fill="rgb(230,138,44)" fg:x="29242" fg:w="8"/><text x="72.4632%" y="143.50"></text></g><g><title>rand::rngs::thread::THREAD_RNG_KEY::__getit (7 samples, 0.02%)</title><rect x="72.2329%" y="229" width="0.0173%" height="15" fill="rgb(235,182,43)" fg:x="29250" fg:w="7"/><text x="72.4829%" y="239.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (7 samples, 0.02%)</title><rect x="72.2329%" y="213" width="0.0173%" height="15" fill="rgb(242,16,51)" fg:x="29250" fg:w="7"/><text x="72.4829%" y="223.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (7 samples, 0.02%)</title><rect x="72.2329%" y="197" width="0.0173%" height="15" fill="rgb(248,9,4)" fg:x="29250" fg:w="7"/><text x="72.4829%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (7 samples, 0.02%)</title><rect x="72.2329%" y="181" width="0.0173%" height="15" fill="rgb(210,31,22)" fg:x="29250" fg:w="7"/><text x="72.4829%" y="191.50"></text></g><g><title>neuralang::World::repop_foods (86 samples, 0.21%)</title><rect x="72.0428%" y="293" width="0.2124%" height="15" fill="rgb(239,54,39)" fg:x="29173" fg:w="86"/><text x="72.2928%" y="303.50"></text></g><g><title>rand::rngs::thread::thread_rng (9 samples, 0.02%)</title><rect x="72.2329%" y="277" width="0.0222%" height="15" fill="rgb(230,99,41)" fg:x="29250" fg:w="9"/><text x="72.4829%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (9 samples, 0.02%)</title><rect x="72.2329%" y="261" width="0.0222%" height="15" fill="rgb(253,106,12)" fg:x="29250" fg:w="9"/><text x="72.4829%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (9 samples, 0.02%)</title><rect x="72.2329%" y="245" width="0.0222%" height="15" fill="rgb(213,46,41)" fg:x="29250" fg:w="9"/><text x="72.4829%" y="255.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (46 samples, 0.11%)</title><rect x="72.9911%" y="261" width="0.1136%" height="15" fill="rgb(215,133,35)" fg:x="29557" fg:w="46"/><text x="73.2411%" y="271.50"></text></g><g><title>&lt;slotmap::DefaultKey as core::convert::From&lt;slotmap::KeyData&gt;&gt;::from (33 samples, 0.08%)</title><rect x="73.0232%" y="245" width="0.0815%" height="15" fill="rgb(213,28,5)" fg:x="29570" fg:w="33"/><text x="73.2732%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.05%)</title><rect x="73.1047%" y="261" width="0.0494%" height="15" fill="rgb(215,77,49)" fg:x="29603" fg:w="20"/><text x="73.3547%" y="271.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.05%)</title><rect x="73.1047%" y="245" width="0.0494%" height="15" fill="rgb(248,100,22)" fg:x="29603" fg:w="20"/><text x="73.3547%" y="255.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (10 samples, 0.02%)</title><rect x="73.1294%" y="229" width="0.0247%" height="15" fill="rgb(208,67,9)" fg:x="29613" fg:w="10"/><text x="73.3794%" y="239.50"></text></g><g><title>slotmap::KeyData::new (37 samples, 0.09%)</title><rect x="73.1565%" y="261" width="0.0914%" height="15" fill="rgb(219,133,21)" fg:x="29624" fg:w="37"/><text x="73.4065%" y="271.50"></text></g><g><title>&lt;slotmap::basic::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (282 samples, 0.70%)</title><rect x="72.5836%" y="277" width="0.6964%" height="15" fill="rgb(246,46,29)" fg:x="29392" fg:w="282"/><text x="72.8336%" y="287.50"></text></g><g><title>slotmap::basic::Slot&lt;T&gt;::get_mut (13 samples, 0.03%)</title><rect x="73.2479%" y="261" width="0.0321%" height="15" fill="rgb(246,185,52)" fg:x="29661" fg:w="13"/><text x="73.4979%" y="271.50"></text></g><g><title>slotmap::basic::Slot&lt;T&gt;::occupied (13 samples, 0.03%)</title><rect x="73.2479%" y="245" width="0.0321%" height="15" fill="rgb(252,136,11)" fg:x="29661" fg:w="13"/><text x="73.4979%" y="255.50"></text></g><g><title>neuralang::World::tire_beings (417 samples, 1.03%)</title><rect x="72.2551%" y="293" width="1.0298%" height="15" fill="rgb(219,138,53)" fg:x="29259" fg:w="417"/><text x="72.5051%" y="303.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Add&gt;::add (9 samples, 0.02%)</title><rect x="73.8776%" y="277" width="0.0222%" height="15" fill="rgb(211,51,23)" fg:x="29916" fg:w="9"/><text x="74.1276%" y="287.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (9 samples, 0.02%)</title><rect x="73.8776%" y="261" width="0.0222%" height="15" fill="rgb(247,221,28)" fg:x="29916" fg:w="9"/><text x="74.1276%" y="271.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (32 samples, 0.08%)</title><rect x="74.2579%" y="261" width="0.0790%" height="15" fill="rgb(251,222,45)" fg:x="30070" fg:w="32"/><text x="74.5079%" y="271.50"></text></g><g><title>&lt;slotmap::DefaultKey as core::convert::From&lt;slotmap::KeyData&gt;&gt;::from (31 samples, 0.08%)</title><rect x="74.2604%" y="245" width="0.0766%" height="15" fill="rgb(217,162,53)" fg:x="30071" fg:w="31"/><text x="74.5104%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.06%)</title><rect x="74.3369%" y="261" width="0.0617%" height="15" fill="rgb(229,93,14)" fg:x="30102" fg:w="25"/><text x="74.5869%" y="271.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.06%)</title><rect x="74.3369%" y="245" width="0.0617%" height="15" fill="rgb(209,67,49)" fg:x="30102" fg:w="25"/><text x="74.5869%" y="255.50"></text></g><g><title>slotmap::KeyData::new (17 samples, 0.04%)</title><rect x="74.3987%" y="261" width="0.0420%" height="15" fill="rgb(213,87,29)" fg:x="30127" fg:w="17"/><text x="74.6487%" y="271.50"></text></g><g><title>&lt;slotmap::basic::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (221 samples, 0.55%)</title><rect x="73.8998%" y="277" width="0.5458%" height="15" fill="rgb(205,151,52)" fg:x="29925" fg:w="221"/><text x="74.1498%" y="287.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="74.4456%" y="277" width="0.0123%" height="15" fill="rgb(253,215,39)" fg:x="30146" fg:w="5"/><text x="74.6956%" y="287.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="74.4456%" y="261" width="0.0123%" height="15" fill="rgb(221,220,41)" fg:x="30146" fg:w="5"/><text x="74.6956%" y="271.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="74.4456%" y="245" width="0.0123%" height="15" fill="rgb(218,133,21)" fg:x="30146" fg:w="5"/><text x="74.6956%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="74.4456%" y="229" width="0.0123%" height="15" fill="rgb(221,193,43)" fg:x="30146" fg:w="5"/><text x="74.6956%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="74.4456%" y="213" width="0.0123%" height="15" fill="rgb(240,128,52)" fg:x="30146" fg:w="5"/><text x="74.6956%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="74.4456%" y="197" width="0.0123%" height="15" fill="rgb(253,114,12)" fg:x="30146" fg:w="5"/><text x="74.6956%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="74.4456%" y="181" width="0.0123%" height="15" fill="rgb(215,223,47)" fg:x="30146" fg:w="5"/><text x="74.6956%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="74.4456%" y="165" width="0.0123%" height="15" fill="rgb(248,225,23)" fg:x="30146" fg:w="5"/><text x="74.6956%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="74.4456%" y="149" width="0.0123%" height="15" fill="rgb(250,108,0)" fg:x="30146" fg:w="5"/><text x="74.6956%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="74.4456%" y="133" width="0.0123%" height="15" fill="rgb(228,208,7)" fg:x="30146" fg:w="5"/><text x="74.6956%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="74.4456%" y="117" width="0.0123%" height="15" fill="rgb(244,45,10)" fg:x="30146" fg:w="5"/><text x="74.6956%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="74.4456%" y="101" width="0.0123%" height="15" fill="rgb(207,125,25)" fg:x="30146" fg:w="5"/><text x="74.6956%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="74.4456%" y="85" width="0.0123%" height="15" fill="rgb(210,195,18)" fg:x="30146" fg:w="5"/><text x="74.6956%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="74.4456%" y="69" width="0.0123%" height="15" fill="rgb(249,80,12)" fg:x="30146" fg:w="5"/><text x="74.6956%" y="79.50"></text></g><g><title>neuralang::main (315 samples, 0.78%)</title><rect x="74.4579%" y="277" width="0.7779%" height="15" fill="rgb(221,65,9)" fg:x="30151" fg:w="315"/><text x="74.7079%" y="287.50"></text></g><g><title>neuralang::oob (10 samples, 0.02%)</title><rect x="75.2358%" y="277" width="0.0247%" height="15" fill="rgb(235,49,36)" fg:x="30466" fg:w="10"/><text x="75.4858%" y="287.50"></text></g><g><title>__fmodf (321 samples, 0.79%)</title><rect x="77.3300%" y="261" width="0.7927%" height="15" fill="rgb(225,32,20)" fg:x="31314" fg:w="321"/><text x="77.5800%" y="271.50"></text></g><g><title>neuralang::pos_to_cell (5,174 samples, 12.78%)</title><rect x="75.2605%" y="277" width="12.7772%" height="15" fill="rgb(215,141,46)" fg:x="30476" fg:w="5174"/><text x="75.5105%" y="287.50">neuralang::pos_to_c..</text></g><g><title>__ieee754_fmodf (4,015 samples, 9.92%)</title><rect x="78.1227%" y="261" width="9.9150%" height="15" fill="rgb(250,160,47)" fg:x="31635" fg:w="4015"/><text x="78.3727%" y="271.50">__ieee754_fmodf</text></g><g><title>neuralang::World::update_cells (6,023 samples, 14.87%)</title><rect x="73.2849%" y="293" width="14.8738%" height="15" fill="rgb(216,222,40)" fg:x="29676" fg:w="6023"/><text x="73.5349%" y="303.50">neuralang::World::updat..</text></g><g><title>neuralang::same_partition_index (49 samples, 0.12%)</title><rect x="88.0377%" y="277" width="0.1210%" height="15" fill="rgb(234,217,39)" fg:x="35650" fg:w="49"/><text x="88.2877%" y="287.50"></text></g><g><title>__libc_start_main_impl (38,306 samples, 94.60%)</title><rect x="5.3810%" y="581" width="94.5967%" height="15" fill="rgb(207,178,40)" fg:x="2179" fg:w="38306"/><text x="5.6310%" y="591.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (38,306 samples, 94.60%)</title><rect x="5.3810%" y="565" width="94.5967%" height="15" fill="rgb(221,136,13)" fg:x="2179" fg:w="38306"/><text x="5.6310%" y="575.50">__libc_start_call_main</text></g><g><title>main (38,306 samples, 94.60%)</title><rect x="5.3810%" y="549" width="94.5967%" height="15" fill="rgb(249,199,10)" fg:x="2179" fg:w="38306"/><text x="5.6310%" y="559.50">main</text></g><g><title>std::rt::lang_start_internal (38,306 samples, 94.60%)</title><rect x="5.3810%" y="533" width="94.5967%" height="15" fill="rgb(249,222,13)" fg:x="2179" fg:w="38306"/><text x="5.6310%" y="543.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (38,306 samples, 94.60%)</title><rect x="5.3810%" y="517" width="94.5967%" height="15" fill="rgb(244,185,38)" fg:x="2179" fg:w="38306"/><text x="5.6310%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (38,306 samples, 94.60%)</title><rect x="5.3810%" y="501" width="94.5967%" height="15" fill="rgb(236,202,9)" fg:x="2179" fg:w="38306"/><text x="5.6310%" y="511.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (38,306 samples, 94.60%)</title><rect x="5.3810%" y="485" width="94.5967%" height="15" fill="rgb(250,229,37)" fg:x="2179" fg:w="38306"/><text x="5.6310%" y="495.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (38,306 samples, 94.60%)</title><rect x="5.3810%" y="469" width="94.5967%" height="15" fill="rgb(206,174,23)" fg:x="2179" fg:w="38306"/><text x="5.6310%" y="479.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (38,306 samples, 94.60%)</title><rect x="5.3810%" y="453" width="94.5967%" height="15" fill="rgb(211,33,43)" fg:x="2179" fg:w="38306"/><text x="5.6310%" y="463.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (38,306 samples, 94.60%)</title><rect x="5.3810%" y="437" width="94.5967%" height="15" fill="rgb(245,58,50)" fg:x="2179" fg:w="38306"/><text x="5.6310%" y="447.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (38,306 samples, 94.60%)</title><rect x="5.3810%" y="421" width="94.5967%" height="15" fill="rgb(244,68,36)" fg:x="2179" fg:w="38306"/><text x="5.6310%" y="431.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (38,306 samples, 94.60%)</title><rect x="5.3810%" y="405" width="94.5967%" height="15" fill="rgb(232,229,15)" fg:x="2179" fg:w="38306"/><text x="5.6310%" y="415.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (38,306 samples, 94.60%)</title><rect x="5.3810%" y="389" width="94.5967%" height="15" fill="rgb(254,30,23)" fg:x="2179" fg:w="38306"/><text x="5.6310%" y="399.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (38,306 samples, 94.60%)</title><rect x="5.3810%" y="373" width="94.5967%" height="15" fill="rgb(235,160,14)" fg:x="2179" fg:w="38306"/><text x="5.6310%" y="383.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (38,306 samples, 94.60%)</title><rect x="5.3810%" y="357" width="94.5967%" height="15" fill="rgb(212,155,44)" fg:x="2179" fg:w="38306"/><text x="5.6310%" y="367.50">core::ops::function::FnOnce::call_once</text></g><g><title>neuralang::main (38,306 samples, 94.60%)</title><rect x="5.3810%" y="341" width="94.5967%" height="15" fill="rgb(226,2,50)" fg:x="2179" fg:w="38306"/><text x="5.6310%" y="351.50">neuralang::main</text></g><g><title>neuralang::gauge (38,306 samples, 94.60%)</title><rect x="5.3810%" y="325" width="94.5967%" height="15" fill="rgb(234,177,6)" fg:x="2179" fg:w="38306"/><text x="5.6310%" y="335.50">neuralang::gauge</text></g><g><title>neuralang::World::step (38,305 samples, 94.59%)</title><rect x="5.3835%" y="309" width="94.5943%" height="15" fill="rgb(217,24,9)" fg:x="2180" fg:w="38305"/><text x="5.6335%" y="319.50">neuralang::World::step</text></g><g><title>neuralang::main (4,786 samples, 11.82%)</title><rect x="88.1587%" y="293" width="11.8190%" height="15" fill="rgb(220,13,46)" fg:x="35699" fg:w="4786"/><text x="88.4087%" y="303.50">neuralang::main</text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="99.9555%" y="277" width="0.0222%" height="15" fill="rgb(239,221,27)" fg:x="40476" fg:w="9"/><text x="100.2055%" y="287.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9630%" y="261" width="0.0148%" height="15" fill="rgb(222,198,25)" fg:x="40479" fg:w="6"/><text x="100.2130%" y="271.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9630%" y="245" width="0.0148%" height="15" fill="rgb(211,99,13)" fg:x="40479" fg:w="6"/><text x="100.2130%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9654%" y="229" width="0.0123%" height="15" fill="rgb(232,111,31)" fg:x="40480" fg:w="5"/><text x="100.2154%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9654%" y="213" width="0.0123%" height="15" fill="rgb(245,82,37)" fg:x="40480" fg:w="5"/><text x="100.2154%" y="223.50"></text></g><g><title>_start (38,307 samples, 94.60%)</title><rect x="5.3810%" y="597" width="94.5992%" height="15" fill="rgb(227,149,46)" fg:x="2179" fg:w="38307"/><text x="5.6310%" y="607.50">_start</text></g><g><title>neuralang (40,489 samples, 99.99%)</title><rect x="0.0000%" y="613" width="99.9877%" height="15" fill="rgb(218,36,50)" fg:x="0" fg:w="40489"/><text x="0.2500%" y="623.50">neuralang</text></g><g><title>all (40,494 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(226,80,48)" fg:x="0" fg:w="40494"/><text x="0.2500%" y="639.50"></text></g><g><title>perf-exec (5 samples, 0.01%)</title><rect x="99.9877%" y="613" width="0.0123%" height="15" fill="rgb(238,224,15)" fg:x="40489" fg:w="5"/><text x="100.2377%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="597" width="0.0123%" height="15" fill="rgb(241,136,10)" fg:x="40489" fg:w="5"/><text x="100.2377%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="581" width="0.0123%" height="15" fill="rgb(208,32,45)" fg:x="40489" fg:w="5"/><text x="100.2377%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="565" width="0.0123%" height="15" fill="rgb(207,135,9)" fg:x="40489" fg:w="5"/><text x="100.2377%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="549" width="0.0123%" height="15" fill="rgb(206,86,44)" fg:x="40489" fg:w="5"/><text x="100.2377%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="533" width="0.0123%" height="15" fill="rgb(245,177,15)" fg:x="40489" fg:w="5"/><text x="100.2377%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="517" width="0.0123%" height="15" fill="rgb(206,64,50)" fg:x="40489" fg:w="5"/><text x="100.2377%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="501" width="0.0123%" height="15" fill="rgb(234,36,40)" fg:x="40489" fg:w="5"/><text x="100.2377%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="485" width="0.0123%" height="15" fill="rgb(213,64,8)" fg:x="40489" fg:w="5"/><text x="100.2377%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="469" width="0.0123%" height="15" fill="rgb(210,75,36)" fg:x="40489" fg:w="5"/><text x="100.2377%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="453" width="0.0123%" height="15" fill="rgb(229,88,21)" fg:x="40489" fg:w="5"/><text x="100.2377%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="437" width="0.0123%" height="15" fill="rgb(252,204,47)" fg:x="40489" fg:w="5"/><text x="100.2377%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="421" width="0.0123%" height="15" fill="rgb(208,77,27)" fg:x="40489" fg:w="5"/><text x="100.2377%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="405" width="0.0123%" height="15" fill="rgb(221,76,26)" fg:x="40489" fg:w="5"/><text x="100.2377%" y="415.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="389" width="0.0123%" height="15" fill="rgb(225,139,18)" fg:x="40489" fg:w="5"/><text x="100.2377%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="373" width="0.0123%" height="15" fill="rgb(230,137,11)" fg:x="40489" fg:w="5"/><text x="100.2377%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="357" width="0.0123%" height="15" fill="rgb(212,28,1)" fg:x="40489" fg:w="5"/><text x="100.2377%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9877%" y="341" width="0.0123%" height="15" fill="rgb(248,164,17)" fg:x="40489" fg:w="5"/><text x="100.2377%" y="351.50"></text></g></svg></svg>